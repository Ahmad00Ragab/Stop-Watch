
STOP_WATCH.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002998  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000008  00800060  00002998  00002a2c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000022  00800068  00800068  00002a34  2**0
                  ALLOC
  3 .stab         00001fb0  00000000  00000000  00002a34  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001146  00000000  00000000  000049e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000160  00000000  00000000  00005b2a  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 0000018f  00000000  00000000  00005c8a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002045  00000000  00000000  00005e19  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001101  00000000  00000000  00007e5e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000f82  00000000  00000000  00008f5f  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000180  00000000  00000000  00009ee4  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002c2  00000000  00000000  0000a064  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000088e  00000000  00000000  0000a326  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000abb4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 4f 06 	jmp	0xc9e	; 0xc9e <__vector_1>
       8:	0c 94 7c 06 	jmp	0xcf8	; 0xcf8 <__vector_2>
       c:	0c 94 a9 06 	jmp	0xd52	; 0xd52 <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 e3 12 	jmp	0x25c6	; 0x25c6 <__vector_6>
      1c:	0c 94 89 12 	jmp	0x2512	; 0x2512 <__vector_7>
      20:	0c 94 b6 12 	jmp	0x256c	; 0x256c <__vector_8>
      24:	0c 94 5c 12 	jmp	0x24b8	; 0x24b8 <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a8 e6       	ldi	r26, 0x68	; 104
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
      68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
      6a:	aa 38       	cpi	r26, 0x8A	; 138
      6c:	b1 07       	cpc	r27, r17
      6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>

00000070 <__do_copy_data>:
      70:	10 e0       	ldi	r17, 0x00	; 0
      72:	a0 e6       	ldi	r26, 0x60	; 96
      74:	b0 e0       	ldi	r27, 0x00	; 0
      76:	e8 e9       	ldi	r30, 0x98	; 152
      78:	f9 e2       	ldi	r31, 0x29	; 41
      7a:	02 c0       	rjmp	.+4      	; 0x80 <.do_copy_data_start>

0000007c <.do_copy_data_loop>:
      7c:	05 90       	lpm	r0, Z+
      7e:	0d 92       	st	X+, r0

00000080 <.do_copy_data_start>:
      80:	a8 36       	cpi	r26, 0x68	; 104
      82:	b1 07       	cpc	r27, r17
      84:	d9 f7       	brne	.-10     	; 0x7c <.do_copy_data_loop>
      86:	0e 94 29 0b 	call	0x1652	; 0x1652 <main>
      8a:	0c 94 ca 14 	jmp	0x2994	; 0x2994 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 93 14 	jmp	0x2926	; 0x2926 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 af 14 	jmp	0x295e	; 0x295e <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 9f 14 	jmp	0x293e	; 0x293e <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 bb 14 	jmp	0x2976	; 0x2976 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 9f 14 	jmp	0x293e	; 0x293e <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 bb 14 	jmp	0x2976	; 0x2976 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 93 14 	jmp	0x2926	; 0x2926 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 af 14 	jmp	0x295e	; 0x295e <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 9b 14 	jmp	0x2936	; 0x2936 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	60 e6       	ldi	r22, 0x60	; 96
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 b7 14 	jmp	0x296e	; 0x296e <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 9f 14 	jmp	0x293e	; 0x293e <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 bb 14 	jmp	0x2976	; 0x2976 <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 9f 14 	jmp	0x293e	; 0x293e <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 bb 14 	jmp	0x2976	; 0x2976 <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 9f 14 	jmp	0x293e	; 0x293e <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 bb 14 	jmp	0x2976	; 0x2976 <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 a3 14 	jmp	0x2946	; 0x2946 <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 bf 14 	jmp	0x297e	; 0x297e <__epilogue_restores__+0x20>

00000952 <__pack_f>:
     952:	df 92       	push	r13
     954:	ef 92       	push	r14
     956:	ff 92       	push	r15
     958:	0f 93       	push	r16
     95a:	1f 93       	push	r17
     95c:	fc 01       	movw	r30, r24
     95e:	e4 80       	ldd	r14, Z+4	; 0x04
     960:	f5 80       	ldd	r15, Z+5	; 0x05
     962:	06 81       	ldd	r16, Z+6	; 0x06
     964:	17 81       	ldd	r17, Z+7	; 0x07
     966:	d1 80       	ldd	r13, Z+1	; 0x01
     968:	80 81       	ld	r24, Z
     96a:	82 30       	cpi	r24, 0x02	; 2
     96c:	48 f4       	brcc	.+18     	; 0x980 <__pack_f+0x2e>
     96e:	80 e0       	ldi	r24, 0x00	; 0
     970:	90 e0       	ldi	r25, 0x00	; 0
     972:	a0 e1       	ldi	r26, 0x10	; 16
     974:	b0 e0       	ldi	r27, 0x00	; 0
     976:	e8 2a       	or	r14, r24
     978:	f9 2a       	or	r15, r25
     97a:	0a 2b       	or	r16, r26
     97c:	1b 2b       	or	r17, r27
     97e:	a5 c0       	rjmp	.+330    	; 0xaca <__pack_f+0x178>
     980:	84 30       	cpi	r24, 0x04	; 4
     982:	09 f4       	brne	.+2      	; 0x986 <__pack_f+0x34>
     984:	9f c0       	rjmp	.+318    	; 0xac4 <__pack_f+0x172>
     986:	82 30       	cpi	r24, 0x02	; 2
     988:	21 f4       	brne	.+8      	; 0x992 <__pack_f+0x40>
     98a:	ee 24       	eor	r14, r14
     98c:	ff 24       	eor	r15, r15
     98e:	87 01       	movw	r16, r14
     990:	05 c0       	rjmp	.+10     	; 0x99c <__pack_f+0x4a>
     992:	e1 14       	cp	r14, r1
     994:	f1 04       	cpc	r15, r1
     996:	01 05       	cpc	r16, r1
     998:	11 05       	cpc	r17, r1
     99a:	19 f4       	brne	.+6      	; 0x9a2 <__pack_f+0x50>
     99c:	e0 e0       	ldi	r30, 0x00	; 0
     99e:	f0 e0       	ldi	r31, 0x00	; 0
     9a0:	96 c0       	rjmp	.+300    	; 0xace <__pack_f+0x17c>
     9a2:	62 81       	ldd	r22, Z+2	; 0x02
     9a4:	73 81       	ldd	r23, Z+3	; 0x03
     9a6:	9f ef       	ldi	r25, 0xFF	; 255
     9a8:	62 38       	cpi	r22, 0x82	; 130
     9aa:	79 07       	cpc	r23, r25
     9ac:	0c f0       	brlt	.+2      	; 0x9b0 <__pack_f+0x5e>
     9ae:	5b c0       	rjmp	.+182    	; 0xa66 <__pack_f+0x114>
     9b0:	22 e8       	ldi	r18, 0x82	; 130
     9b2:	3f ef       	ldi	r19, 0xFF	; 255
     9b4:	26 1b       	sub	r18, r22
     9b6:	37 0b       	sbc	r19, r23
     9b8:	2a 31       	cpi	r18, 0x1A	; 26
     9ba:	31 05       	cpc	r19, r1
     9bc:	2c f0       	brlt	.+10     	; 0x9c8 <__pack_f+0x76>
     9be:	20 e0       	ldi	r18, 0x00	; 0
     9c0:	30 e0       	ldi	r19, 0x00	; 0
     9c2:	40 e0       	ldi	r20, 0x00	; 0
     9c4:	50 e0       	ldi	r21, 0x00	; 0
     9c6:	2a c0       	rjmp	.+84     	; 0xa1c <__pack_f+0xca>
     9c8:	b8 01       	movw	r22, r16
     9ca:	a7 01       	movw	r20, r14
     9cc:	02 2e       	mov	r0, r18
     9ce:	04 c0       	rjmp	.+8      	; 0x9d8 <__pack_f+0x86>
     9d0:	76 95       	lsr	r23
     9d2:	67 95       	ror	r22
     9d4:	57 95       	ror	r21
     9d6:	47 95       	ror	r20
     9d8:	0a 94       	dec	r0
     9da:	d2 f7       	brpl	.-12     	; 0x9d0 <__pack_f+0x7e>
     9dc:	81 e0       	ldi	r24, 0x01	; 1
     9de:	90 e0       	ldi	r25, 0x00	; 0
     9e0:	a0 e0       	ldi	r26, 0x00	; 0
     9e2:	b0 e0       	ldi	r27, 0x00	; 0
     9e4:	04 c0       	rjmp	.+8      	; 0x9ee <__pack_f+0x9c>
     9e6:	88 0f       	add	r24, r24
     9e8:	99 1f       	adc	r25, r25
     9ea:	aa 1f       	adc	r26, r26
     9ec:	bb 1f       	adc	r27, r27
     9ee:	2a 95       	dec	r18
     9f0:	d2 f7       	brpl	.-12     	; 0x9e6 <__pack_f+0x94>
     9f2:	01 97       	sbiw	r24, 0x01	; 1
     9f4:	a1 09       	sbc	r26, r1
     9f6:	b1 09       	sbc	r27, r1
     9f8:	8e 21       	and	r24, r14
     9fa:	9f 21       	and	r25, r15
     9fc:	a0 23       	and	r26, r16
     9fe:	b1 23       	and	r27, r17
     a00:	00 97       	sbiw	r24, 0x00	; 0
     a02:	a1 05       	cpc	r26, r1
     a04:	b1 05       	cpc	r27, r1
     a06:	21 f0       	breq	.+8      	; 0xa10 <__pack_f+0xbe>
     a08:	81 e0       	ldi	r24, 0x01	; 1
     a0a:	90 e0       	ldi	r25, 0x00	; 0
     a0c:	a0 e0       	ldi	r26, 0x00	; 0
     a0e:	b0 e0       	ldi	r27, 0x00	; 0
     a10:	9a 01       	movw	r18, r20
     a12:	ab 01       	movw	r20, r22
     a14:	28 2b       	or	r18, r24
     a16:	39 2b       	or	r19, r25
     a18:	4a 2b       	or	r20, r26
     a1a:	5b 2b       	or	r21, r27
     a1c:	da 01       	movw	r26, r20
     a1e:	c9 01       	movw	r24, r18
     a20:	8f 77       	andi	r24, 0x7F	; 127
     a22:	90 70       	andi	r25, 0x00	; 0
     a24:	a0 70       	andi	r26, 0x00	; 0
     a26:	b0 70       	andi	r27, 0x00	; 0
     a28:	80 34       	cpi	r24, 0x40	; 64
     a2a:	91 05       	cpc	r25, r1
     a2c:	a1 05       	cpc	r26, r1
     a2e:	b1 05       	cpc	r27, r1
     a30:	39 f4       	brne	.+14     	; 0xa40 <__pack_f+0xee>
     a32:	27 ff       	sbrs	r18, 7
     a34:	09 c0       	rjmp	.+18     	; 0xa48 <__pack_f+0xf6>
     a36:	20 5c       	subi	r18, 0xC0	; 192
     a38:	3f 4f       	sbci	r19, 0xFF	; 255
     a3a:	4f 4f       	sbci	r20, 0xFF	; 255
     a3c:	5f 4f       	sbci	r21, 0xFF	; 255
     a3e:	04 c0       	rjmp	.+8      	; 0xa48 <__pack_f+0xf6>
     a40:	21 5c       	subi	r18, 0xC1	; 193
     a42:	3f 4f       	sbci	r19, 0xFF	; 255
     a44:	4f 4f       	sbci	r20, 0xFF	; 255
     a46:	5f 4f       	sbci	r21, 0xFF	; 255
     a48:	e0 e0       	ldi	r30, 0x00	; 0
     a4a:	f0 e0       	ldi	r31, 0x00	; 0
     a4c:	20 30       	cpi	r18, 0x00	; 0
     a4e:	a0 e0       	ldi	r26, 0x00	; 0
     a50:	3a 07       	cpc	r19, r26
     a52:	a0 e0       	ldi	r26, 0x00	; 0
     a54:	4a 07       	cpc	r20, r26
     a56:	a0 e4       	ldi	r26, 0x40	; 64
     a58:	5a 07       	cpc	r21, r26
     a5a:	10 f0       	brcs	.+4      	; 0xa60 <__pack_f+0x10e>
     a5c:	e1 e0       	ldi	r30, 0x01	; 1
     a5e:	f0 e0       	ldi	r31, 0x00	; 0
     a60:	79 01       	movw	r14, r18
     a62:	8a 01       	movw	r16, r20
     a64:	27 c0       	rjmp	.+78     	; 0xab4 <__pack_f+0x162>
     a66:	60 38       	cpi	r22, 0x80	; 128
     a68:	71 05       	cpc	r23, r1
     a6a:	64 f5       	brge	.+88     	; 0xac4 <__pack_f+0x172>
     a6c:	fb 01       	movw	r30, r22
     a6e:	e1 58       	subi	r30, 0x81	; 129
     a70:	ff 4f       	sbci	r31, 0xFF	; 255
     a72:	d8 01       	movw	r26, r16
     a74:	c7 01       	movw	r24, r14
     a76:	8f 77       	andi	r24, 0x7F	; 127
     a78:	90 70       	andi	r25, 0x00	; 0
     a7a:	a0 70       	andi	r26, 0x00	; 0
     a7c:	b0 70       	andi	r27, 0x00	; 0
     a7e:	80 34       	cpi	r24, 0x40	; 64
     a80:	91 05       	cpc	r25, r1
     a82:	a1 05       	cpc	r26, r1
     a84:	b1 05       	cpc	r27, r1
     a86:	39 f4       	brne	.+14     	; 0xa96 <__pack_f+0x144>
     a88:	e7 fe       	sbrs	r14, 7
     a8a:	0d c0       	rjmp	.+26     	; 0xaa6 <__pack_f+0x154>
     a8c:	80 e4       	ldi	r24, 0x40	; 64
     a8e:	90 e0       	ldi	r25, 0x00	; 0
     a90:	a0 e0       	ldi	r26, 0x00	; 0
     a92:	b0 e0       	ldi	r27, 0x00	; 0
     a94:	04 c0       	rjmp	.+8      	; 0xa9e <__pack_f+0x14c>
     a96:	8f e3       	ldi	r24, 0x3F	; 63
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	e8 0e       	add	r14, r24
     aa0:	f9 1e       	adc	r15, r25
     aa2:	0a 1f       	adc	r16, r26
     aa4:	1b 1f       	adc	r17, r27
     aa6:	17 ff       	sbrs	r17, 7
     aa8:	05 c0       	rjmp	.+10     	; 0xab4 <__pack_f+0x162>
     aaa:	16 95       	lsr	r17
     aac:	07 95       	ror	r16
     aae:	f7 94       	ror	r15
     ab0:	e7 94       	ror	r14
     ab2:	31 96       	adiw	r30, 0x01	; 1
     ab4:	87 e0       	ldi	r24, 0x07	; 7
     ab6:	16 95       	lsr	r17
     ab8:	07 95       	ror	r16
     aba:	f7 94       	ror	r15
     abc:	e7 94       	ror	r14
     abe:	8a 95       	dec	r24
     ac0:	d1 f7       	brne	.-12     	; 0xab6 <__pack_f+0x164>
     ac2:	05 c0       	rjmp	.+10     	; 0xace <__pack_f+0x17c>
     ac4:	ee 24       	eor	r14, r14
     ac6:	ff 24       	eor	r15, r15
     ac8:	87 01       	movw	r16, r14
     aca:	ef ef       	ldi	r30, 0xFF	; 255
     acc:	f0 e0       	ldi	r31, 0x00	; 0
     ace:	6e 2f       	mov	r22, r30
     ad0:	67 95       	ror	r22
     ad2:	66 27       	eor	r22, r22
     ad4:	67 95       	ror	r22
     ad6:	90 2f       	mov	r25, r16
     ad8:	9f 77       	andi	r25, 0x7F	; 127
     ada:	d7 94       	ror	r13
     adc:	dd 24       	eor	r13, r13
     ade:	d7 94       	ror	r13
     ae0:	8e 2f       	mov	r24, r30
     ae2:	86 95       	lsr	r24
     ae4:	49 2f       	mov	r20, r25
     ae6:	46 2b       	or	r20, r22
     ae8:	58 2f       	mov	r21, r24
     aea:	5d 29       	or	r21, r13
     aec:	b7 01       	movw	r22, r14
     aee:	ca 01       	movw	r24, r20
     af0:	1f 91       	pop	r17
     af2:	0f 91       	pop	r16
     af4:	ff 90       	pop	r15
     af6:	ef 90       	pop	r14
     af8:	df 90       	pop	r13
     afa:	08 95       	ret

00000afc <__unpack_f>:
     afc:	fc 01       	movw	r30, r24
     afe:	db 01       	movw	r26, r22
     b00:	40 81       	ld	r20, Z
     b02:	51 81       	ldd	r21, Z+1	; 0x01
     b04:	22 81       	ldd	r18, Z+2	; 0x02
     b06:	62 2f       	mov	r22, r18
     b08:	6f 77       	andi	r22, 0x7F	; 127
     b0a:	70 e0       	ldi	r23, 0x00	; 0
     b0c:	22 1f       	adc	r18, r18
     b0e:	22 27       	eor	r18, r18
     b10:	22 1f       	adc	r18, r18
     b12:	93 81       	ldd	r25, Z+3	; 0x03
     b14:	89 2f       	mov	r24, r25
     b16:	88 0f       	add	r24, r24
     b18:	82 2b       	or	r24, r18
     b1a:	28 2f       	mov	r18, r24
     b1c:	30 e0       	ldi	r19, 0x00	; 0
     b1e:	99 1f       	adc	r25, r25
     b20:	99 27       	eor	r25, r25
     b22:	99 1f       	adc	r25, r25
     b24:	11 96       	adiw	r26, 0x01	; 1
     b26:	9c 93       	st	X, r25
     b28:	11 97       	sbiw	r26, 0x01	; 1
     b2a:	21 15       	cp	r18, r1
     b2c:	31 05       	cpc	r19, r1
     b2e:	a9 f5       	brne	.+106    	; 0xb9a <__unpack_f+0x9e>
     b30:	41 15       	cp	r20, r1
     b32:	51 05       	cpc	r21, r1
     b34:	61 05       	cpc	r22, r1
     b36:	71 05       	cpc	r23, r1
     b38:	11 f4       	brne	.+4      	; 0xb3e <__unpack_f+0x42>
     b3a:	82 e0       	ldi	r24, 0x02	; 2
     b3c:	37 c0       	rjmp	.+110    	; 0xbac <__unpack_f+0xb0>
     b3e:	82 e8       	ldi	r24, 0x82	; 130
     b40:	9f ef       	ldi	r25, 0xFF	; 255
     b42:	13 96       	adiw	r26, 0x03	; 3
     b44:	9c 93       	st	X, r25
     b46:	8e 93       	st	-X, r24
     b48:	12 97       	sbiw	r26, 0x02	; 2
     b4a:	9a 01       	movw	r18, r20
     b4c:	ab 01       	movw	r20, r22
     b4e:	67 e0       	ldi	r22, 0x07	; 7
     b50:	22 0f       	add	r18, r18
     b52:	33 1f       	adc	r19, r19
     b54:	44 1f       	adc	r20, r20
     b56:	55 1f       	adc	r21, r21
     b58:	6a 95       	dec	r22
     b5a:	d1 f7       	brne	.-12     	; 0xb50 <__unpack_f+0x54>
     b5c:	83 e0       	ldi	r24, 0x03	; 3
     b5e:	8c 93       	st	X, r24
     b60:	0d c0       	rjmp	.+26     	; 0xb7c <__unpack_f+0x80>
     b62:	22 0f       	add	r18, r18
     b64:	33 1f       	adc	r19, r19
     b66:	44 1f       	adc	r20, r20
     b68:	55 1f       	adc	r21, r21
     b6a:	12 96       	adiw	r26, 0x02	; 2
     b6c:	8d 91       	ld	r24, X+
     b6e:	9c 91       	ld	r25, X
     b70:	13 97       	sbiw	r26, 0x03	; 3
     b72:	01 97       	sbiw	r24, 0x01	; 1
     b74:	13 96       	adiw	r26, 0x03	; 3
     b76:	9c 93       	st	X, r25
     b78:	8e 93       	st	-X, r24
     b7a:	12 97       	sbiw	r26, 0x02	; 2
     b7c:	20 30       	cpi	r18, 0x00	; 0
     b7e:	80 e0       	ldi	r24, 0x00	; 0
     b80:	38 07       	cpc	r19, r24
     b82:	80 e0       	ldi	r24, 0x00	; 0
     b84:	48 07       	cpc	r20, r24
     b86:	80 e4       	ldi	r24, 0x40	; 64
     b88:	58 07       	cpc	r21, r24
     b8a:	58 f3       	brcs	.-42     	; 0xb62 <__unpack_f+0x66>
     b8c:	14 96       	adiw	r26, 0x04	; 4
     b8e:	2d 93       	st	X+, r18
     b90:	3d 93       	st	X+, r19
     b92:	4d 93       	st	X+, r20
     b94:	5c 93       	st	X, r21
     b96:	17 97       	sbiw	r26, 0x07	; 7
     b98:	08 95       	ret
     b9a:	2f 3f       	cpi	r18, 0xFF	; 255
     b9c:	31 05       	cpc	r19, r1
     b9e:	79 f4       	brne	.+30     	; 0xbbe <__unpack_f+0xc2>
     ba0:	41 15       	cp	r20, r1
     ba2:	51 05       	cpc	r21, r1
     ba4:	61 05       	cpc	r22, r1
     ba6:	71 05       	cpc	r23, r1
     ba8:	19 f4       	brne	.+6      	; 0xbb0 <__unpack_f+0xb4>
     baa:	84 e0       	ldi	r24, 0x04	; 4
     bac:	8c 93       	st	X, r24
     bae:	08 95       	ret
     bb0:	64 ff       	sbrs	r22, 4
     bb2:	03 c0       	rjmp	.+6      	; 0xbba <__unpack_f+0xbe>
     bb4:	81 e0       	ldi	r24, 0x01	; 1
     bb6:	8c 93       	st	X, r24
     bb8:	12 c0       	rjmp	.+36     	; 0xbde <__unpack_f+0xe2>
     bba:	1c 92       	st	X, r1
     bbc:	10 c0       	rjmp	.+32     	; 0xbde <__unpack_f+0xe2>
     bbe:	2f 57       	subi	r18, 0x7F	; 127
     bc0:	30 40       	sbci	r19, 0x00	; 0
     bc2:	13 96       	adiw	r26, 0x03	; 3
     bc4:	3c 93       	st	X, r19
     bc6:	2e 93       	st	-X, r18
     bc8:	12 97       	sbiw	r26, 0x02	; 2
     bca:	83 e0       	ldi	r24, 0x03	; 3
     bcc:	8c 93       	st	X, r24
     bce:	87 e0       	ldi	r24, 0x07	; 7
     bd0:	44 0f       	add	r20, r20
     bd2:	55 1f       	adc	r21, r21
     bd4:	66 1f       	adc	r22, r22
     bd6:	77 1f       	adc	r23, r23
     bd8:	8a 95       	dec	r24
     bda:	d1 f7       	brne	.-12     	; 0xbd0 <__unpack_f+0xd4>
     bdc:	70 64       	ori	r23, 0x40	; 64
     bde:	14 96       	adiw	r26, 0x04	; 4
     be0:	4d 93       	st	X+, r20
     be2:	5d 93       	st	X+, r21
     be4:	6d 93       	st	X+, r22
     be6:	7c 93       	st	X, r23
     be8:	17 97       	sbiw	r26, 0x07	; 7
     bea:	08 95       	ret

00000bec <__fpcmp_parts_f>:
     bec:	1f 93       	push	r17
     bee:	dc 01       	movw	r26, r24
     bf0:	fb 01       	movw	r30, r22
     bf2:	9c 91       	ld	r25, X
     bf4:	92 30       	cpi	r25, 0x02	; 2
     bf6:	08 f4       	brcc	.+2      	; 0xbfa <__fpcmp_parts_f+0xe>
     bf8:	47 c0       	rjmp	.+142    	; 0xc88 <__fpcmp_parts_f+0x9c>
     bfa:	80 81       	ld	r24, Z
     bfc:	82 30       	cpi	r24, 0x02	; 2
     bfe:	08 f4       	brcc	.+2      	; 0xc02 <__fpcmp_parts_f+0x16>
     c00:	43 c0       	rjmp	.+134    	; 0xc88 <__fpcmp_parts_f+0x9c>
     c02:	94 30       	cpi	r25, 0x04	; 4
     c04:	51 f4       	brne	.+20     	; 0xc1a <__fpcmp_parts_f+0x2e>
     c06:	11 96       	adiw	r26, 0x01	; 1
     c08:	1c 91       	ld	r17, X
     c0a:	84 30       	cpi	r24, 0x04	; 4
     c0c:	99 f5       	brne	.+102    	; 0xc74 <__fpcmp_parts_f+0x88>
     c0e:	81 81       	ldd	r24, Z+1	; 0x01
     c10:	68 2f       	mov	r22, r24
     c12:	70 e0       	ldi	r23, 0x00	; 0
     c14:	61 1b       	sub	r22, r17
     c16:	71 09       	sbc	r23, r1
     c18:	3f c0       	rjmp	.+126    	; 0xc98 <__fpcmp_parts_f+0xac>
     c1a:	84 30       	cpi	r24, 0x04	; 4
     c1c:	21 f0       	breq	.+8      	; 0xc26 <__fpcmp_parts_f+0x3a>
     c1e:	92 30       	cpi	r25, 0x02	; 2
     c20:	31 f4       	brne	.+12     	; 0xc2e <__fpcmp_parts_f+0x42>
     c22:	82 30       	cpi	r24, 0x02	; 2
     c24:	b9 f1       	breq	.+110    	; 0xc94 <__fpcmp_parts_f+0xa8>
     c26:	81 81       	ldd	r24, Z+1	; 0x01
     c28:	88 23       	and	r24, r24
     c2a:	89 f1       	breq	.+98     	; 0xc8e <__fpcmp_parts_f+0xa2>
     c2c:	2d c0       	rjmp	.+90     	; 0xc88 <__fpcmp_parts_f+0x9c>
     c2e:	11 96       	adiw	r26, 0x01	; 1
     c30:	1c 91       	ld	r17, X
     c32:	11 97       	sbiw	r26, 0x01	; 1
     c34:	82 30       	cpi	r24, 0x02	; 2
     c36:	f1 f0       	breq	.+60     	; 0xc74 <__fpcmp_parts_f+0x88>
     c38:	81 81       	ldd	r24, Z+1	; 0x01
     c3a:	18 17       	cp	r17, r24
     c3c:	d9 f4       	brne	.+54     	; 0xc74 <__fpcmp_parts_f+0x88>
     c3e:	12 96       	adiw	r26, 0x02	; 2
     c40:	2d 91       	ld	r18, X+
     c42:	3c 91       	ld	r19, X
     c44:	13 97       	sbiw	r26, 0x03	; 3
     c46:	82 81       	ldd	r24, Z+2	; 0x02
     c48:	93 81       	ldd	r25, Z+3	; 0x03
     c4a:	82 17       	cp	r24, r18
     c4c:	93 07       	cpc	r25, r19
     c4e:	94 f0       	brlt	.+36     	; 0xc74 <__fpcmp_parts_f+0x88>
     c50:	28 17       	cp	r18, r24
     c52:	39 07       	cpc	r19, r25
     c54:	bc f0       	brlt	.+46     	; 0xc84 <__fpcmp_parts_f+0x98>
     c56:	14 96       	adiw	r26, 0x04	; 4
     c58:	8d 91       	ld	r24, X+
     c5a:	9d 91       	ld	r25, X+
     c5c:	0d 90       	ld	r0, X+
     c5e:	bc 91       	ld	r27, X
     c60:	a0 2d       	mov	r26, r0
     c62:	24 81       	ldd	r18, Z+4	; 0x04
     c64:	35 81       	ldd	r19, Z+5	; 0x05
     c66:	46 81       	ldd	r20, Z+6	; 0x06
     c68:	57 81       	ldd	r21, Z+7	; 0x07
     c6a:	28 17       	cp	r18, r24
     c6c:	39 07       	cpc	r19, r25
     c6e:	4a 07       	cpc	r20, r26
     c70:	5b 07       	cpc	r21, r27
     c72:	18 f4       	brcc	.+6      	; 0xc7a <__fpcmp_parts_f+0x8e>
     c74:	11 23       	and	r17, r17
     c76:	41 f0       	breq	.+16     	; 0xc88 <__fpcmp_parts_f+0x9c>
     c78:	0a c0       	rjmp	.+20     	; 0xc8e <__fpcmp_parts_f+0xa2>
     c7a:	82 17       	cp	r24, r18
     c7c:	93 07       	cpc	r25, r19
     c7e:	a4 07       	cpc	r26, r20
     c80:	b5 07       	cpc	r27, r21
     c82:	40 f4       	brcc	.+16     	; 0xc94 <__fpcmp_parts_f+0xa8>
     c84:	11 23       	and	r17, r17
     c86:	19 f0       	breq	.+6      	; 0xc8e <__fpcmp_parts_f+0xa2>
     c88:	61 e0       	ldi	r22, 0x01	; 1
     c8a:	70 e0       	ldi	r23, 0x00	; 0
     c8c:	05 c0       	rjmp	.+10     	; 0xc98 <__fpcmp_parts_f+0xac>
     c8e:	6f ef       	ldi	r22, 0xFF	; 255
     c90:	7f ef       	ldi	r23, 0xFF	; 255
     c92:	02 c0       	rjmp	.+4      	; 0xc98 <__fpcmp_parts_f+0xac>
     c94:	60 e0       	ldi	r22, 0x00	; 0
     c96:	70 e0       	ldi	r23, 0x00	; 0
     c98:	cb 01       	movw	r24, r22
     c9a:	1f 91       	pop	r17
     c9c:	08 95       	ret

00000c9e <__vector_1>:
/**************************************************************************
 * Function Name: ISR (INTERRUPT HANDLER FOR INT0)
 * Description  : Call the Function that is required to be Executed when INT0 happens
 **************************************************************************/
ISR(INT0_vect)
{
     c9e:	1f 92       	push	r1
     ca0:	0f 92       	push	r0
     ca2:	0f b6       	in	r0, 0x3f	; 63
     ca4:	0f 92       	push	r0
     ca6:	11 24       	eor	r1, r1
     ca8:	2f 93       	push	r18
     caa:	3f 93       	push	r19
     cac:	4f 93       	push	r20
     cae:	5f 93       	push	r21
     cb0:	6f 93       	push	r22
     cb2:	7f 93       	push	r23
     cb4:	8f 93       	push	r24
     cb6:	9f 93       	push	r25
     cb8:	af 93       	push	r26
     cba:	bf 93       	push	r27
     cbc:	ef 93       	push	r30
     cbe:	ff 93       	push	r31
     cc0:	df 93       	push	r29
     cc2:	cf 93       	push	r28
     cc4:	cd b7       	in	r28, 0x3d	; 61
     cc6:	de b7       	in	r29, 0x3e	; 62
	(*Ex_Interrupt_CallBack_Array[0])();
     cc8:	e0 91 68 00 	lds	r30, 0x0068
     ccc:	f0 91 69 00 	lds	r31, 0x0069
     cd0:	09 95       	icall
}
     cd2:	cf 91       	pop	r28
     cd4:	df 91       	pop	r29
     cd6:	ff 91       	pop	r31
     cd8:	ef 91       	pop	r30
     cda:	bf 91       	pop	r27
     cdc:	af 91       	pop	r26
     cde:	9f 91       	pop	r25
     ce0:	8f 91       	pop	r24
     ce2:	7f 91       	pop	r23
     ce4:	6f 91       	pop	r22
     ce6:	5f 91       	pop	r21
     ce8:	4f 91       	pop	r20
     cea:	3f 91       	pop	r19
     cec:	2f 91       	pop	r18
     cee:	0f 90       	pop	r0
     cf0:	0f be       	out	0x3f, r0	; 63
     cf2:	0f 90       	pop	r0
     cf4:	1f 90       	pop	r1
     cf6:	18 95       	reti

00000cf8 <__vector_2>:
/**************************************************************************
 * Function Name: ISR (INTERRUPT HANDLER FOR INT1)
 * Description  : Call the Function that is required to be Executed when INT1 happens
 **************************************************************************/
ISR(INT1_vect)
{
     cf8:	1f 92       	push	r1
     cfa:	0f 92       	push	r0
     cfc:	0f b6       	in	r0, 0x3f	; 63
     cfe:	0f 92       	push	r0
     d00:	11 24       	eor	r1, r1
     d02:	2f 93       	push	r18
     d04:	3f 93       	push	r19
     d06:	4f 93       	push	r20
     d08:	5f 93       	push	r21
     d0a:	6f 93       	push	r22
     d0c:	7f 93       	push	r23
     d0e:	8f 93       	push	r24
     d10:	9f 93       	push	r25
     d12:	af 93       	push	r26
     d14:	bf 93       	push	r27
     d16:	ef 93       	push	r30
     d18:	ff 93       	push	r31
     d1a:	df 93       	push	r29
     d1c:	cf 93       	push	r28
     d1e:	cd b7       	in	r28, 0x3d	; 61
     d20:	de b7       	in	r29, 0x3e	; 62
	(*Ex_Interrupt_CallBack_Array[1])();
     d22:	e0 91 6a 00 	lds	r30, 0x006A
     d26:	f0 91 6b 00 	lds	r31, 0x006B
     d2a:	09 95       	icall
}
     d2c:	cf 91       	pop	r28
     d2e:	df 91       	pop	r29
     d30:	ff 91       	pop	r31
     d32:	ef 91       	pop	r30
     d34:	bf 91       	pop	r27
     d36:	af 91       	pop	r26
     d38:	9f 91       	pop	r25
     d3a:	8f 91       	pop	r24
     d3c:	7f 91       	pop	r23
     d3e:	6f 91       	pop	r22
     d40:	5f 91       	pop	r21
     d42:	4f 91       	pop	r20
     d44:	3f 91       	pop	r19
     d46:	2f 91       	pop	r18
     d48:	0f 90       	pop	r0
     d4a:	0f be       	out	0x3f, r0	; 63
     d4c:	0f 90       	pop	r0
     d4e:	1f 90       	pop	r1
     d50:	18 95       	reti

00000d52 <__vector_3>:
/**************************************************************************
 * Function Name: ISR (INTERRUPT HANDLER FOR INT2)
 * Description  : Call the Function that is required to be Executed when INT2 happens
 **************************************************************************/
ISR(INT2_vect)
{
     d52:	1f 92       	push	r1
     d54:	0f 92       	push	r0
     d56:	0f b6       	in	r0, 0x3f	; 63
     d58:	0f 92       	push	r0
     d5a:	11 24       	eor	r1, r1
     d5c:	2f 93       	push	r18
     d5e:	3f 93       	push	r19
     d60:	4f 93       	push	r20
     d62:	5f 93       	push	r21
     d64:	6f 93       	push	r22
     d66:	7f 93       	push	r23
     d68:	8f 93       	push	r24
     d6a:	9f 93       	push	r25
     d6c:	af 93       	push	r26
     d6e:	bf 93       	push	r27
     d70:	ef 93       	push	r30
     d72:	ff 93       	push	r31
     d74:	df 93       	push	r29
     d76:	cf 93       	push	r28
     d78:	cd b7       	in	r28, 0x3d	; 61
     d7a:	de b7       	in	r29, 0x3e	; 62
	(*Ex_Interrupt_CallBack_Array[2])();
     d7c:	e0 91 6c 00 	lds	r30, 0x006C
     d80:	f0 91 6d 00 	lds	r31, 0x006D
     d84:	09 95       	icall
}
     d86:	cf 91       	pop	r28
     d88:	df 91       	pop	r29
     d8a:	ff 91       	pop	r31
     d8c:	ef 91       	pop	r30
     d8e:	bf 91       	pop	r27
     d90:	af 91       	pop	r26
     d92:	9f 91       	pop	r25
     d94:	8f 91       	pop	r24
     d96:	7f 91       	pop	r23
     d98:	6f 91       	pop	r22
     d9a:	5f 91       	pop	r21
     d9c:	4f 91       	pop	r20
     d9e:	3f 91       	pop	r19
     da0:	2f 91       	pop	r18
     da2:	0f 90       	pop	r0
     da4:	0f be       	out	0x3f, r0	; 63
     da6:	0f 90       	pop	r0
     da8:	1f 90       	pop	r1
     daa:	18 95       	reti

00000dac <INT0_init>:
 * Description  : Initialization Function for Interrupt 0
 * INPUT        : EDGE_TYPE
 * RETURNS      : void
 **************************************************************************/
void INT0_init(EDGE_TYPE EDGE)
{
     dac:	df 93       	push	r29
     dae:	cf 93       	push	r28
     db0:	0f 92       	push	r0
     db2:	cd b7       	in	r28, 0x3d	; 61
     db4:	de b7       	in	r29, 0x3e	; 62
     db6:	89 83       	std	Y+1, r24	; 0x01
	GPIO_setupPinDirection(PORTD_ID, PIN2_ID, PIN_INPUT); /* set PD2 input pin */
     db8:	83 e0       	ldi	r24, 0x03	; 3
     dba:	62 e0       	ldi	r22, 0x02	; 2
     dbc:	40 e0       	ldi	r20, 0x00	; 0
     dbe:	0e 94 95 07 	call	0xf2a	; 0xf2a <GPIO_setupPinDirection>
	if(EDGE == FALLING_INTERRUPT)
     dc2:	89 81       	ldd	r24, Y+1	; 0x01
     dc4:	88 23       	and	r24, r24
     dc6:	41 f4       	brne	.+16     	; 0xdd8 <INT0_init+0x2c>
	{
		SET_BIT(MCUCR,ISC01);  /* Make INT0 happen with Falling Edge */
     dc8:	a5 e5       	ldi	r26, 0x55	; 85
     dca:	b0 e0       	ldi	r27, 0x00	; 0
     dcc:	e5 e5       	ldi	r30, 0x55	; 85
     dce:	f0 e0       	ldi	r31, 0x00	; 0
     dd0:	80 81       	ld	r24, Z
     dd2:	82 60       	ori	r24, 0x02	; 2
     dd4:	8c 93       	st	X, r24
     dd6:	11 c0       	rjmp	.+34     	; 0xdfa <INT0_init+0x4e>

	}
	else if(EDGE == RAISING_INTERRUPT)
     dd8:	89 81       	ldd	r24, Y+1	; 0x01
     dda:	81 30       	cpi	r24, 0x01	; 1
     ddc:	71 f4       	brne	.+28     	; 0xdfa <INT0_init+0x4e>
	{
		SET_BIT(MCUCR,ISC00);
     dde:	a5 e5       	ldi	r26, 0x55	; 85
     de0:	b0 e0       	ldi	r27, 0x00	; 0
     de2:	e5 e5       	ldi	r30, 0x55	; 85
     de4:	f0 e0       	ldi	r31, 0x00	; 0
     de6:	80 81       	ld	r24, Z
     de8:	81 60       	ori	r24, 0x01	; 1
     dea:	8c 93       	st	X, r24
		SET_BIT(MCUCR,ISC01);  /* Make INT0 happen with Raising Edge */
     dec:	a5 e5       	ldi	r26, 0x55	; 85
     dee:	b0 e0       	ldi	r27, 0x00	; 0
     df0:	e5 e5       	ldi	r30, 0x55	; 85
     df2:	f0 e0       	ldi	r31, 0x00	; 0
     df4:	80 81       	ld	r24, Z
     df6:	82 60       	ori	r24, 0x02	; 2
     df8:	8c 93       	st	X, r24
	}
	SET_BIT(GICR,INT0);    /* Enable INT0 */
     dfa:	ab e5       	ldi	r26, 0x5B	; 91
     dfc:	b0 e0       	ldi	r27, 0x00	; 0
     dfe:	eb e5       	ldi	r30, 0x5B	; 91
     e00:	f0 e0       	ldi	r31, 0x00	; 0
     e02:	80 81       	ld	r24, Z
     e04:	80 64       	ori	r24, 0x40	; 64
     e06:	8c 93       	st	X, r24
	SET_BIT(SREG,7); /* Enable Global Interrupt Enable */
     e08:	af e5       	ldi	r26, 0x5F	; 95
     e0a:	b0 e0       	ldi	r27, 0x00	; 0
     e0c:	ef e5       	ldi	r30, 0x5F	; 95
     e0e:	f0 e0       	ldi	r31, 0x00	; 0
     e10:	80 81       	ld	r24, Z
     e12:	80 68       	ori	r24, 0x80	; 128
     e14:	8c 93       	st	X, r24
}
     e16:	0f 90       	pop	r0
     e18:	cf 91       	pop	r28
     e1a:	df 91       	pop	r29
     e1c:	08 95       	ret

00000e1e <INT1_init>:
 * Description  : Initialization Function for Interrupt 1
 * INPUT        : EDGE_TYPE
 * RETURNS      : void
 **************************************************************************/
void INT1_init(EDGE_TYPE EDGE)
{
     e1e:	df 93       	push	r29
     e20:	cf 93       	push	r28
     e22:	0f 92       	push	r0
     e24:	cd b7       	in	r28, 0x3d	; 61
     e26:	de b7       	in	r29, 0x3e	; 62
     e28:	89 83       	std	Y+1, r24	; 0x01
	GPIO_setupPinDirection(PORTD_ID, PIN3_ID, PIN_INPUT); /* set PD2 input pin */
     e2a:	83 e0       	ldi	r24, 0x03	; 3
     e2c:	63 e0       	ldi	r22, 0x03	; 3
     e2e:	40 e0       	ldi	r20, 0x00	; 0
     e30:	0e 94 95 07 	call	0xf2a	; 0xf2a <GPIO_setupPinDirection>
	if(EDGE == FALLING_INTERRUPT)
     e34:	89 81       	ldd	r24, Y+1	; 0x01
     e36:	88 23       	and	r24, r24
     e38:	41 f4       	brne	.+16     	; 0xe4a <INT1_init+0x2c>
	{
		SET_BIT(MCUCR,ISC11);  /* Make INT1 happen with Falling Edge */
     e3a:	a5 e5       	ldi	r26, 0x55	; 85
     e3c:	b0 e0       	ldi	r27, 0x00	; 0
     e3e:	e5 e5       	ldi	r30, 0x55	; 85
     e40:	f0 e0       	ldi	r31, 0x00	; 0
     e42:	80 81       	ld	r24, Z
     e44:	88 60       	ori	r24, 0x08	; 8
     e46:	8c 93       	st	X, r24
     e48:	11 c0       	rjmp	.+34     	; 0xe6c <INT1_init+0x4e>

	}
	else if(EDGE == RAISING_INTERRUPT)
     e4a:	89 81       	ldd	r24, Y+1	; 0x01
     e4c:	81 30       	cpi	r24, 0x01	; 1
     e4e:	71 f4       	brne	.+28     	; 0xe6c <INT1_init+0x4e>
	{
		SET_BIT(MCUCR,ISC10);
     e50:	a5 e5       	ldi	r26, 0x55	; 85
     e52:	b0 e0       	ldi	r27, 0x00	; 0
     e54:	e5 e5       	ldi	r30, 0x55	; 85
     e56:	f0 e0       	ldi	r31, 0x00	; 0
     e58:	80 81       	ld	r24, Z
     e5a:	84 60       	ori	r24, 0x04	; 4
     e5c:	8c 93       	st	X, r24
		SET_BIT(MCUCR,ISC11);  /* Make INT0 happen with Raising Edge */
     e5e:	a5 e5       	ldi	r26, 0x55	; 85
     e60:	b0 e0       	ldi	r27, 0x00	; 0
     e62:	e5 e5       	ldi	r30, 0x55	; 85
     e64:	f0 e0       	ldi	r31, 0x00	; 0
     e66:	80 81       	ld	r24, Z
     e68:	88 60       	ori	r24, 0x08	; 8
     e6a:	8c 93       	st	X, r24
	}
	SET_BIT(GICR,INT1);        /* Enable INT1 */
     e6c:	ab e5       	ldi	r26, 0x5B	; 91
     e6e:	b0 e0       	ldi	r27, 0x00	; 0
     e70:	eb e5       	ldi	r30, 0x5B	; 91
     e72:	f0 e0       	ldi	r31, 0x00	; 0
     e74:	80 81       	ld	r24, Z
     e76:	80 68       	ori	r24, 0x80	; 128
     e78:	8c 93       	st	X, r24
	SET_BIT(SREG,7);           /* Enable Global Interrupt Enable */
     e7a:	af e5       	ldi	r26, 0x5F	; 95
     e7c:	b0 e0       	ldi	r27, 0x00	; 0
     e7e:	ef e5       	ldi	r30, 0x5F	; 95
     e80:	f0 e0       	ldi	r31, 0x00	; 0
     e82:	80 81       	ld	r24, Z
     e84:	80 68       	ori	r24, 0x80	; 128
     e86:	8c 93       	st	X, r24
}
     e88:	0f 90       	pop	r0
     e8a:	cf 91       	pop	r28
     e8c:	df 91       	pop	r29
     e8e:	08 95       	ret

00000e90 <INT2_init>:
 * Description  : Initialization Function for Interrupt 2
 * INPUT        : EDGE_TYPE
 * RETURNS      : void
 **************************************************************************/
void INT2_init(EDGE_TYPE EDGE)
{
     e90:	df 93       	push	r29
     e92:	cf 93       	push	r28
     e94:	0f 92       	push	r0
     e96:	cd b7       	in	r28, 0x3d	; 61
     e98:	de b7       	in	r29, 0x3e	; 62
     e9a:	89 83       	std	Y+1, r24	; 0x01
	GPIO_setupPinDirection(PORTB_ID, PIN2_ID, PIN_INPUT); /* set PD2 input pin */
     e9c:	81 e0       	ldi	r24, 0x01	; 1
     e9e:	62 e0       	ldi	r22, 0x02	; 2
     ea0:	40 e0       	ldi	r20, 0x00	; 0
     ea2:	0e 94 95 07 	call	0xf2a	; 0xf2a <GPIO_setupPinDirection>
	if(EDGE == FALLING_INTERRUPT)
     ea6:	89 81       	ldd	r24, Y+1	; 0x01
     ea8:	88 23       	and	r24, r24
     eaa:	41 f4       	brne	.+16     	; 0xebc <INT2_init+0x2c>
	{
		CLEAR_BIT(MCUCSR,ISC2);
     eac:	a4 e5       	ldi	r26, 0x54	; 84
     eae:	b0 e0       	ldi	r27, 0x00	; 0
     eb0:	e4 e5       	ldi	r30, 0x54	; 84
     eb2:	f0 e0       	ldi	r31, 0x00	; 0
     eb4:	80 81       	ld	r24, Z
     eb6:	8f 7b       	andi	r24, 0xBF	; 191
     eb8:	8c 93       	st	X, r24
     eba:	0a c0       	rjmp	.+20     	; 0xed0 <INT2_init+0x40>
	}
	else if(EDGE == RAISING_INTERRUPT)
     ebc:	89 81       	ldd	r24, Y+1	; 0x01
     ebe:	81 30       	cpi	r24, 0x01	; 1
     ec0:	39 f4       	brne	.+14     	; 0xed0 <INT2_init+0x40>
	{
		SET_BIT(MCUCSR,ISC2);    /* Make INT2 happen with Raising Edge */
     ec2:	a4 e5       	ldi	r26, 0x54	; 84
     ec4:	b0 e0       	ldi	r27, 0x00	; 0
     ec6:	e4 e5       	ldi	r30, 0x54	; 84
     ec8:	f0 e0       	ldi	r31, 0x00	; 0
     eca:	80 81       	ld	r24, Z
     ecc:	80 64       	ori	r24, 0x40	; 64
     ece:	8c 93       	st	X, r24
	}
	SET_BIT(GICR,INT2);          /* Make INT1 happen with Raising Edge */
     ed0:	ab e5       	ldi	r26, 0x5B	; 91
     ed2:	b0 e0       	ldi	r27, 0x00	; 0
     ed4:	eb e5       	ldi	r30, 0x5B	; 91
     ed6:	f0 e0       	ldi	r31, 0x00	; 0
     ed8:	80 81       	ld	r24, Z
     eda:	80 62       	ori	r24, 0x20	; 32
     edc:	8c 93       	st	X, r24

	SREG   |= (1<<7);            /* Enable interrupts by setting I-bit */
     ede:	af e5       	ldi	r26, 0x5F	; 95
     ee0:	b0 e0       	ldi	r27, 0x00	; 0
     ee2:	ef e5       	ldi	r30, 0x5F	; 95
     ee4:	f0 e0       	ldi	r31, 0x00	; 0
     ee6:	80 81       	ld	r24, Z
     ee8:	80 68       	ori	r24, 0x80	; 128
     eea:	8c 93       	st	X, r24
}
     eec:	0f 90       	pop	r0
     eee:	cf 91       	pop	r28
     ef0:	df 91       	pop	r29
     ef2:	08 95       	ret

00000ef4 <External_Interrupt_set_CallBack>:
 * Description  : A Function to set the callBack function for each external interrupt
 * INPUTS       : ptr_2_fun,index(which indicates which ISR would be Executed)
 * RETURNS      : void
 **********************************************************************************/
void External_Interrupt_set_CallBack(void(*ptr_2_fun)(void),uint8 index)
{
     ef4:	df 93       	push	r29
     ef6:	cf 93       	push	r28
     ef8:	00 d0       	rcall	.+0      	; 0xefa <External_Interrupt_set_CallBack+0x6>
     efa:	0f 92       	push	r0
     efc:	cd b7       	in	r28, 0x3d	; 61
     efe:	de b7       	in	r29, 0x3e	; 62
     f00:	9a 83       	std	Y+2, r25	; 0x02
     f02:	89 83       	std	Y+1, r24	; 0x01
     f04:	6b 83       	std	Y+3, r22	; 0x03
	Ex_Interrupt_CallBack_Array[index] = ptr_2_fun;
     f06:	8b 81       	ldd	r24, Y+3	; 0x03
     f08:	88 2f       	mov	r24, r24
     f0a:	90 e0       	ldi	r25, 0x00	; 0
     f0c:	29 81       	ldd	r18, Y+1	; 0x01
     f0e:	3a 81       	ldd	r19, Y+2	; 0x02
     f10:	88 0f       	add	r24, r24
     f12:	99 1f       	adc	r25, r25
     f14:	fc 01       	movw	r30, r24
     f16:	e8 59       	subi	r30, 0x98	; 152
     f18:	ff 4f       	sbci	r31, 0xFF	; 255
     f1a:	31 83       	std	Z+1, r19	; 0x01
     f1c:	20 83       	st	Z, r18
}
     f1e:	0f 90       	pop	r0
     f20:	0f 90       	pop	r0
     f22:	0f 90       	pop	r0
     f24:	cf 91       	pop	r28
     f26:	df 91       	pop	r29
     f28:	08 95       	ret

00000f2a <GPIO_setupPinDirection>:
 *                input pin number  is not correct, the function Do Nothing
 * INPUTS       : port_num,pin_num and required direction
 * RETURNS      : void
 **************************************************************************/
void GPIO_setupPinDirection(uint8 port_num,uint8 pin_num,GPIO_PinDirectionType direction)
{
     f2a:	df 93       	push	r29
     f2c:	cf 93       	push	r28
     f2e:	00 d0       	rcall	.+0      	; 0xf30 <GPIO_setupPinDirection+0x6>
     f30:	00 d0       	rcall	.+0      	; 0xf32 <GPIO_setupPinDirection+0x8>
     f32:	0f 92       	push	r0
     f34:	cd b7       	in	r28, 0x3d	; 61
     f36:	de b7       	in	r29, 0x3e	; 62
     f38:	89 83       	std	Y+1, r24	; 0x01
     f3a:	6a 83       	std	Y+2, r22	; 0x02
     f3c:	4b 83       	std	Y+3, r20	; 0x03
	if((port_num >= Max_NUM_Of_PORTS) || (pin_num >=  MAX_NUM_Of_PINS))
     f3e:	89 81       	ldd	r24, Y+1	; 0x01
     f40:	84 30       	cpi	r24, 0x04	; 4
     f42:	08 f0       	brcs	.+2      	; 0xf46 <GPIO_setupPinDirection+0x1c>
     f44:	d5 c0       	rjmp	.+426    	; 0x10f0 <GPIO_setupPinDirection+0x1c6>
     f46:	8a 81       	ldd	r24, Y+2	; 0x02
     f48:	88 30       	cpi	r24, 0x08	; 8
     f4a:	08 f0       	brcs	.+2      	; 0xf4e <GPIO_setupPinDirection+0x24>
     f4c:	d1 c0       	rjmp	.+418    	; 0x10f0 <GPIO_setupPinDirection+0x1c6>
	{
		/* Do Nothing */
	}
	else
	{
		switch(port_num)
     f4e:	89 81       	ldd	r24, Y+1	; 0x01
     f50:	28 2f       	mov	r18, r24
     f52:	30 e0       	ldi	r19, 0x00	; 0
     f54:	3d 83       	std	Y+5, r19	; 0x05
     f56:	2c 83       	std	Y+4, r18	; 0x04
     f58:	8c 81       	ldd	r24, Y+4	; 0x04
     f5a:	9d 81       	ldd	r25, Y+5	; 0x05
     f5c:	81 30       	cpi	r24, 0x01	; 1
     f5e:	91 05       	cpc	r25, r1
     f60:	09 f4       	brne	.+2      	; 0xf64 <GPIO_setupPinDirection+0x3a>
     f62:	43 c0       	rjmp	.+134    	; 0xfea <GPIO_setupPinDirection+0xc0>
     f64:	2c 81       	ldd	r18, Y+4	; 0x04
     f66:	3d 81       	ldd	r19, Y+5	; 0x05
     f68:	22 30       	cpi	r18, 0x02	; 2
     f6a:	31 05       	cpc	r19, r1
     f6c:	2c f4       	brge	.+10     	; 0xf78 <GPIO_setupPinDirection+0x4e>
     f6e:	8c 81       	ldd	r24, Y+4	; 0x04
     f70:	9d 81       	ldd	r25, Y+5	; 0x05
     f72:	00 97       	sbiw	r24, 0x00	; 0
     f74:	71 f0       	breq	.+28     	; 0xf92 <GPIO_setupPinDirection+0x68>
     f76:	bc c0       	rjmp	.+376    	; 0x10f0 <GPIO_setupPinDirection+0x1c6>
     f78:	2c 81       	ldd	r18, Y+4	; 0x04
     f7a:	3d 81       	ldd	r19, Y+5	; 0x05
     f7c:	22 30       	cpi	r18, 0x02	; 2
     f7e:	31 05       	cpc	r19, r1
     f80:	09 f4       	brne	.+2      	; 0xf84 <GPIO_setupPinDirection+0x5a>
     f82:	5f c0       	rjmp	.+190    	; 0x1042 <GPIO_setupPinDirection+0x118>
     f84:	8c 81       	ldd	r24, Y+4	; 0x04
     f86:	9d 81       	ldd	r25, Y+5	; 0x05
     f88:	83 30       	cpi	r24, 0x03	; 3
     f8a:	91 05       	cpc	r25, r1
     f8c:	09 f4       	brne	.+2      	; 0xf90 <GPIO_setupPinDirection+0x66>
     f8e:	85 c0       	rjmp	.+266    	; 0x109a <GPIO_setupPinDirection+0x170>
     f90:	af c0       	rjmp	.+350    	; 0x10f0 <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
     f92:	8b 81       	ldd	r24, Y+3	; 0x03
     f94:	81 30       	cpi	r24, 0x01	; 1
     f96:	a1 f4       	brne	.+40     	; 0xfc0 <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
     f98:	aa e3       	ldi	r26, 0x3A	; 58
     f9a:	b0 e0       	ldi	r27, 0x00	; 0
     f9c:	ea e3       	ldi	r30, 0x3A	; 58
     f9e:	f0 e0       	ldi	r31, 0x00	; 0
     fa0:	80 81       	ld	r24, Z
     fa2:	48 2f       	mov	r20, r24
     fa4:	8a 81       	ldd	r24, Y+2	; 0x02
     fa6:	28 2f       	mov	r18, r24
     fa8:	30 e0       	ldi	r19, 0x00	; 0
     faa:	81 e0       	ldi	r24, 0x01	; 1
     fac:	90 e0       	ldi	r25, 0x00	; 0
     fae:	02 2e       	mov	r0, r18
     fb0:	02 c0       	rjmp	.+4      	; 0xfb6 <GPIO_setupPinDirection+0x8c>
     fb2:	88 0f       	add	r24, r24
     fb4:	99 1f       	adc	r25, r25
     fb6:	0a 94       	dec	r0
     fb8:	e2 f7       	brpl	.-8      	; 0xfb2 <GPIO_setupPinDirection+0x88>
     fba:	84 2b       	or	r24, r20
     fbc:	8c 93       	st	X, r24
     fbe:	98 c0       	rjmp	.+304    	; 0x10f0 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
     fc0:	aa e3       	ldi	r26, 0x3A	; 58
     fc2:	b0 e0       	ldi	r27, 0x00	; 0
     fc4:	ea e3       	ldi	r30, 0x3A	; 58
     fc6:	f0 e0       	ldi	r31, 0x00	; 0
     fc8:	80 81       	ld	r24, Z
     fca:	48 2f       	mov	r20, r24
     fcc:	8a 81       	ldd	r24, Y+2	; 0x02
     fce:	28 2f       	mov	r18, r24
     fd0:	30 e0       	ldi	r19, 0x00	; 0
     fd2:	81 e0       	ldi	r24, 0x01	; 1
     fd4:	90 e0       	ldi	r25, 0x00	; 0
     fd6:	02 2e       	mov	r0, r18
     fd8:	02 c0       	rjmp	.+4      	; 0xfde <GPIO_setupPinDirection+0xb4>
     fda:	88 0f       	add	r24, r24
     fdc:	99 1f       	adc	r25, r25
     fde:	0a 94       	dec	r0
     fe0:	e2 f7       	brpl	.-8      	; 0xfda <GPIO_setupPinDirection+0xb0>
     fe2:	80 95       	com	r24
     fe4:	84 23       	and	r24, r20
     fe6:	8c 93       	st	X, r24
     fe8:	83 c0       	rjmp	.+262    	; 0x10f0 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
     fea:	8b 81       	ldd	r24, Y+3	; 0x03
     fec:	81 30       	cpi	r24, 0x01	; 1
     fee:	a1 f4       	brne	.+40     	; 0x1018 <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
     ff0:	a7 e3       	ldi	r26, 0x37	; 55
     ff2:	b0 e0       	ldi	r27, 0x00	; 0
     ff4:	e7 e3       	ldi	r30, 0x37	; 55
     ff6:	f0 e0       	ldi	r31, 0x00	; 0
     ff8:	80 81       	ld	r24, Z
     ffa:	48 2f       	mov	r20, r24
     ffc:	8a 81       	ldd	r24, Y+2	; 0x02
     ffe:	28 2f       	mov	r18, r24
    1000:	30 e0       	ldi	r19, 0x00	; 0
    1002:	81 e0       	ldi	r24, 0x01	; 1
    1004:	90 e0       	ldi	r25, 0x00	; 0
    1006:	02 2e       	mov	r0, r18
    1008:	02 c0       	rjmp	.+4      	; 0x100e <GPIO_setupPinDirection+0xe4>
    100a:	88 0f       	add	r24, r24
    100c:	99 1f       	adc	r25, r25
    100e:	0a 94       	dec	r0
    1010:	e2 f7       	brpl	.-8      	; 0x100a <GPIO_setupPinDirection+0xe0>
    1012:	84 2b       	or	r24, r20
    1014:	8c 93       	st	X, r24
    1016:	6c c0       	rjmp	.+216    	; 0x10f0 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
    1018:	a7 e3       	ldi	r26, 0x37	; 55
    101a:	b0 e0       	ldi	r27, 0x00	; 0
    101c:	e7 e3       	ldi	r30, 0x37	; 55
    101e:	f0 e0       	ldi	r31, 0x00	; 0
    1020:	80 81       	ld	r24, Z
    1022:	48 2f       	mov	r20, r24
    1024:	8a 81       	ldd	r24, Y+2	; 0x02
    1026:	28 2f       	mov	r18, r24
    1028:	30 e0       	ldi	r19, 0x00	; 0
    102a:	81 e0       	ldi	r24, 0x01	; 1
    102c:	90 e0       	ldi	r25, 0x00	; 0
    102e:	02 2e       	mov	r0, r18
    1030:	02 c0       	rjmp	.+4      	; 0x1036 <GPIO_setupPinDirection+0x10c>
    1032:	88 0f       	add	r24, r24
    1034:	99 1f       	adc	r25, r25
    1036:	0a 94       	dec	r0
    1038:	e2 f7       	brpl	.-8      	; 0x1032 <GPIO_setupPinDirection+0x108>
    103a:	80 95       	com	r24
    103c:	84 23       	and	r24, r20
    103e:	8c 93       	st	X, r24
    1040:	57 c0       	rjmp	.+174    	; 0x10f0 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
    1042:	8b 81       	ldd	r24, Y+3	; 0x03
    1044:	81 30       	cpi	r24, 0x01	; 1
    1046:	a1 f4       	brne	.+40     	; 0x1070 <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
    1048:	a4 e3       	ldi	r26, 0x34	; 52
    104a:	b0 e0       	ldi	r27, 0x00	; 0
    104c:	e4 e3       	ldi	r30, 0x34	; 52
    104e:	f0 e0       	ldi	r31, 0x00	; 0
    1050:	80 81       	ld	r24, Z
    1052:	48 2f       	mov	r20, r24
    1054:	8a 81       	ldd	r24, Y+2	; 0x02
    1056:	28 2f       	mov	r18, r24
    1058:	30 e0       	ldi	r19, 0x00	; 0
    105a:	81 e0       	ldi	r24, 0x01	; 1
    105c:	90 e0       	ldi	r25, 0x00	; 0
    105e:	02 2e       	mov	r0, r18
    1060:	02 c0       	rjmp	.+4      	; 0x1066 <GPIO_setupPinDirection+0x13c>
    1062:	88 0f       	add	r24, r24
    1064:	99 1f       	adc	r25, r25
    1066:	0a 94       	dec	r0
    1068:	e2 f7       	brpl	.-8      	; 0x1062 <GPIO_setupPinDirection+0x138>
    106a:	84 2b       	or	r24, r20
    106c:	8c 93       	st	X, r24
    106e:	40 c0       	rjmp	.+128    	; 0x10f0 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
    1070:	a4 e3       	ldi	r26, 0x34	; 52
    1072:	b0 e0       	ldi	r27, 0x00	; 0
    1074:	e4 e3       	ldi	r30, 0x34	; 52
    1076:	f0 e0       	ldi	r31, 0x00	; 0
    1078:	80 81       	ld	r24, Z
    107a:	48 2f       	mov	r20, r24
    107c:	8a 81       	ldd	r24, Y+2	; 0x02
    107e:	28 2f       	mov	r18, r24
    1080:	30 e0       	ldi	r19, 0x00	; 0
    1082:	81 e0       	ldi	r24, 0x01	; 1
    1084:	90 e0       	ldi	r25, 0x00	; 0
    1086:	02 2e       	mov	r0, r18
    1088:	02 c0       	rjmp	.+4      	; 0x108e <GPIO_setupPinDirection+0x164>
    108a:	88 0f       	add	r24, r24
    108c:	99 1f       	adc	r25, r25
    108e:	0a 94       	dec	r0
    1090:	e2 f7       	brpl	.-8      	; 0x108a <GPIO_setupPinDirection+0x160>
    1092:	80 95       	com	r24
    1094:	84 23       	and	r24, r20
    1096:	8c 93       	st	X, r24
    1098:	2b c0       	rjmp	.+86     	; 0x10f0 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
    109a:	8b 81       	ldd	r24, Y+3	; 0x03
    109c:	81 30       	cpi	r24, 0x01	; 1
    109e:	a1 f4       	brne	.+40     	; 0x10c8 <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
    10a0:	a1 e3       	ldi	r26, 0x31	; 49
    10a2:	b0 e0       	ldi	r27, 0x00	; 0
    10a4:	e1 e3       	ldi	r30, 0x31	; 49
    10a6:	f0 e0       	ldi	r31, 0x00	; 0
    10a8:	80 81       	ld	r24, Z
    10aa:	48 2f       	mov	r20, r24
    10ac:	8a 81       	ldd	r24, Y+2	; 0x02
    10ae:	28 2f       	mov	r18, r24
    10b0:	30 e0       	ldi	r19, 0x00	; 0
    10b2:	81 e0       	ldi	r24, 0x01	; 1
    10b4:	90 e0       	ldi	r25, 0x00	; 0
    10b6:	02 2e       	mov	r0, r18
    10b8:	02 c0       	rjmp	.+4      	; 0x10be <GPIO_setupPinDirection+0x194>
    10ba:	88 0f       	add	r24, r24
    10bc:	99 1f       	adc	r25, r25
    10be:	0a 94       	dec	r0
    10c0:	e2 f7       	brpl	.-8      	; 0x10ba <GPIO_setupPinDirection+0x190>
    10c2:	84 2b       	or	r24, r20
    10c4:	8c 93       	st	X, r24
    10c6:	14 c0       	rjmp	.+40     	; 0x10f0 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
    10c8:	a1 e3       	ldi	r26, 0x31	; 49
    10ca:	b0 e0       	ldi	r27, 0x00	; 0
    10cc:	e1 e3       	ldi	r30, 0x31	; 49
    10ce:	f0 e0       	ldi	r31, 0x00	; 0
    10d0:	80 81       	ld	r24, Z
    10d2:	48 2f       	mov	r20, r24
    10d4:	8a 81       	ldd	r24, Y+2	; 0x02
    10d6:	28 2f       	mov	r18, r24
    10d8:	30 e0       	ldi	r19, 0x00	; 0
    10da:	81 e0       	ldi	r24, 0x01	; 1
    10dc:	90 e0       	ldi	r25, 0x00	; 0
    10de:	02 2e       	mov	r0, r18
    10e0:	02 c0       	rjmp	.+4      	; 0x10e6 <GPIO_setupPinDirection+0x1bc>
    10e2:	88 0f       	add	r24, r24
    10e4:	99 1f       	adc	r25, r25
    10e6:	0a 94       	dec	r0
    10e8:	e2 f7       	brpl	.-8      	; 0x10e2 <GPIO_setupPinDirection+0x1b8>
    10ea:	80 95       	com	r24
    10ec:	84 23       	and	r24, r20
    10ee:	8c 93       	st	X, r24
			}
			break;
		}

	}
}
    10f0:	0f 90       	pop	r0
    10f2:	0f 90       	pop	r0
    10f4:	0f 90       	pop	r0
    10f6:	0f 90       	pop	r0
    10f8:	0f 90       	pop	r0
    10fa:	cf 91       	pop	r28
    10fc:	df 91       	pop	r29
    10fe:	08 95       	ret

00001100 <GPIO_setupPortDirection>:
 *                is not correct, the function Do Nothing
 * INPUTS       : port_num, and required direction
 * RETURNS      : void
 **************************************************************************/
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    1100:	df 93       	push	r29
    1102:	cf 93       	push	r28
    1104:	00 d0       	rcall	.+0      	; 0x1106 <GPIO_setupPortDirection+0x6>
    1106:	00 d0       	rcall	.+0      	; 0x1108 <GPIO_setupPortDirection+0x8>
    1108:	cd b7       	in	r28, 0x3d	; 61
    110a:	de b7       	in	r29, 0x3e	; 62
    110c:	89 83       	std	Y+1, r24	; 0x01
    110e:	6a 83       	std	Y+2, r22	; 0x02
	if((port_num >= Max_NUM_Of_PORTS))
    1110:	89 81       	ldd	r24, Y+1	; 0x01
    1112:	84 30       	cpi	r24, 0x04	; 4
    1114:	90 f5       	brcc	.+100    	; 0x117a <GPIO_setupPortDirection+0x7a>
		{
			/* Do Nothing */
		}
	else
	{
		switch(port_num)
    1116:	89 81       	ldd	r24, Y+1	; 0x01
    1118:	28 2f       	mov	r18, r24
    111a:	30 e0       	ldi	r19, 0x00	; 0
    111c:	3c 83       	std	Y+4, r19	; 0x04
    111e:	2b 83       	std	Y+3, r18	; 0x03
    1120:	8b 81       	ldd	r24, Y+3	; 0x03
    1122:	9c 81       	ldd	r25, Y+4	; 0x04
    1124:	81 30       	cpi	r24, 0x01	; 1
    1126:	91 05       	cpc	r25, r1
    1128:	d1 f0       	breq	.+52     	; 0x115e <GPIO_setupPortDirection+0x5e>
    112a:	2b 81       	ldd	r18, Y+3	; 0x03
    112c:	3c 81       	ldd	r19, Y+4	; 0x04
    112e:	22 30       	cpi	r18, 0x02	; 2
    1130:	31 05       	cpc	r19, r1
    1132:	2c f4       	brge	.+10     	; 0x113e <GPIO_setupPortDirection+0x3e>
    1134:	8b 81       	ldd	r24, Y+3	; 0x03
    1136:	9c 81       	ldd	r25, Y+4	; 0x04
    1138:	00 97       	sbiw	r24, 0x00	; 0
    113a:	61 f0       	breq	.+24     	; 0x1154 <GPIO_setupPortDirection+0x54>
    113c:	1e c0       	rjmp	.+60     	; 0x117a <GPIO_setupPortDirection+0x7a>
    113e:	2b 81       	ldd	r18, Y+3	; 0x03
    1140:	3c 81       	ldd	r19, Y+4	; 0x04
    1142:	22 30       	cpi	r18, 0x02	; 2
    1144:	31 05       	cpc	r19, r1
    1146:	81 f0       	breq	.+32     	; 0x1168 <GPIO_setupPortDirection+0x68>
    1148:	8b 81       	ldd	r24, Y+3	; 0x03
    114a:	9c 81       	ldd	r25, Y+4	; 0x04
    114c:	83 30       	cpi	r24, 0x03	; 3
    114e:	91 05       	cpc	r25, r1
    1150:	81 f0       	breq	.+32     	; 0x1172 <GPIO_setupPortDirection+0x72>
    1152:	13 c0       	rjmp	.+38     	; 0x117a <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    1154:	ea e3       	ldi	r30, 0x3A	; 58
    1156:	f0 e0       	ldi	r31, 0x00	; 0
    1158:	8a 81       	ldd	r24, Y+2	; 0x02
    115a:	80 83       	st	Z, r24
    115c:	0e c0       	rjmp	.+28     	; 0x117a <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    115e:	e7 e3       	ldi	r30, 0x37	; 55
    1160:	f0 e0       	ldi	r31, 0x00	; 0
    1162:	8a 81       	ldd	r24, Y+2	; 0x02
    1164:	80 83       	st	Z, r24
    1166:	09 c0       	rjmp	.+18     	; 0x117a <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRA = direction;
    1168:	ea e3       	ldi	r30, 0x3A	; 58
    116a:	f0 e0       	ldi	r31, 0x00	; 0
    116c:	8a 81       	ldd	r24, Y+2	; 0x02
    116e:	80 83       	st	Z, r24
    1170:	04 c0       	rjmp	.+8      	; 0x117a <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    1172:	e1 e3       	ldi	r30, 0x31	; 49
    1174:	f0 e0       	ldi	r31, 0x00	; 0
    1176:	8a 81       	ldd	r24, Y+2	; 0x02
    1178:	80 83       	st	Z, r24
			break;
		}
	}
}
    117a:	0f 90       	pop	r0
    117c:	0f 90       	pop	r0
    117e:	0f 90       	pop	r0
    1180:	0f 90       	pop	r0
    1182:	cf 91       	pop	r28
    1184:	df 91       	pop	r29
    1186:	08 95       	ret

00001188 <GPIO_writePin>:
 *                the function will Do Nothing
 * INPUTS       : port_num, pin_num and value to be written
 * RETURNS      : void
 **************************************************************************/
void GPIO_writePin(uint8 port_num,uint8 pin_num,uint8 value)
{
    1188:	df 93       	push	r29
    118a:	cf 93       	push	r28
    118c:	00 d0       	rcall	.+0      	; 0x118e <GPIO_writePin+0x6>
    118e:	00 d0       	rcall	.+0      	; 0x1190 <GPIO_writePin+0x8>
    1190:	0f 92       	push	r0
    1192:	cd b7       	in	r28, 0x3d	; 61
    1194:	de b7       	in	r29, 0x3e	; 62
    1196:	89 83       	std	Y+1, r24	; 0x01
    1198:	6a 83       	std	Y+2, r22	; 0x02
    119a:	4b 83       	std	Y+3, r20	; 0x03
	if((port_num >= Max_NUM_Of_PORTS) || (pin_num >=  MAX_NUM_Of_PINS))
    119c:	89 81       	ldd	r24, Y+1	; 0x01
    119e:	84 30       	cpi	r24, 0x04	; 4
    11a0:	08 f0       	brcs	.+2      	; 0x11a4 <GPIO_writePin+0x1c>
    11a2:	d5 c0       	rjmp	.+426    	; 0x134e <GPIO_writePin+0x1c6>
    11a4:	8a 81       	ldd	r24, Y+2	; 0x02
    11a6:	88 30       	cpi	r24, 0x08	; 8
    11a8:	08 f0       	brcs	.+2      	; 0x11ac <GPIO_writePin+0x24>
    11aa:	d1 c0       	rjmp	.+418    	; 0x134e <GPIO_writePin+0x1c6>
	{
		/* Do Nothing */
	}
	else
	{
		switch(port_num)
    11ac:	89 81       	ldd	r24, Y+1	; 0x01
    11ae:	28 2f       	mov	r18, r24
    11b0:	30 e0       	ldi	r19, 0x00	; 0
    11b2:	3d 83       	std	Y+5, r19	; 0x05
    11b4:	2c 83       	std	Y+4, r18	; 0x04
    11b6:	8c 81       	ldd	r24, Y+4	; 0x04
    11b8:	9d 81       	ldd	r25, Y+5	; 0x05
    11ba:	81 30       	cpi	r24, 0x01	; 1
    11bc:	91 05       	cpc	r25, r1
    11be:	09 f4       	brne	.+2      	; 0x11c2 <GPIO_writePin+0x3a>
    11c0:	43 c0       	rjmp	.+134    	; 0x1248 <GPIO_writePin+0xc0>
    11c2:	2c 81       	ldd	r18, Y+4	; 0x04
    11c4:	3d 81       	ldd	r19, Y+5	; 0x05
    11c6:	22 30       	cpi	r18, 0x02	; 2
    11c8:	31 05       	cpc	r19, r1
    11ca:	2c f4       	brge	.+10     	; 0x11d6 <GPIO_writePin+0x4e>
    11cc:	8c 81       	ldd	r24, Y+4	; 0x04
    11ce:	9d 81       	ldd	r25, Y+5	; 0x05
    11d0:	00 97       	sbiw	r24, 0x00	; 0
    11d2:	71 f0       	breq	.+28     	; 0x11f0 <GPIO_writePin+0x68>
    11d4:	bc c0       	rjmp	.+376    	; 0x134e <GPIO_writePin+0x1c6>
    11d6:	2c 81       	ldd	r18, Y+4	; 0x04
    11d8:	3d 81       	ldd	r19, Y+5	; 0x05
    11da:	22 30       	cpi	r18, 0x02	; 2
    11dc:	31 05       	cpc	r19, r1
    11de:	09 f4       	brne	.+2      	; 0x11e2 <GPIO_writePin+0x5a>
    11e0:	5f c0       	rjmp	.+190    	; 0x12a0 <GPIO_writePin+0x118>
    11e2:	8c 81       	ldd	r24, Y+4	; 0x04
    11e4:	9d 81       	ldd	r25, Y+5	; 0x05
    11e6:	83 30       	cpi	r24, 0x03	; 3
    11e8:	91 05       	cpc	r25, r1
    11ea:	09 f4       	brne	.+2      	; 0x11ee <GPIO_writePin+0x66>
    11ec:	85 c0       	rjmp	.+266    	; 0x12f8 <GPIO_writePin+0x170>
    11ee:	af c0       	rjmp	.+350    	; 0x134e <GPIO_writePin+0x1c6>
		{
		case PORTA_ID:
			if(value == LOGIC_HIGH)
    11f0:	8b 81       	ldd	r24, Y+3	; 0x03
    11f2:	81 30       	cpi	r24, 0x01	; 1
    11f4:	a1 f4       	brne	.+40     	; 0x121e <GPIO_writePin+0x96>
			{
				SET_BIT(PORTA,pin_num);
    11f6:	ab e3       	ldi	r26, 0x3B	; 59
    11f8:	b0 e0       	ldi	r27, 0x00	; 0
    11fa:	eb e3       	ldi	r30, 0x3B	; 59
    11fc:	f0 e0       	ldi	r31, 0x00	; 0
    11fe:	80 81       	ld	r24, Z
    1200:	48 2f       	mov	r20, r24
    1202:	8a 81       	ldd	r24, Y+2	; 0x02
    1204:	28 2f       	mov	r18, r24
    1206:	30 e0       	ldi	r19, 0x00	; 0
    1208:	81 e0       	ldi	r24, 0x01	; 1
    120a:	90 e0       	ldi	r25, 0x00	; 0
    120c:	02 2e       	mov	r0, r18
    120e:	02 c0       	rjmp	.+4      	; 0x1214 <GPIO_writePin+0x8c>
    1210:	88 0f       	add	r24, r24
    1212:	99 1f       	adc	r25, r25
    1214:	0a 94       	dec	r0
    1216:	e2 f7       	brpl	.-8      	; 0x1210 <GPIO_writePin+0x88>
    1218:	84 2b       	or	r24, r20
    121a:	8c 93       	st	X, r24
    121c:	98 c0       	rjmp	.+304    	; 0x134e <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTA,pin_num);
    121e:	ab e3       	ldi	r26, 0x3B	; 59
    1220:	b0 e0       	ldi	r27, 0x00	; 0
    1222:	eb e3       	ldi	r30, 0x3B	; 59
    1224:	f0 e0       	ldi	r31, 0x00	; 0
    1226:	80 81       	ld	r24, Z
    1228:	48 2f       	mov	r20, r24
    122a:	8a 81       	ldd	r24, Y+2	; 0x02
    122c:	28 2f       	mov	r18, r24
    122e:	30 e0       	ldi	r19, 0x00	; 0
    1230:	81 e0       	ldi	r24, 0x01	; 1
    1232:	90 e0       	ldi	r25, 0x00	; 0
    1234:	02 2e       	mov	r0, r18
    1236:	02 c0       	rjmp	.+4      	; 0x123c <GPIO_writePin+0xb4>
    1238:	88 0f       	add	r24, r24
    123a:	99 1f       	adc	r25, r25
    123c:	0a 94       	dec	r0
    123e:	e2 f7       	brpl	.-8      	; 0x1238 <GPIO_writePin+0xb0>
    1240:	80 95       	com	r24
    1242:	84 23       	and	r24, r20
    1244:	8c 93       	st	X, r24
    1246:	83 c0       	rjmp	.+262    	; 0x134e <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if(value == LOGIC_HIGH)
    1248:	8b 81       	ldd	r24, Y+3	; 0x03
    124a:	81 30       	cpi	r24, 0x01	; 1
    124c:	a1 f4       	brne	.+40     	; 0x1276 <GPIO_writePin+0xee>
			{
				SET_BIT(PORTB,pin_num);
    124e:	a8 e3       	ldi	r26, 0x38	; 56
    1250:	b0 e0       	ldi	r27, 0x00	; 0
    1252:	e8 e3       	ldi	r30, 0x38	; 56
    1254:	f0 e0       	ldi	r31, 0x00	; 0
    1256:	80 81       	ld	r24, Z
    1258:	48 2f       	mov	r20, r24
    125a:	8a 81       	ldd	r24, Y+2	; 0x02
    125c:	28 2f       	mov	r18, r24
    125e:	30 e0       	ldi	r19, 0x00	; 0
    1260:	81 e0       	ldi	r24, 0x01	; 1
    1262:	90 e0       	ldi	r25, 0x00	; 0
    1264:	02 2e       	mov	r0, r18
    1266:	02 c0       	rjmp	.+4      	; 0x126c <GPIO_writePin+0xe4>
    1268:	88 0f       	add	r24, r24
    126a:	99 1f       	adc	r25, r25
    126c:	0a 94       	dec	r0
    126e:	e2 f7       	brpl	.-8      	; 0x1268 <GPIO_writePin+0xe0>
    1270:	84 2b       	or	r24, r20
    1272:	8c 93       	st	X, r24
    1274:	6c c0       	rjmp	.+216    	; 0x134e <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTB,pin_num);
    1276:	a8 e3       	ldi	r26, 0x38	; 56
    1278:	b0 e0       	ldi	r27, 0x00	; 0
    127a:	e8 e3       	ldi	r30, 0x38	; 56
    127c:	f0 e0       	ldi	r31, 0x00	; 0
    127e:	80 81       	ld	r24, Z
    1280:	48 2f       	mov	r20, r24
    1282:	8a 81       	ldd	r24, Y+2	; 0x02
    1284:	28 2f       	mov	r18, r24
    1286:	30 e0       	ldi	r19, 0x00	; 0
    1288:	81 e0       	ldi	r24, 0x01	; 1
    128a:	90 e0       	ldi	r25, 0x00	; 0
    128c:	02 2e       	mov	r0, r18
    128e:	02 c0       	rjmp	.+4      	; 0x1294 <GPIO_writePin+0x10c>
    1290:	88 0f       	add	r24, r24
    1292:	99 1f       	adc	r25, r25
    1294:	0a 94       	dec	r0
    1296:	e2 f7       	brpl	.-8      	; 0x1290 <GPIO_writePin+0x108>
    1298:	80 95       	com	r24
    129a:	84 23       	and	r24, r20
    129c:	8c 93       	st	X, r24
    129e:	57 c0       	rjmp	.+174    	; 0x134e <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH)
    12a0:	8b 81       	ldd	r24, Y+3	; 0x03
    12a2:	81 30       	cpi	r24, 0x01	; 1
    12a4:	a1 f4       	brne	.+40     	; 0x12ce <GPIO_writePin+0x146>
			{
				SET_BIT(PORTC,pin_num);
    12a6:	a5 e3       	ldi	r26, 0x35	; 53
    12a8:	b0 e0       	ldi	r27, 0x00	; 0
    12aa:	e5 e3       	ldi	r30, 0x35	; 53
    12ac:	f0 e0       	ldi	r31, 0x00	; 0
    12ae:	80 81       	ld	r24, Z
    12b0:	48 2f       	mov	r20, r24
    12b2:	8a 81       	ldd	r24, Y+2	; 0x02
    12b4:	28 2f       	mov	r18, r24
    12b6:	30 e0       	ldi	r19, 0x00	; 0
    12b8:	81 e0       	ldi	r24, 0x01	; 1
    12ba:	90 e0       	ldi	r25, 0x00	; 0
    12bc:	02 2e       	mov	r0, r18
    12be:	02 c0       	rjmp	.+4      	; 0x12c4 <GPIO_writePin+0x13c>
    12c0:	88 0f       	add	r24, r24
    12c2:	99 1f       	adc	r25, r25
    12c4:	0a 94       	dec	r0
    12c6:	e2 f7       	brpl	.-8      	; 0x12c0 <GPIO_writePin+0x138>
    12c8:	84 2b       	or	r24, r20
    12ca:	8c 93       	st	X, r24
    12cc:	40 c0       	rjmp	.+128    	; 0x134e <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTC,pin_num);
    12ce:	a5 e3       	ldi	r26, 0x35	; 53
    12d0:	b0 e0       	ldi	r27, 0x00	; 0
    12d2:	e5 e3       	ldi	r30, 0x35	; 53
    12d4:	f0 e0       	ldi	r31, 0x00	; 0
    12d6:	80 81       	ld	r24, Z
    12d8:	48 2f       	mov	r20, r24
    12da:	8a 81       	ldd	r24, Y+2	; 0x02
    12dc:	28 2f       	mov	r18, r24
    12de:	30 e0       	ldi	r19, 0x00	; 0
    12e0:	81 e0       	ldi	r24, 0x01	; 1
    12e2:	90 e0       	ldi	r25, 0x00	; 0
    12e4:	02 2e       	mov	r0, r18
    12e6:	02 c0       	rjmp	.+4      	; 0x12ec <GPIO_writePin+0x164>
    12e8:	88 0f       	add	r24, r24
    12ea:	99 1f       	adc	r25, r25
    12ec:	0a 94       	dec	r0
    12ee:	e2 f7       	brpl	.-8      	; 0x12e8 <GPIO_writePin+0x160>
    12f0:	80 95       	com	r24
    12f2:	84 23       	and	r24, r20
    12f4:	8c 93       	st	X, r24
    12f6:	2b c0       	rjmp	.+86     	; 0x134e <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH)
    12f8:	8b 81       	ldd	r24, Y+3	; 0x03
    12fa:	81 30       	cpi	r24, 0x01	; 1
    12fc:	a1 f4       	brne	.+40     	; 0x1326 <GPIO_writePin+0x19e>
			{
				SET_BIT(PORTD,pin_num);
    12fe:	a2 e3       	ldi	r26, 0x32	; 50
    1300:	b0 e0       	ldi	r27, 0x00	; 0
    1302:	e2 e3       	ldi	r30, 0x32	; 50
    1304:	f0 e0       	ldi	r31, 0x00	; 0
    1306:	80 81       	ld	r24, Z
    1308:	48 2f       	mov	r20, r24
    130a:	8a 81       	ldd	r24, Y+2	; 0x02
    130c:	28 2f       	mov	r18, r24
    130e:	30 e0       	ldi	r19, 0x00	; 0
    1310:	81 e0       	ldi	r24, 0x01	; 1
    1312:	90 e0       	ldi	r25, 0x00	; 0
    1314:	02 2e       	mov	r0, r18
    1316:	02 c0       	rjmp	.+4      	; 0x131c <GPIO_writePin+0x194>
    1318:	88 0f       	add	r24, r24
    131a:	99 1f       	adc	r25, r25
    131c:	0a 94       	dec	r0
    131e:	e2 f7       	brpl	.-8      	; 0x1318 <GPIO_writePin+0x190>
    1320:	84 2b       	or	r24, r20
    1322:	8c 93       	st	X, r24
    1324:	14 c0       	rjmp	.+40     	; 0x134e <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTD,pin_num);
    1326:	a2 e3       	ldi	r26, 0x32	; 50
    1328:	b0 e0       	ldi	r27, 0x00	; 0
    132a:	e2 e3       	ldi	r30, 0x32	; 50
    132c:	f0 e0       	ldi	r31, 0x00	; 0
    132e:	80 81       	ld	r24, Z
    1330:	48 2f       	mov	r20, r24
    1332:	8a 81       	ldd	r24, Y+2	; 0x02
    1334:	28 2f       	mov	r18, r24
    1336:	30 e0       	ldi	r19, 0x00	; 0
    1338:	81 e0       	ldi	r24, 0x01	; 1
    133a:	90 e0       	ldi	r25, 0x00	; 0
    133c:	02 2e       	mov	r0, r18
    133e:	02 c0       	rjmp	.+4      	; 0x1344 <GPIO_writePin+0x1bc>
    1340:	88 0f       	add	r24, r24
    1342:	99 1f       	adc	r25, r25
    1344:	0a 94       	dec	r0
    1346:	e2 f7       	brpl	.-8      	; 0x1340 <GPIO_writePin+0x1b8>
    1348:	80 95       	com	r24
    134a:	84 23       	and	r24, r20
    134c:	8c 93       	st	X, r24
			}
			break;
		}

	}
}
    134e:	0f 90       	pop	r0
    1350:	0f 90       	pop	r0
    1352:	0f 90       	pop	r0
    1354:	0f 90       	pop	r0
    1356:	0f 90       	pop	r0
    1358:	cf 91       	pop	r28
    135a:	df 91       	pop	r29
    135c:	08 95       	ret

0000135e <GPIO_writePort>:
 * Description  :write the value on the required port if the input port number is not correct, the function will Do Nothing
 * INPUTS       : port_num, and value to be written
 * RETURNS      : void
 **************************************************************************/
void GPIO_writePort(uint8 port_num,uint8 value)
{
    135e:	df 93       	push	r29
    1360:	cf 93       	push	r28
    1362:	00 d0       	rcall	.+0      	; 0x1364 <GPIO_writePort+0x6>
    1364:	00 d0       	rcall	.+0      	; 0x1366 <GPIO_writePort+0x8>
    1366:	cd b7       	in	r28, 0x3d	; 61
    1368:	de b7       	in	r29, 0x3e	; 62
    136a:	89 83       	std	Y+1, r24	; 0x01
    136c:	6a 83       	std	Y+2, r22	; 0x02
	if((port_num >= Max_NUM_Of_PORTS))
    136e:	89 81       	ldd	r24, Y+1	; 0x01
    1370:	84 30       	cpi	r24, 0x04	; 4
    1372:	90 f5       	brcc	.+100    	; 0x13d8 <GPIO_writePort+0x7a>
	{
		/* Do Nothing */
	}
	else
	{
		switch(port_num)
    1374:	89 81       	ldd	r24, Y+1	; 0x01
    1376:	28 2f       	mov	r18, r24
    1378:	30 e0       	ldi	r19, 0x00	; 0
    137a:	3c 83       	std	Y+4, r19	; 0x04
    137c:	2b 83       	std	Y+3, r18	; 0x03
    137e:	8b 81       	ldd	r24, Y+3	; 0x03
    1380:	9c 81       	ldd	r25, Y+4	; 0x04
    1382:	81 30       	cpi	r24, 0x01	; 1
    1384:	91 05       	cpc	r25, r1
    1386:	d1 f0       	breq	.+52     	; 0x13bc <GPIO_writePort+0x5e>
    1388:	2b 81       	ldd	r18, Y+3	; 0x03
    138a:	3c 81       	ldd	r19, Y+4	; 0x04
    138c:	22 30       	cpi	r18, 0x02	; 2
    138e:	31 05       	cpc	r19, r1
    1390:	2c f4       	brge	.+10     	; 0x139c <GPIO_writePort+0x3e>
    1392:	8b 81       	ldd	r24, Y+3	; 0x03
    1394:	9c 81       	ldd	r25, Y+4	; 0x04
    1396:	00 97       	sbiw	r24, 0x00	; 0
    1398:	61 f0       	breq	.+24     	; 0x13b2 <GPIO_writePort+0x54>
    139a:	1e c0       	rjmp	.+60     	; 0x13d8 <GPIO_writePort+0x7a>
    139c:	2b 81       	ldd	r18, Y+3	; 0x03
    139e:	3c 81       	ldd	r19, Y+4	; 0x04
    13a0:	22 30       	cpi	r18, 0x02	; 2
    13a2:	31 05       	cpc	r19, r1
    13a4:	81 f0       	breq	.+32     	; 0x13c6 <GPIO_writePort+0x68>
    13a6:	8b 81       	ldd	r24, Y+3	; 0x03
    13a8:	9c 81       	ldd	r25, Y+4	; 0x04
    13aa:	83 30       	cpi	r24, 0x03	; 3
    13ac:	91 05       	cpc	r25, r1
    13ae:	81 f0       	breq	.+32     	; 0x13d0 <GPIO_writePort+0x72>
    13b0:	13 c0       	rjmp	.+38     	; 0x13d8 <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
    13b2:	eb e3       	ldi	r30, 0x3B	; 59
    13b4:	f0 e0       	ldi	r31, 0x00	; 0
    13b6:	8a 81       	ldd	r24, Y+2	; 0x02
    13b8:	80 83       	st	Z, r24
    13ba:	0e c0       	rjmp	.+28     	; 0x13d8 <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    13bc:	e8 e3       	ldi	r30, 0x38	; 56
    13be:	f0 e0       	ldi	r31, 0x00	; 0
    13c0:	8a 81       	ldd	r24, Y+2	; 0x02
    13c2:	80 83       	st	Z, r24
    13c4:	09 c0       	rjmp	.+18     	; 0x13d8 <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    13c6:	e5 e3       	ldi	r30, 0x35	; 53
    13c8:	f0 e0       	ldi	r31, 0x00	; 0
    13ca:	8a 81       	ldd	r24, Y+2	; 0x02
    13cc:	80 83       	st	Z, r24
    13ce:	04 c0       	rjmp	.+8      	; 0x13d8 <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    13d0:	e2 e3       	ldi	r30, 0x32	; 50
    13d2:	f0 e0       	ldi	r31, 0x00	; 0
    13d4:	8a 81       	ldd	r24, Y+2	; 0x02
    13d6:	80 83       	st	Z, r24
			break;
		}
	}
}
    13d8:	0f 90       	pop	r0
    13da:	0f 90       	pop	r0
    13dc:	0f 90       	pop	r0
    13de:	0f 90       	pop	r0
    13e0:	cf 91       	pop	r28
    13e2:	df 91       	pop	r29
    13e4:	08 95       	ret

000013e6 <GPIO_readPin>:
 *                if the input port number or pin number  is not correct, the function return LOGIC_LOW
 * INPUTS       : port_num, and pin_num to be read
 * RETURNS      : uint8
 **************************************************************************/
uint8 GPIO_readPin(uint8 port_num,uint8 pin_num)
{
    13e6:	df 93       	push	r29
    13e8:	cf 93       	push	r28
    13ea:	00 d0       	rcall	.+0      	; 0x13ec <GPIO_readPin+0x6>
    13ec:	00 d0       	rcall	.+0      	; 0x13ee <GPIO_readPin+0x8>
    13ee:	0f 92       	push	r0
    13f0:	cd b7       	in	r28, 0x3d	; 61
    13f2:	de b7       	in	r29, 0x3e	; 62
    13f4:	8a 83       	std	Y+2, r24	; 0x02
    13f6:	6b 83       	std	Y+3, r22	; 0x03
	uint8 READ_PIN = LOGIC_LOW ;
    13f8:	19 82       	std	Y+1, r1	; 0x01
	if((port_num >= Max_NUM_Of_PORTS) || (pin_num >=  MAX_NUM_Of_PINS))
    13fa:	8a 81       	ldd	r24, Y+2	; 0x02
    13fc:	84 30       	cpi	r24, 0x04	; 4
    13fe:	08 f0       	brcs	.+2      	; 0x1402 <GPIO_readPin+0x1c>
    1400:	84 c0       	rjmp	.+264    	; 0x150a <GPIO_readPin+0x124>
    1402:	8b 81       	ldd	r24, Y+3	; 0x03
    1404:	88 30       	cpi	r24, 0x08	; 8
    1406:	08 f0       	brcs	.+2      	; 0x140a <GPIO_readPin+0x24>
    1408:	80 c0       	rjmp	.+256    	; 0x150a <GPIO_readPin+0x124>
		{
			/* Do Nothing */
		}
		else
		{
			switch(port_num)
    140a:	8a 81       	ldd	r24, Y+2	; 0x02
    140c:	28 2f       	mov	r18, r24
    140e:	30 e0       	ldi	r19, 0x00	; 0
    1410:	3d 83       	std	Y+5, r19	; 0x05
    1412:	2c 83       	std	Y+4, r18	; 0x04
    1414:	4c 81       	ldd	r20, Y+4	; 0x04
    1416:	5d 81       	ldd	r21, Y+5	; 0x05
    1418:	41 30       	cpi	r20, 0x01	; 1
    141a:	51 05       	cpc	r21, r1
    141c:	79 f1       	breq	.+94     	; 0x147c <GPIO_readPin+0x96>
    141e:	8c 81       	ldd	r24, Y+4	; 0x04
    1420:	9d 81       	ldd	r25, Y+5	; 0x05
    1422:	82 30       	cpi	r24, 0x02	; 2
    1424:	91 05       	cpc	r25, r1
    1426:	34 f4       	brge	.+12     	; 0x1434 <GPIO_readPin+0x4e>
    1428:	2c 81       	ldd	r18, Y+4	; 0x04
    142a:	3d 81       	ldd	r19, Y+5	; 0x05
    142c:	21 15       	cp	r18, r1
    142e:	31 05       	cpc	r19, r1
    1430:	69 f0       	breq	.+26     	; 0x144c <GPIO_readPin+0x66>
    1432:	6b c0       	rjmp	.+214    	; 0x150a <GPIO_readPin+0x124>
    1434:	4c 81       	ldd	r20, Y+4	; 0x04
    1436:	5d 81       	ldd	r21, Y+5	; 0x05
    1438:	42 30       	cpi	r20, 0x02	; 2
    143a:	51 05       	cpc	r21, r1
    143c:	b9 f1       	breq	.+110    	; 0x14ac <GPIO_readPin+0xc6>
    143e:	8c 81       	ldd	r24, Y+4	; 0x04
    1440:	9d 81       	ldd	r25, Y+5	; 0x05
    1442:	83 30       	cpi	r24, 0x03	; 3
    1444:	91 05       	cpc	r25, r1
    1446:	09 f4       	brne	.+2      	; 0x144a <GPIO_readPin+0x64>
    1448:	49 c0       	rjmp	.+146    	; 0x14dc <GPIO_readPin+0xf6>
    144a:	5f c0       	rjmp	.+190    	; 0x150a <GPIO_readPin+0x124>
			{
			case PORTA_ID:
				if(BIT_IS_SET(PINA,pin_num))
    144c:	e9 e3       	ldi	r30, 0x39	; 57
    144e:	f0 e0       	ldi	r31, 0x00	; 0
    1450:	80 81       	ld	r24, Z
    1452:	28 2f       	mov	r18, r24
    1454:	30 e0       	ldi	r19, 0x00	; 0
    1456:	8b 81       	ldd	r24, Y+3	; 0x03
    1458:	88 2f       	mov	r24, r24
    145a:	90 e0       	ldi	r25, 0x00	; 0
    145c:	a9 01       	movw	r20, r18
    145e:	02 c0       	rjmp	.+4      	; 0x1464 <GPIO_readPin+0x7e>
    1460:	55 95       	asr	r21
    1462:	47 95       	ror	r20
    1464:	8a 95       	dec	r24
    1466:	e2 f7       	brpl	.-8      	; 0x1460 <GPIO_readPin+0x7a>
    1468:	ca 01       	movw	r24, r20
    146a:	81 70       	andi	r24, 0x01	; 1
    146c:	90 70       	andi	r25, 0x00	; 0
    146e:	88 23       	and	r24, r24
    1470:	19 f0       	breq	.+6      	; 0x1478 <GPIO_readPin+0x92>
				{
					READ_PIN = LOGIC_HIGH;
    1472:	81 e0       	ldi	r24, 0x01	; 1
    1474:	89 83       	std	Y+1, r24	; 0x01
    1476:	49 c0       	rjmp	.+146    	; 0x150a <GPIO_readPin+0x124>
				}
				else
				{
					READ_PIN = LOGIC_LOW;
    1478:	19 82       	std	Y+1, r1	; 0x01
    147a:	47 c0       	rjmp	.+142    	; 0x150a <GPIO_readPin+0x124>
				}
				break;
			case PORTB_ID:
				if(BIT_IS_SET(PINB,pin_num))
    147c:	e6 e3       	ldi	r30, 0x36	; 54
    147e:	f0 e0       	ldi	r31, 0x00	; 0
    1480:	80 81       	ld	r24, Z
    1482:	28 2f       	mov	r18, r24
    1484:	30 e0       	ldi	r19, 0x00	; 0
    1486:	8b 81       	ldd	r24, Y+3	; 0x03
    1488:	88 2f       	mov	r24, r24
    148a:	90 e0       	ldi	r25, 0x00	; 0
    148c:	a9 01       	movw	r20, r18
    148e:	02 c0       	rjmp	.+4      	; 0x1494 <GPIO_readPin+0xae>
    1490:	55 95       	asr	r21
    1492:	47 95       	ror	r20
    1494:	8a 95       	dec	r24
    1496:	e2 f7       	brpl	.-8      	; 0x1490 <GPIO_readPin+0xaa>
    1498:	ca 01       	movw	r24, r20
    149a:	81 70       	andi	r24, 0x01	; 1
    149c:	90 70       	andi	r25, 0x00	; 0
    149e:	88 23       	and	r24, r24
    14a0:	19 f0       	breq	.+6      	; 0x14a8 <GPIO_readPin+0xc2>
				{
					READ_PIN = LOGIC_HIGH;
    14a2:	81 e0       	ldi	r24, 0x01	; 1
    14a4:	89 83       	std	Y+1, r24	; 0x01
    14a6:	31 c0       	rjmp	.+98     	; 0x150a <GPIO_readPin+0x124>
				}
				else
				{
					READ_PIN = LOGIC_LOW;
    14a8:	19 82       	std	Y+1, r1	; 0x01
    14aa:	2f c0       	rjmp	.+94     	; 0x150a <GPIO_readPin+0x124>
				}
				break;
			case PORTC_ID:
				if(BIT_IS_SET(PINC,pin_num))
    14ac:	e3 e3       	ldi	r30, 0x33	; 51
    14ae:	f0 e0       	ldi	r31, 0x00	; 0
    14b0:	80 81       	ld	r24, Z
    14b2:	28 2f       	mov	r18, r24
    14b4:	30 e0       	ldi	r19, 0x00	; 0
    14b6:	8b 81       	ldd	r24, Y+3	; 0x03
    14b8:	88 2f       	mov	r24, r24
    14ba:	90 e0       	ldi	r25, 0x00	; 0
    14bc:	a9 01       	movw	r20, r18
    14be:	02 c0       	rjmp	.+4      	; 0x14c4 <GPIO_readPin+0xde>
    14c0:	55 95       	asr	r21
    14c2:	47 95       	ror	r20
    14c4:	8a 95       	dec	r24
    14c6:	e2 f7       	brpl	.-8      	; 0x14c0 <GPIO_readPin+0xda>
    14c8:	ca 01       	movw	r24, r20
    14ca:	81 70       	andi	r24, 0x01	; 1
    14cc:	90 70       	andi	r25, 0x00	; 0
    14ce:	88 23       	and	r24, r24
    14d0:	19 f0       	breq	.+6      	; 0x14d8 <GPIO_readPin+0xf2>
				{
					READ_PIN = LOGIC_HIGH;
    14d2:	81 e0       	ldi	r24, 0x01	; 1
    14d4:	89 83       	std	Y+1, r24	; 0x01
    14d6:	19 c0       	rjmp	.+50     	; 0x150a <GPIO_readPin+0x124>
				}
				else
				{
					READ_PIN = LOGIC_LOW;
    14d8:	19 82       	std	Y+1, r1	; 0x01
    14da:	17 c0       	rjmp	.+46     	; 0x150a <GPIO_readPin+0x124>
				}
				break;
			case PORTD_ID:
				if(BIT_IS_SET(PIND,pin_num))
    14dc:	e0 e3       	ldi	r30, 0x30	; 48
    14de:	f0 e0       	ldi	r31, 0x00	; 0
    14e0:	80 81       	ld	r24, Z
    14e2:	28 2f       	mov	r18, r24
    14e4:	30 e0       	ldi	r19, 0x00	; 0
    14e6:	8b 81       	ldd	r24, Y+3	; 0x03
    14e8:	88 2f       	mov	r24, r24
    14ea:	90 e0       	ldi	r25, 0x00	; 0
    14ec:	a9 01       	movw	r20, r18
    14ee:	02 c0       	rjmp	.+4      	; 0x14f4 <GPIO_readPin+0x10e>
    14f0:	55 95       	asr	r21
    14f2:	47 95       	ror	r20
    14f4:	8a 95       	dec	r24
    14f6:	e2 f7       	brpl	.-8      	; 0x14f0 <GPIO_readPin+0x10a>
    14f8:	ca 01       	movw	r24, r20
    14fa:	81 70       	andi	r24, 0x01	; 1
    14fc:	90 70       	andi	r25, 0x00	; 0
    14fe:	88 23       	and	r24, r24
    1500:	19 f0       	breq	.+6      	; 0x1508 <GPIO_readPin+0x122>
				{
					READ_PIN = LOGIC_HIGH;
    1502:	81 e0       	ldi	r24, 0x01	; 1
    1504:	89 83       	std	Y+1, r24	; 0x01
    1506:	01 c0       	rjmp	.+2      	; 0x150a <GPIO_readPin+0x124>
				}
				else
				{
					READ_PIN = LOGIC_LOW;
    1508:	19 82       	std	Y+1, r1	; 0x01
				}
				break;
			}
		}
	return READ_PIN;
    150a:	89 81       	ldd	r24, Y+1	; 0x01
}
    150c:	0f 90       	pop	r0
    150e:	0f 90       	pop	r0
    1510:	0f 90       	pop	r0
    1512:	0f 90       	pop	r0
    1514:	0f 90       	pop	r0
    1516:	cf 91       	pop	r28
    1518:	df 91       	pop	r29
    151a:	08 95       	ret

0000151c <GPIO_readPort>:
 *                if the input port number is not correct, the function will return Zero
 * INPUTS       : port_num
 * RETURNS      : uint8
 **************************************************************************/
uint8 GPIO_readPort(uint8 port_num)
{
    151c:	df 93       	push	r29
    151e:	cf 93       	push	r28
    1520:	00 d0       	rcall	.+0      	; 0x1522 <GPIO_readPort+0x6>
    1522:	00 d0       	rcall	.+0      	; 0x1524 <GPIO_readPort+0x8>
    1524:	cd b7       	in	r28, 0x3d	; 61
    1526:	de b7       	in	r29, 0x3e	; 62
    1528:	8a 83       	std	Y+2, r24	; 0x02
	uint8 READ_PORT = LOGIC_LOW ;
    152a:	19 82       	std	Y+1, r1	; 0x01
	if((port_num >= Max_NUM_Of_PORTS))
    152c:	8a 81       	ldd	r24, Y+2	; 0x02
    152e:	84 30       	cpi	r24, 0x04	; 4
    1530:	90 f5       	brcc	.+100    	; 0x1596 <GPIO_readPort+0x7a>
	{
		/* Do Nothing */
	}
	else
	{
		switch(port_num)
    1532:	8a 81       	ldd	r24, Y+2	; 0x02
    1534:	28 2f       	mov	r18, r24
    1536:	30 e0       	ldi	r19, 0x00	; 0
    1538:	3c 83       	std	Y+4, r19	; 0x04
    153a:	2b 83       	std	Y+3, r18	; 0x03
    153c:	8b 81       	ldd	r24, Y+3	; 0x03
    153e:	9c 81       	ldd	r25, Y+4	; 0x04
    1540:	81 30       	cpi	r24, 0x01	; 1
    1542:	91 05       	cpc	r25, r1
    1544:	d1 f0       	breq	.+52     	; 0x157a <GPIO_readPort+0x5e>
    1546:	2b 81       	ldd	r18, Y+3	; 0x03
    1548:	3c 81       	ldd	r19, Y+4	; 0x04
    154a:	22 30       	cpi	r18, 0x02	; 2
    154c:	31 05       	cpc	r19, r1
    154e:	2c f4       	brge	.+10     	; 0x155a <GPIO_readPort+0x3e>
    1550:	8b 81       	ldd	r24, Y+3	; 0x03
    1552:	9c 81       	ldd	r25, Y+4	; 0x04
    1554:	00 97       	sbiw	r24, 0x00	; 0
    1556:	61 f0       	breq	.+24     	; 0x1570 <GPIO_readPort+0x54>
    1558:	1e c0       	rjmp	.+60     	; 0x1596 <GPIO_readPort+0x7a>
    155a:	2b 81       	ldd	r18, Y+3	; 0x03
    155c:	3c 81       	ldd	r19, Y+4	; 0x04
    155e:	22 30       	cpi	r18, 0x02	; 2
    1560:	31 05       	cpc	r19, r1
    1562:	81 f0       	breq	.+32     	; 0x1584 <GPIO_readPort+0x68>
    1564:	8b 81       	ldd	r24, Y+3	; 0x03
    1566:	9c 81       	ldd	r25, Y+4	; 0x04
    1568:	83 30       	cpi	r24, 0x03	; 3
    156a:	91 05       	cpc	r25, r1
    156c:	81 f0       	breq	.+32     	; 0x158e <GPIO_readPort+0x72>
    156e:	13 c0       	rjmp	.+38     	; 0x1596 <GPIO_readPort+0x7a>
		{
		case PORTA_ID:
			READ_PORT = PINA;
    1570:	e9 e3       	ldi	r30, 0x39	; 57
    1572:	f0 e0       	ldi	r31, 0x00	; 0
    1574:	80 81       	ld	r24, Z
    1576:	89 83       	std	Y+1, r24	; 0x01
    1578:	0e c0       	rjmp	.+28     	; 0x1596 <GPIO_readPort+0x7a>
			break;
		case PORTB_ID:
			READ_PORT = PINB;
    157a:	e6 e3       	ldi	r30, 0x36	; 54
    157c:	f0 e0       	ldi	r31, 0x00	; 0
    157e:	80 81       	ld	r24, Z
    1580:	89 83       	std	Y+1, r24	; 0x01
    1582:	09 c0       	rjmp	.+18     	; 0x1596 <GPIO_readPort+0x7a>
			break;
		case PORTC_ID:
			READ_PORT = PINC;
    1584:	e3 e3       	ldi	r30, 0x33	; 51
    1586:	f0 e0       	ldi	r31, 0x00	; 0
    1588:	80 81       	ld	r24, Z
    158a:	89 83       	std	Y+1, r24	; 0x01
    158c:	04 c0       	rjmp	.+8      	; 0x1596 <GPIO_readPort+0x7a>
			break;
		case PORTD_ID:
			READ_PORT = PIND;
    158e:	e0 e3       	ldi	r30, 0x30	; 48
    1590:	f0 e0       	ldi	r31, 0x00	; 0
    1592:	80 81       	ld	r24, Z
    1594:	89 83       	std	Y+1, r24	; 0x01
			break;
		}

	}
	return READ_PORT;
    1596:	89 81       	ldd	r24, Y+1	; 0x01
}
    1598:	0f 90       	pop	r0
    159a:	0f 90       	pop	r0
    159c:	0f 90       	pop	r0
    159e:	0f 90       	pop	r0
    15a0:	cf 91       	pop	r28
    15a2:	df 91       	pop	r29
    15a4:	08 95       	ret

000015a6 <Increment_Watch>:
 * Description  : Increment the seconds every compare match or every second
 * INPUTS       : void
 * RETURNS      : void
 **************************************************************************/
void Increment_Watch(void)
{
    15a6:	df 93       	push	r29
    15a8:	cf 93       	push	r28
    15aa:	cd b7       	in	r28, 0x3d	; 61
    15ac:	de b7       	in	r29, 0x3e	; 62
	SECOND++;
    15ae:	80 91 87 00 	lds	r24, 0x0087
    15b2:	8f 5f       	subi	r24, 0xFF	; 255
    15b4:	80 93 87 00 	sts	0x0087, r24
		if(SECOND == 60)
    15b8:	80 91 87 00 	lds	r24, 0x0087
    15bc:	8c 33       	cpi	r24, 0x3C	; 60
    15be:	e1 f4       	brne	.+56     	; 0x15f8 <Increment_Watch+0x52>
		{
			SECOND = 0;
    15c0:	10 92 87 00 	sts	0x0087, r1
			MINUTE++;
    15c4:	80 91 88 00 	lds	r24, 0x0088
    15c8:	8f 5f       	subi	r24, 0xFF	; 255
    15ca:	80 93 88 00 	sts	0x0088, r24
			if(MINUTE == 60)
    15ce:	80 91 88 00 	lds	r24, 0x0088
    15d2:	8c 33       	cpi	r24, 0x3C	; 60
    15d4:	89 f4       	brne	.+34     	; 0x15f8 <Increment_Watch+0x52>
			{
				MINUTE = 0;
    15d6:	10 92 88 00 	sts	0x0088, r1
				HOUR++;
    15da:	80 91 89 00 	lds	r24, 0x0089
    15de:	8f 5f       	subi	r24, 0xFF	; 255
    15e0:	80 93 89 00 	sts	0x0089, r24
				if(HOUR == 24)
    15e4:	80 91 89 00 	lds	r24, 0x0089
    15e8:	88 31       	cpi	r24, 0x18	; 24
    15ea:	31 f4       	brne	.+12     	; 0x15f8 <Increment_Watch+0x52>
				{
					SECOND = 0;
    15ec:	10 92 87 00 	sts	0x0087, r1
					MINUTE = 0;
    15f0:	10 92 88 00 	sts	0x0088, r1
					HOUR = 0;
    15f4:	10 92 89 00 	sts	0x0089, r1
				}
			}
		}
}
    15f8:	cf 91       	pop	r28
    15fa:	df 91       	pop	r29
    15fc:	08 95       	ret

000015fe <Pause_Watch>:
 * Description  : Pause the time on the 7-segment display
 * INPUTS       : void
 * RETURNS      : void
 **************************************************************************/
void Pause_Watch(void)
{
    15fe:	df 93       	push	r29
    1600:	cf 93       	push	r28
    1602:	cd b7       	in	r28, 0x3d	; 61
    1604:	de b7       	in	r29, 0x3e	; 62
	TCCR1B = (TCCR1B & 0xF8) | (NO_CLOCK);
    1606:	ae e4       	ldi	r26, 0x4E	; 78
    1608:	b0 e0       	ldi	r27, 0x00	; 0
    160a:	ee e4       	ldi	r30, 0x4E	; 78
    160c:	f0 e0       	ldi	r31, 0x00	; 0
    160e:	80 81       	ld	r24, Z
    1610:	88 7f       	andi	r24, 0xF8	; 248
    1612:	8c 93       	st	X, r24
}
    1614:	cf 91       	pop	r28
    1616:	df 91       	pop	r29
    1618:	08 95       	ret

0000161a <Resume_Watch>:
 * Description  : Resume the time on the 7-segment display after pause
 * INPUTS       : void
 * RETURNS      : void
 **************************************************************************/
void Resume_Watch(void)
{
    161a:	df 93       	push	r29
    161c:	cf 93       	push	r28
    161e:	cd b7       	in	r28, 0x3d	; 61
    1620:	de b7       	in	r29, 0x3e	; 62
	TCCR1B = (TCCR1B & 0xF8) | (PRESCALER_1024);
    1622:	ae e4       	ldi	r26, 0x4E	; 78
    1624:	b0 e0       	ldi	r27, 0x00	; 0
    1626:	ee e4       	ldi	r30, 0x4E	; 78
    1628:	f0 e0       	ldi	r31, 0x00	; 0
    162a:	80 81       	ld	r24, Z
    162c:	88 7f       	andi	r24, 0xF8	; 248
    162e:	85 60       	ori	r24, 0x05	; 5
    1630:	8c 93       	st	X, r24
}
    1632:	cf 91       	pop	r28
    1634:	df 91       	pop	r29
    1636:	08 95       	ret

00001638 <Reset_Watch>:
 * Description  : Reset the stop watch and make it count from 0
 * INPUTS       : void
 * RETURNS      : void
 **************************************************************************/
void Reset_Watch(void)
{
    1638:	df 93       	push	r29
    163a:	cf 93       	push	r28
    163c:	cd b7       	in	r28, 0x3d	; 61
    163e:	de b7       	in	r29, 0x3e	; 62
	SECOND = 0;
    1640:	10 92 87 00 	sts	0x0087, r1
	MINUTE = 0;
    1644:	10 92 88 00 	sts	0x0088, r1
	HOUR = 0;
    1648:	10 92 89 00 	sts	0x0089, r1
}
    164c:	cf 91       	pop	r28
    164e:	df 91       	pop	r29
    1650:	08 95       	ret

00001652 <main>:

/*******************************************************************************
 *                               Main                                          *
 *******************************************************************************/
int main(void)
{
    1652:	df 93       	push	r29
    1654:	cf 93       	push	r28
    1656:	cd b7       	in	r28, 0x3d	; 61
    1658:	de b7       	in	r29, 0x3e	; 62
	SEVEN_SEGMENT_init();
    165a:	0e 94 6c 0b 	call	0x16d8	; 0x16d8 <SEVEN_SEGMENT_init>
	INT0_init(FALLING_INTERRUPT);
    165e:	80 e0       	ldi	r24, 0x00	; 0
    1660:	0e 94 d6 06 	call	0xdac	; 0xdac <INT0_init>
	INT1_init(RAISING_INTERRUPT);
    1664:	81 e0       	ldi	r24, 0x01	; 1
    1666:	0e 94 0f 07 	call	0xe1e	; 0xe1e <INT1_init>
	INT2_init(FALLING_INTERRUPT);
    166a:	80 e0       	ldi	r24, 0x00	; 0
    166c:	0e 94 48 07 	call	0xe90	; 0xe90 <INT2_init>
	TIMER1_Set_CallBack(Increment_Watch,1);
    1670:	83 ed       	ldi	r24, 0xD3	; 211
    1672:	9a e0       	ldi	r25, 0x0A	; 10
    1674:	61 e0       	ldi	r22, 0x01	; 1
    1676:	0e 94 6c 14 	call	0x28d8	; 0x28d8 <TIMER1_Set_CallBack>
    External_Interrupt_set_CallBack(Reset_Watch,0);
    167a:	8c e1       	ldi	r24, 0x1C	; 28
    167c:	9b e0       	ldi	r25, 0x0B	; 11
    167e:	60 e0       	ldi	r22, 0x00	; 0
    1680:	0e 94 7a 07 	call	0xef4	; 0xef4 <External_Interrupt_set_CallBack>
    External_Interrupt_set_CallBack(Pause_Watch,1);
    1684:	8f ef       	ldi	r24, 0xFF	; 255
    1686:	9a e0       	ldi	r25, 0x0A	; 10
    1688:	61 e0       	ldi	r22, 0x01	; 1
    168a:	0e 94 7a 07 	call	0xef4	; 0xef4 <External_Interrupt_set_CallBack>
    External_Interrupt_set_CallBack(Resume_Watch,2);
    168e:	8d e0       	ldi	r24, 0x0D	; 13
    1690:	9b e0       	ldi	r25, 0x0B	; 11
    1692:	62 e0       	ldi	r22, 0x02	; 2
    1694:	0e 94 7a 07 	call	0xef4	; 0xef4 <External_Interrupt_set_CallBack>
    PORTB |= (1 <<PB2);                              /* activate internal pull_up resistor for PB2 */
    1698:	a8 e3       	ldi	r26, 0x38	; 56
    169a:	b0 e0       	ldi	r27, 0x00	; 0
    169c:	e8 e3       	ldi	r30, 0x38	; 56
    169e:	f0 e0       	ldi	r31, 0x00	; 0
    16a0:	80 81       	ld	r24, Z
    16a2:	84 60       	ori	r24, 0x04	; 4
    16a4:	8c 93       	st	X, r24
    PORTD |= (1 <<PD2);                              /* activate internal pull_up resistor for PD2 */
    16a6:	a2 e3       	ldi	r26, 0x32	; 50
    16a8:	b0 e0       	ldi	r27, 0x00	; 0
    16aa:	e2 e3       	ldi	r30, 0x32	; 50
    16ac:	f0 e0       	ldi	r31, 0x00	; 0
    16ae:	80 81       	ld	r24, Z
    16b0:	84 60       	ori	r24, 0x04	; 4
    16b2:	8c 93       	st	X, r24
    TIMER1_Init_CTC_Mode(977,NORMAL_PORT,PRESCALER_1024,ENABLE_INTERRUPT);
    16b4:	81 ed       	ldi	r24, 0xD1	; 209
    16b6:	93 e0       	ldi	r25, 0x03	; 3
    16b8:	60 e0       	ldi	r22, 0x00	; 0
    16ba:	45 e0       	ldi	r20, 0x05	; 5
    16bc:	21 e0       	ldi	r18, 0x01	; 1
    16be:	0e 94 4d 13 	call	0x269a	; 0x269a <TIMER1_Init_CTC_Mode>

    while(1)
	{
    	SEVEN_SEGMENT_Display_Number(SECOND,MINUTE,HOUR);
    16c2:	80 91 87 00 	lds	r24, 0x0087
    16c6:	90 91 88 00 	lds	r25, 0x0088
    16ca:	20 91 89 00 	lds	r18, 0x0089
    16ce:	69 2f       	mov	r22, r25
    16d0:	42 2f       	mov	r20, r18
    16d2:	0e 94 ac 0b 	call	0x1758	; 0x1758 <SEVEN_SEGMENT_Display_Number>
    16d6:	f5 cf       	rjmp	.-22     	; 0x16c2 <main+0x70>

000016d8 <SEVEN_SEGMENT_init>:
 *                Display ZERO on SEVEN SEGMENT DISPLAY
 * INPUTS       : void
 * RETURNS      : void
 **************************************************************************/
void SEVEN_SEGMENT_init(void)
{
    16d8:	df 93       	push	r29
    16da:	cf 93       	push	r28
    16dc:	cd b7       	in	r28, 0x3d	; 61
    16de:	de b7       	in	r29, 0x3e	; 62

	GPIO_setupPinDirection(Sev_Segment_Data_PORT_ID, Sev_Segment_Data1_ID, PIN_OUTPUT);
    16e0:	82 e0       	ldi	r24, 0x02	; 2
    16e2:	60 e0       	ldi	r22, 0x00	; 0
    16e4:	41 e0       	ldi	r20, 0x01	; 1
    16e6:	0e 94 95 07 	call	0xf2a	; 0xf2a <GPIO_setupPinDirection>
	GPIO_setupPinDirection(Sev_Segment_Data_PORT_ID, Sev_Segment_Data2_ID, PIN_OUTPUT);
    16ea:	82 e0       	ldi	r24, 0x02	; 2
    16ec:	61 e0       	ldi	r22, 0x01	; 1
    16ee:	41 e0       	ldi	r20, 0x01	; 1
    16f0:	0e 94 95 07 	call	0xf2a	; 0xf2a <GPIO_setupPinDirection>
	GPIO_setupPinDirection(Sev_Segment_Data_PORT_ID, Sev_Segment_Data3_ID, PIN_OUTPUT);
    16f4:	82 e0       	ldi	r24, 0x02	; 2
    16f6:	62 e0       	ldi	r22, 0x02	; 2
    16f8:	41 e0       	ldi	r20, 0x01	; 1
    16fa:	0e 94 95 07 	call	0xf2a	; 0xf2a <GPIO_setupPinDirection>
	GPIO_setupPinDirection(Sev_Segment_Data_PORT_ID, Sev_Segment_Data4_ID, PIN_OUTPUT);
    16fe:	82 e0       	ldi	r24, 0x02	; 2
    1700:	63 e0       	ldi	r22, 0x03	; 3
    1702:	41 e0       	ldi	r20, 0x01	; 1
    1704:	0e 94 95 07 	call	0xf2a	; 0xf2a <GPIO_setupPinDirection>

	GPIO_setupPinDirection(Sev_Segment_Common_PORT_ID, Sev_Segment_Common0_ID, PIN_OUTPUT);
    1708:	80 e0       	ldi	r24, 0x00	; 0
    170a:	60 e0       	ldi	r22, 0x00	; 0
    170c:	41 e0       	ldi	r20, 0x01	; 1
    170e:	0e 94 95 07 	call	0xf2a	; 0xf2a <GPIO_setupPinDirection>
	GPIO_setupPinDirection(Sev_Segment_Common_PORT_ID, Sev_Segment_Common1_ID, PIN_OUTPUT);
    1712:	80 e0       	ldi	r24, 0x00	; 0
    1714:	61 e0       	ldi	r22, 0x01	; 1
    1716:	41 e0       	ldi	r20, 0x01	; 1
    1718:	0e 94 95 07 	call	0xf2a	; 0xf2a <GPIO_setupPinDirection>
	GPIO_setupPinDirection(Sev_Segment_Common_PORT_ID, Sev_Segment_Common2_ID, PIN_OUTPUT);
    171c:	80 e0       	ldi	r24, 0x00	; 0
    171e:	62 e0       	ldi	r22, 0x02	; 2
    1720:	41 e0       	ldi	r20, 0x01	; 1
    1722:	0e 94 95 07 	call	0xf2a	; 0xf2a <GPIO_setupPinDirection>
	GPIO_setupPinDirection(Sev_Segment_Common_PORT_ID, Sev_Segment_Common3_ID, PIN_OUTPUT);
    1726:	80 e0       	ldi	r24, 0x00	; 0
    1728:	63 e0       	ldi	r22, 0x03	; 3
    172a:	41 e0       	ldi	r20, 0x01	; 1
    172c:	0e 94 95 07 	call	0xf2a	; 0xf2a <GPIO_setupPinDirection>
	GPIO_setupPinDirection(Sev_Segment_Common_PORT_ID, Sev_Segment_Common4_ID, PIN_OUTPUT);
    1730:	80 e0       	ldi	r24, 0x00	; 0
    1732:	64 e0       	ldi	r22, 0x04	; 4
    1734:	41 e0       	ldi	r20, 0x01	; 1
    1736:	0e 94 95 07 	call	0xf2a	; 0xf2a <GPIO_setupPinDirection>
	GPIO_setupPinDirection(Sev_Segment_Common_PORT_ID, Sev_Segment_Common5_ID, PIN_OUTPUT);
    173a:	80 e0       	ldi	r24, 0x00	; 0
    173c:	65 e0       	ldi	r22, 0x05	; 5
    173e:	41 e0       	ldi	r20, 0x01	; 1
    1740:	0e 94 95 07 	call	0xf2a	; 0xf2a <GPIO_setupPinDirection>

	/* Display 0 at the begining */
	PORTC = PORTC & (0xF0);
    1744:	a5 e3       	ldi	r26, 0x35	; 53
    1746:	b0 e0       	ldi	r27, 0x00	; 0
    1748:	e5 e3       	ldi	r30, 0x35	; 53
    174a:	f0 e0       	ldi	r31, 0x00	; 0
    174c:	80 81       	ld	r24, Z
    174e:	80 7f       	andi	r24, 0xF0	; 240
    1750:	8c 93       	st	X, r24
}
    1752:	cf 91       	pop	r28
    1754:	df 91       	pop	r29
    1756:	08 95       	ret

00001758 <SEVEN_SEGMENT_Display_Number>:
 *                SEVEN SEGMENTS DISPLAY
 * INPUTS       : Second, Minute and Hour
 * RETURNS      : void
 **************************************************************************/
void SEVEN_SEGMENT_Display_Number(uint8 Second,uint8 Minute,uint8 Hour)
{
    1758:	0f 93       	push	r16
    175a:	1f 93       	push	r17
    175c:	df 93       	push	r29
    175e:	cf 93       	push	r28
    1760:	cd b7       	in	r28, 0x3d	; 61
    1762:	de b7       	in	r29, 0x3e	; 62
    1764:	c4 59       	subi	r28, 0x94	; 148
    1766:	d0 40       	sbci	r29, 0x00	; 0
    1768:	0f b6       	in	r0, 0x3f	; 63
    176a:	f8 94       	cli
    176c:	de bf       	out	0x3e, r29	; 62
    176e:	0f be       	out	0x3f, r0	; 63
    1770:	cd bf       	out	0x3d, r28	; 61
    1772:	fe 01       	movw	r30, r28
    1774:	ee 56       	subi	r30, 0x6E	; 110
    1776:	ff 4f       	sbci	r31, 0xFF	; 255
    1778:	80 83       	st	Z, r24
    177a:	fe 01       	movw	r30, r28
    177c:	ed 56       	subi	r30, 0x6D	; 109
    177e:	ff 4f       	sbci	r31, 0xFF	; 255
    1780:	60 83       	st	Z, r22
    1782:	fe 01       	movw	r30, r28
    1784:	ec 56       	subi	r30, 0x6C	; 108
    1786:	ff 4f       	sbci	r31, 0xFF	; 255
    1788:	40 83       	st	Z, r20
	uint8 displayed_num;

	displayed_num = (uint8)(Second % 10);                     /* Turn on the First 7-segment by setting its common pin and Turn off rest */
    178a:	de 01       	movw	r26, r28
    178c:	af 56       	subi	r26, 0x6F	; 111
    178e:	bf 4f       	sbci	r27, 0xFF	; 255
    1790:	fe 01       	movw	r30, r28
    1792:	ee 56       	subi	r30, 0x6E	; 110
    1794:	ff 4f       	sbci	r31, 0xFF	; 255
    1796:	80 81       	ld	r24, Z
    1798:	9a e0       	ldi	r25, 0x0A	; 10
    179a:	69 2f       	mov	r22, r25
    179c:	0e 94 87 14 	call	0x290e	; 0x290e <__udivmodqi4>
    17a0:	89 2f       	mov	r24, r25
    17a2:	8c 93       	st	X, r24
	PORTA = (1 << 0);									      /* display the first digit of the value of the Seconds */
    17a4:	eb e3       	ldi	r30, 0x3B	; 59
    17a6:	f0 e0       	ldi	r31, 0x00	; 0
    17a8:	81 e0       	ldi	r24, 0x01	; 1
    17aa:	80 83       	st	Z, r24
	PORTC = (PORTC & 0xF0) | (displayed_num & 0x0F);
    17ac:	a5 e3       	ldi	r26, 0x35	; 53
    17ae:	b0 e0       	ldi	r27, 0x00	; 0
    17b0:	e5 e3       	ldi	r30, 0x35	; 53
    17b2:	f0 e0       	ldi	r31, 0x00	; 0
    17b4:	80 81       	ld	r24, Z
    17b6:	98 2f       	mov	r25, r24
    17b8:	90 7f       	andi	r25, 0xF0	; 240
    17ba:	fe 01       	movw	r30, r28
    17bc:	ef 56       	subi	r30, 0x6F	; 111
    17be:	ff 4f       	sbci	r31, 0xFF	; 255
    17c0:	80 81       	ld	r24, Z
    17c2:	8f 70       	andi	r24, 0x0F	; 15
    17c4:	89 2b       	or	r24, r25
    17c6:	8c 93       	st	X, r24
    17c8:	fe 01       	movw	r30, r28
    17ca:	e3 57       	subi	r30, 0x73	; 115
    17cc:	ff 4f       	sbci	r31, 0xFF	; 255
    17ce:	80 e0       	ldi	r24, 0x00	; 0
    17d0:	90 e0       	ldi	r25, 0x00	; 0
    17d2:	a0 e2       	ldi	r26, 0x20	; 32
    17d4:	b1 e4       	ldi	r27, 0x41	; 65
    17d6:	80 83       	st	Z, r24
    17d8:	91 83       	std	Z+1, r25	; 0x01
    17da:	a2 83       	std	Z+2, r26	; 0x02
    17dc:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    17de:	8e 01       	movw	r16, r28
    17e0:	07 57       	subi	r16, 0x77	; 119
    17e2:	1f 4f       	sbci	r17, 0xFF	; 255
    17e4:	fe 01       	movw	r30, r28
    17e6:	e3 57       	subi	r30, 0x73	; 115
    17e8:	ff 4f       	sbci	r31, 0xFF	; 255
    17ea:	60 81       	ld	r22, Z
    17ec:	71 81       	ldd	r23, Z+1	; 0x01
    17ee:	82 81       	ldd	r24, Z+2	; 0x02
    17f0:	93 81       	ldd	r25, Z+3	; 0x03
    17f2:	2b ea       	ldi	r18, 0xAB	; 171
    17f4:	3a ea       	ldi	r19, 0xAA	; 170
    17f6:	4a ea       	ldi	r20, 0xAA	; 170
    17f8:	5e e3       	ldi	r21, 0x3E	; 62
    17fa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    17fe:	dc 01       	movw	r26, r24
    1800:	cb 01       	movw	r24, r22
    1802:	f8 01       	movw	r30, r16
    1804:	80 83       	st	Z, r24
    1806:	91 83       	std	Z+1, r25	; 0x01
    1808:	a2 83       	std	Z+2, r26	; 0x02
    180a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    180c:	fe 01       	movw	r30, r28
    180e:	e7 57       	subi	r30, 0x77	; 119
    1810:	ff 4f       	sbci	r31, 0xFF	; 255
    1812:	60 81       	ld	r22, Z
    1814:	71 81       	ldd	r23, Z+1	; 0x01
    1816:	82 81       	ldd	r24, Z+2	; 0x02
    1818:	93 81       	ldd	r25, Z+3	; 0x03
    181a:	20 e0       	ldi	r18, 0x00	; 0
    181c:	30 e0       	ldi	r19, 0x00	; 0
    181e:	40 e8       	ldi	r20, 0x80	; 128
    1820:	5f e3       	ldi	r21, 0x3F	; 63
    1822:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1826:	88 23       	and	r24, r24
    1828:	34 f4       	brge	.+12     	; 0x1836 <SEVEN_SEGMENT_Display_Number+0xde>
		__ticks = 1;
    182a:	fe 01       	movw	r30, r28
    182c:	e8 57       	subi	r30, 0x78	; 120
    182e:	ff 4f       	sbci	r31, 0xFF	; 255
    1830:	81 e0       	ldi	r24, 0x01	; 1
    1832:	80 83       	st	Z, r24
    1834:	e0 c0       	rjmp	.+448    	; 0x19f6 <SEVEN_SEGMENT_Display_Number+0x29e>
	else if (__tmp > 255)
    1836:	fe 01       	movw	r30, r28
    1838:	e7 57       	subi	r30, 0x77	; 119
    183a:	ff 4f       	sbci	r31, 0xFF	; 255
    183c:	60 81       	ld	r22, Z
    183e:	71 81       	ldd	r23, Z+1	; 0x01
    1840:	82 81       	ldd	r24, Z+2	; 0x02
    1842:	93 81       	ldd	r25, Z+3	; 0x03
    1844:	20 e0       	ldi	r18, 0x00	; 0
    1846:	30 e0       	ldi	r19, 0x00	; 0
    1848:	4f e7       	ldi	r20, 0x7F	; 127
    184a:	53 e4       	ldi	r21, 0x43	; 67
    184c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1850:	18 16       	cp	r1, r24
    1852:	0c f0       	brlt	.+2      	; 0x1856 <SEVEN_SEGMENT_Display_Number+0xfe>
    1854:	c0 c0       	rjmp	.+384    	; 0x19d6 <SEVEN_SEGMENT_Display_Number+0x27e>
	{
		_delay_ms(__us / 1000.0);
    1856:	fe 01       	movw	r30, r28
    1858:	e3 57       	subi	r30, 0x73	; 115
    185a:	ff 4f       	sbci	r31, 0xFF	; 255
    185c:	60 81       	ld	r22, Z
    185e:	71 81       	ldd	r23, Z+1	; 0x01
    1860:	82 81       	ldd	r24, Z+2	; 0x02
    1862:	93 81       	ldd	r25, Z+3	; 0x03
    1864:	20 e0       	ldi	r18, 0x00	; 0
    1866:	30 e0       	ldi	r19, 0x00	; 0
    1868:	4a e7       	ldi	r20, 0x7A	; 122
    186a:	54 e4       	ldi	r21, 0x44	; 68
    186c:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1870:	dc 01       	movw	r26, r24
    1872:	cb 01       	movw	r24, r22
    1874:	fe 01       	movw	r30, r28
    1876:	ec 57       	subi	r30, 0x7C	; 124
    1878:	ff 4f       	sbci	r31, 0xFF	; 255
    187a:	80 83       	st	Z, r24
    187c:	91 83       	std	Z+1, r25	; 0x01
    187e:	a2 83       	std	Z+2, r26	; 0x02
    1880:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1882:	8e 01       	movw	r16, r28
    1884:	00 58       	subi	r16, 0x80	; 128
    1886:	1f 4f       	sbci	r17, 0xFF	; 255
    1888:	fe 01       	movw	r30, r28
    188a:	ec 57       	subi	r30, 0x7C	; 124
    188c:	ff 4f       	sbci	r31, 0xFF	; 255
    188e:	60 81       	ld	r22, Z
    1890:	71 81       	ldd	r23, Z+1	; 0x01
    1892:	82 81       	ldd	r24, Z+2	; 0x02
    1894:	93 81       	ldd	r25, Z+3	; 0x03
    1896:	20 e0       	ldi	r18, 0x00	; 0
    1898:	30 e0       	ldi	r19, 0x00	; 0
    189a:	4a e7       	ldi	r20, 0x7A	; 122
    189c:	53 e4       	ldi	r21, 0x43	; 67
    189e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    18a2:	dc 01       	movw	r26, r24
    18a4:	cb 01       	movw	r24, r22
    18a6:	f8 01       	movw	r30, r16
    18a8:	80 83       	st	Z, r24
    18aa:	91 83       	std	Z+1, r25	; 0x01
    18ac:	a2 83       	std	Z+2, r26	; 0x02
    18ae:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    18b0:	fe 01       	movw	r30, r28
    18b2:	e0 58       	subi	r30, 0x80	; 128
    18b4:	ff 4f       	sbci	r31, 0xFF	; 255
    18b6:	60 81       	ld	r22, Z
    18b8:	71 81       	ldd	r23, Z+1	; 0x01
    18ba:	82 81       	ldd	r24, Z+2	; 0x02
    18bc:	93 81       	ldd	r25, Z+3	; 0x03
    18be:	20 e0       	ldi	r18, 0x00	; 0
    18c0:	30 e0       	ldi	r19, 0x00	; 0
    18c2:	40 e8       	ldi	r20, 0x80	; 128
    18c4:	5f e3       	ldi	r21, 0x3F	; 63
    18c6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    18ca:	88 23       	and	r24, r24
    18cc:	44 f4       	brge	.+16     	; 0x18de <SEVEN_SEGMENT_Display_Number+0x186>
		__ticks = 1;
    18ce:	fe 01       	movw	r30, r28
    18d0:	e2 58       	subi	r30, 0x82	; 130
    18d2:	ff 4f       	sbci	r31, 0xFF	; 255
    18d4:	81 e0       	ldi	r24, 0x01	; 1
    18d6:	90 e0       	ldi	r25, 0x00	; 0
    18d8:	91 83       	std	Z+1, r25	; 0x01
    18da:	80 83       	st	Z, r24
    18dc:	64 c0       	rjmp	.+200    	; 0x19a6 <SEVEN_SEGMENT_Display_Number+0x24e>
	else if (__tmp > 65535)
    18de:	fe 01       	movw	r30, r28
    18e0:	e0 58       	subi	r30, 0x80	; 128
    18e2:	ff 4f       	sbci	r31, 0xFF	; 255
    18e4:	60 81       	ld	r22, Z
    18e6:	71 81       	ldd	r23, Z+1	; 0x01
    18e8:	82 81       	ldd	r24, Z+2	; 0x02
    18ea:	93 81       	ldd	r25, Z+3	; 0x03
    18ec:	20 e0       	ldi	r18, 0x00	; 0
    18ee:	3f ef       	ldi	r19, 0xFF	; 255
    18f0:	4f e7       	ldi	r20, 0x7F	; 127
    18f2:	57 e4       	ldi	r21, 0x47	; 71
    18f4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    18f8:	18 16       	cp	r1, r24
    18fa:	0c f0       	brlt	.+2      	; 0x18fe <SEVEN_SEGMENT_Display_Number+0x1a6>
    18fc:	43 c0       	rjmp	.+134    	; 0x1984 <SEVEN_SEGMENT_Display_Number+0x22c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    18fe:	fe 01       	movw	r30, r28
    1900:	ec 57       	subi	r30, 0x7C	; 124
    1902:	ff 4f       	sbci	r31, 0xFF	; 255
    1904:	60 81       	ld	r22, Z
    1906:	71 81       	ldd	r23, Z+1	; 0x01
    1908:	82 81       	ldd	r24, Z+2	; 0x02
    190a:	93 81       	ldd	r25, Z+3	; 0x03
    190c:	20 e0       	ldi	r18, 0x00	; 0
    190e:	30 e0       	ldi	r19, 0x00	; 0
    1910:	40 e2       	ldi	r20, 0x20	; 32
    1912:	51 e4       	ldi	r21, 0x41	; 65
    1914:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1918:	dc 01       	movw	r26, r24
    191a:	cb 01       	movw	r24, r22
    191c:	8e 01       	movw	r16, r28
    191e:	02 58       	subi	r16, 0x82	; 130
    1920:	1f 4f       	sbci	r17, 0xFF	; 255
    1922:	bc 01       	movw	r22, r24
    1924:	cd 01       	movw	r24, r26
    1926:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    192a:	dc 01       	movw	r26, r24
    192c:	cb 01       	movw	r24, r22
    192e:	f8 01       	movw	r30, r16
    1930:	91 83       	std	Z+1, r25	; 0x01
    1932:	80 83       	st	Z, r24
    1934:	1f c0       	rjmp	.+62     	; 0x1974 <SEVEN_SEGMENT_Display_Number+0x21c>
    1936:	fe 01       	movw	r30, r28
    1938:	e4 58       	subi	r30, 0x84	; 132
    193a:	ff 4f       	sbci	r31, 0xFF	; 255
    193c:	89 e1       	ldi	r24, 0x19	; 25
    193e:	90 e0       	ldi	r25, 0x00	; 0
    1940:	91 83       	std	Z+1, r25	; 0x01
    1942:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1944:	fe 01       	movw	r30, r28
    1946:	e4 58       	subi	r30, 0x84	; 132
    1948:	ff 4f       	sbci	r31, 0xFF	; 255
    194a:	80 81       	ld	r24, Z
    194c:	91 81       	ldd	r25, Z+1	; 0x01
    194e:	01 97       	sbiw	r24, 0x01	; 1
    1950:	f1 f7       	brne	.-4      	; 0x194e <SEVEN_SEGMENT_Display_Number+0x1f6>
    1952:	fe 01       	movw	r30, r28
    1954:	e4 58       	subi	r30, 0x84	; 132
    1956:	ff 4f       	sbci	r31, 0xFF	; 255
    1958:	91 83       	std	Z+1, r25	; 0x01
    195a:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    195c:	de 01       	movw	r26, r28
    195e:	a2 58       	subi	r26, 0x82	; 130
    1960:	bf 4f       	sbci	r27, 0xFF	; 255
    1962:	fe 01       	movw	r30, r28
    1964:	e2 58       	subi	r30, 0x82	; 130
    1966:	ff 4f       	sbci	r31, 0xFF	; 255
    1968:	80 81       	ld	r24, Z
    196a:	91 81       	ldd	r25, Z+1	; 0x01
    196c:	01 97       	sbiw	r24, 0x01	; 1
    196e:	11 96       	adiw	r26, 0x01	; 1
    1970:	9c 93       	st	X, r25
    1972:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1974:	fe 01       	movw	r30, r28
    1976:	e2 58       	subi	r30, 0x82	; 130
    1978:	ff 4f       	sbci	r31, 0xFF	; 255
    197a:	80 81       	ld	r24, Z
    197c:	91 81       	ldd	r25, Z+1	; 0x01
    197e:	00 97       	sbiw	r24, 0x00	; 0
    1980:	d1 f6       	brne	.-76     	; 0x1936 <SEVEN_SEGMENT_Display_Number+0x1de>
    1982:	4b c0       	rjmp	.+150    	; 0x1a1a <SEVEN_SEGMENT_Display_Number+0x2c2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1984:	8e 01       	movw	r16, r28
    1986:	02 58       	subi	r16, 0x82	; 130
    1988:	1f 4f       	sbci	r17, 0xFF	; 255
    198a:	fe 01       	movw	r30, r28
    198c:	e0 58       	subi	r30, 0x80	; 128
    198e:	ff 4f       	sbci	r31, 0xFF	; 255
    1990:	60 81       	ld	r22, Z
    1992:	71 81       	ldd	r23, Z+1	; 0x01
    1994:	82 81       	ldd	r24, Z+2	; 0x02
    1996:	93 81       	ldd	r25, Z+3	; 0x03
    1998:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    199c:	dc 01       	movw	r26, r24
    199e:	cb 01       	movw	r24, r22
    19a0:	f8 01       	movw	r30, r16
    19a2:	91 83       	std	Z+1, r25	; 0x01
    19a4:	80 83       	st	Z, r24
    19a6:	de 01       	movw	r26, r28
    19a8:	a6 58       	subi	r26, 0x86	; 134
    19aa:	bf 4f       	sbci	r27, 0xFF	; 255
    19ac:	fe 01       	movw	r30, r28
    19ae:	e2 58       	subi	r30, 0x82	; 130
    19b0:	ff 4f       	sbci	r31, 0xFF	; 255
    19b2:	80 81       	ld	r24, Z
    19b4:	91 81       	ldd	r25, Z+1	; 0x01
    19b6:	11 96       	adiw	r26, 0x01	; 1
    19b8:	9c 93       	st	X, r25
    19ba:	8e 93       	st	-X, r24
    19bc:	fe 01       	movw	r30, r28
    19be:	e6 58       	subi	r30, 0x86	; 134
    19c0:	ff 4f       	sbci	r31, 0xFF	; 255
    19c2:	80 81       	ld	r24, Z
    19c4:	91 81       	ldd	r25, Z+1	; 0x01
    19c6:	01 97       	sbiw	r24, 0x01	; 1
    19c8:	f1 f7       	brne	.-4      	; 0x19c6 <SEVEN_SEGMENT_Display_Number+0x26e>
    19ca:	fe 01       	movw	r30, r28
    19cc:	e6 58       	subi	r30, 0x86	; 134
    19ce:	ff 4f       	sbci	r31, 0xFF	; 255
    19d0:	91 83       	std	Z+1, r25	; 0x01
    19d2:	80 83       	st	Z, r24
    19d4:	22 c0       	rjmp	.+68     	; 0x1a1a <SEVEN_SEGMENT_Display_Number+0x2c2>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    19d6:	8e 01       	movw	r16, r28
    19d8:	08 57       	subi	r16, 0x78	; 120
    19da:	1f 4f       	sbci	r17, 0xFF	; 255
    19dc:	fe 01       	movw	r30, r28
    19de:	e7 57       	subi	r30, 0x77	; 119
    19e0:	ff 4f       	sbci	r31, 0xFF	; 255
    19e2:	60 81       	ld	r22, Z
    19e4:	71 81       	ldd	r23, Z+1	; 0x01
    19e6:	82 81       	ldd	r24, Z+2	; 0x02
    19e8:	93 81       	ldd	r25, Z+3	; 0x03
    19ea:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    19ee:	dc 01       	movw	r26, r24
    19f0:	cb 01       	movw	r24, r22
    19f2:	f8 01       	movw	r30, r16
    19f4:	80 83       	st	Z, r24
    19f6:	de 01       	movw	r26, r28
    19f8:	a7 58       	subi	r26, 0x87	; 135
    19fa:	bf 4f       	sbci	r27, 0xFF	; 255
    19fc:	fe 01       	movw	r30, r28
    19fe:	e8 57       	subi	r30, 0x78	; 120
    1a00:	ff 4f       	sbci	r31, 0xFF	; 255
    1a02:	80 81       	ld	r24, Z
    1a04:	8c 93       	st	X, r24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1a06:	fe 01       	movw	r30, r28
    1a08:	e7 58       	subi	r30, 0x87	; 135
    1a0a:	ff 4f       	sbci	r31, 0xFF	; 255
    1a0c:	80 81       	ld	r24, Z
    1a0e:	8a 95       	dec	r24
    1a10:	f1 f7       	brne	.-4      	; 0x1a0e <SEVEN_SEGMENT_Display_Number+0x2b6>
    1a12:	fe 01       	movw	r30, r28
    1a14:	e7 58       	subi	r30, 0x87	; 135
    1a16:	ff 4f       	sbci	r31, 0xFF	; 255
    1a18:	80 83       	st	Z, r24
	_delay_us(10);

	displayed_num = (uint8)(Second / 10);                     /* Turn on the Second 7-segment by setting its common pin and Turn off rest */
    1a1a:	de 01       	movw	r26, r28
    1a1c:	af 56       	subi	r26, 0x6F	; 111
    1a1e:	bf 4f       	sbci	r27, 0xFF	; 255
    1a20:	fe 01       	movw	r30, r28
    1a22:	ee 56       	subi	r30, 0x6E	; 110
    1a24:	ff 4f       	sbci	r31, 0xFF	; 255
    1a26:	80 81       	ld	r24, Z
    1a28:	9a e0       	ldi	r25, 0x0A	; 10
    1a2a:	69 2f       	mov	r22, r25
    1a2c:	0e 94 87 14 	call	0x290e	; 0x290e <__udivmodqi4>
    1a30:	8c 93       	st	X, r24
	PORTA = (1 << 1);                                         /* display the Second digit of the value of the Seconds */
    1a32:	eb e3       	ldi	r30, 0x3B	; 59
    1a34:	f0 e0       	ldi	r31, 0x00	; 0
    1a36:	82 e0       	ldi	r24, 0x02	; 2
    1a38:	80 83       	st	Z, r24
	PORTC = (PORTC & 0xF0) | (displayed_num & 0x0F);
    1a3a:	a5 e3       	ldi	r26, 0x35	; 53
    1a3c:	b0 e0       	ldi	r27, 0x00	; 0
    1a3e:	e5 e3       	ldi	r30, 0x35	; 53
    1a40:	f0 e0       	ldi	r31, 0x00	; 0
    1a42:	80 81       	ld	r24, Z
    1a44:	98 2f       	mov	r25, r24
    1a46:	90 7f       	andi	r25, 0xF0	; 240
    1a48:	fe 01       	movw	r30, r28
    1a4a:	ef 56       	subi	r30, 0x6F	; 111
    1a4c:	ff 4f       	sbci	r31, 0xFF	; 255
    1a4e:	80 81       	ld	r24, Z
    1a50:	8f 70       	andi	r24, 0x0F	; 15
    1a52:	89 2b       	or	r24, r25
    1a54:	8c 93       	st	X, r24
    1a56:	fe 01       	movw	r30, r28
    1a58:	eb 58       	subi	r30, 0x8B	; 139
    1a5a:	ff 4f       	sbci	r31, 0xFF	; 255
    1a5c:	80 e0       	ldi	r24, 0x00	; 0
    1a5e:	90 e0       	ldi	r25, 0x00	; 0
    1a60:	a0 e2       	ldi	r26, 0x20	; 32
    1a62:	b1 e4       	ldi	r27, 0x41	; 65
    1a64:	80 83       	st	Z, r24
    1a66:	91 83       	std	Z+1, r25	; 0x01
    1a68:	a2 83       	std	Z+2, r26	; 0x02
    1a6a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1a6c:	8e 01       	movw	r16, r28
    1a6e:	0f 58       	subi	r16, 0x8F	; 143
    1a70:	1f 4f       	sbci	r17, 0xFF	; 255
    1a72:	fe 01       	movw	r30, r28
    1a74:	eb 58       	subi	r30, 0x8B	; 139
    1a76:	ff 4f       	sbci	r31, 0xFF	; 255
    1a78:	60 81       	ld	r22, Z
    1a7a:	71 81       	ldd	r23, Z+1	; 0x01
    1a7c:	82 81       	ldd	r24, Z+2	; 0x02
    1a7e:	93 81       	ldd	r25, Z+3	; 0x03
    1a80:	2b ea       	ldi	r18, 0xAB	; 171
    1a82:	3a ea       	ldi	r19, 0xAA	; 170
    1a84:	4a ea       	ldi	r20, 0xAA	; 170
    1a86:	5e e3       	ldi	r21, 0x3E	; 62
    1a88:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a8c:	dc 01       	movw	r26, r24
    1a8e:	cb 01       	movw	r24, r22
    1a90:	f8 01       	movw	r30, r16
    1a92:	80 83       	st	Z, r24
    1a94:	91 83       	std	Z+1, r25	; 0x01
    1a96:	a2 83       	std	Z+2, r26	; 0x02
    1a98:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1a9a:	fe 01       	movw	r30, r28
    1a9c:	ef 58       	subi	r30, 0x8F	; 143
    1a9e:	ff 4f       	sbci	r31, 0xFF	; 255
    1aa0:	60 81       	ld	r22, Z
    1aa2:	71 81       	ldd	r23, Z+1	; 0x01
    1aa4:	82 81       	ldd	r24, Z+2	; 0x02
    1aa6:	93 81       	ldd	r25, Z+3	; 0x03
    1aa8:	20 e0       	ldi	r18, 0x00	; 0
    1aaa:	30 e0       	ldi	r19, 0x00	; 0
    1aac:	40 e8       	ldi	r20, 0x80	; 128
    1aae:	5f e3       	ldi	r21, 0x3F	; 63
    1ab0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1ab4:	88 23       	and	r24, r24
    1ab6:	34 f4       	brge	.+12     	; 0x1ac4 <SEVEN_SEGMENT_Display_Number+0x36c>
		__ticks = 1;
    1ab8:	fe 01       	movw	r30, r28
    1aba:	e0 59       	subi	r30, 0x90	; 144
    1abc:	ff 4f       	sbci	r31, 0xFF	; 255
    1abe:	81 e0       	ldi	r24, 0x01	; 1
    1ac0:	80 83       	st	Z, r24
    1ac2:	e0 c0       	rjmp	.+448    	; 0x1c84 <SEVEN_SEGMENT_Display_Number+0x52c>
	else if (__tmp > 255)
    1ac4:	fe 01       	movw	r30, r28
    1ac6:	ef 58       	subi	r30, 0x8F	; 143
    1ac8:	ff 4f       	sbci	r31, 0xFF	; 255
    1aca:	60 81       	ld	r22, Z
    1acc:	71 81       	ldd	r23, Z+1	; 0x01
    1ace:	82 81       	ldd	r24, Z+2	; 0x02
    1ad0:	93 81       	ldd	r25, Z+3	; 0x03
    1ad2:	20 e0       	ldi	r18, 0x00	; 0
    1ad4:	30 e0       	ldi	r19, 0x00	; 0
    1ad6:	4f e7       	ldi	r20, 0x7F	; 127
    1ad8:	53 e4       	ldi	r21, 0x43	; 67
    1ada:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1ade:	18 16       	cp	r1, r24
    1ae0:	0c f0       	brlt	.+2      	; 0x1ae4 <SEVEN_SEGMENT_Display_Number+0x38c>
    1ae2:	c0 c0       	rjmp	.+384    	; 0x1c64 <SEVEN_SEGMENT_Display_Number+0x50c>
	{
		_delay_ms(__us / 1000.0);
    1ae4:	fe 01       	movw	r30, r28
    1ae6:	eb 58       	subi	r30, 0x8B	; 139
    1ae8:	ff 4f       	sbci	r31, 0xFF	; 255
    1aea:	60 81       	ld	r22, Z
    1aec:	71 81       	ldd	r23, Z+1	; 0x01
    1aee:	82 81       	ldd	r24, Z+2	; 0x02
    1af0:	93 81       	ldd	r25, Z+3	; 0x03
    1af2:	20 e0       	ldi	r18, 0x00	; 0
    1af4:	30 e0       	ldi	r19, 0x00	; 0
    1af6:	4a e7       	ldi	r20, 0x7A	; 122
    1af8:	54 e4       	ldi	r21, 0x44	; 68
    1afa:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1afe:	dc 01       	movw	r26, r24
    1b00:	cb 01       	movw	r24, r22
    1b02:	fe 01       	movw	r30, r28
    1b04:	e4 59       	subi	r30, 0x94	; 148
    1b06:	ff 4f       	sbci	r31, 0xFF	; 255
    1b08:	80 83       	st	Z, r24
    1b0a:	91 83       	std	Z+1, r25	; 0x01
    1b0c:	a2 83       	std	Z+2, r26	; 0x02
    1b0e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b10:	8e 01       	movw	r16, r28
    1b12:	08 59       	subi	r16, 0x98	; 152
    1b14:	1f 4f       	sbci	r17, 0xFF	; 255
    1b16:	fe 01       	movw	r30, r28
    1b18:	e4 59       	subi	r30, 0x94	; 148
    1b1a:	ff 4f       	sbci	r31, 0xFF	; 255
    1b1c:	60 81       	ld	r22, Z
    1b1e:	71 81       	ldd	r23, Z+1	; 0x01
    1b20:	82 81       	ldd	r24, Z+2	; 0x02
    1b22:	93 81       	ldd	r25, Z+3	; 0x03
    1b24:	20 e0       	ldi	r18, 0x00	; 0
    1b26:	30 e0       	ldi	r19, 0x00	; 0
    1b28:	4a e7       	ldi	r20, 0x7A	; 122
    1b2a:	53 e4       	ldi	r21, 0x43	; 67
    1b2c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b30:	dc 01       	movw	r26, r24
    1b32:	cb 01       	movw	r24, r22
    1b34:	f8 01       	movw	r30, r16
    1b36:	80 83       	st	Z, r24
    1b38:	91 83       	std	Z+1, r25	; 0x01
    1b3a:	a2 83       	std	Z+2, r26	; 0x02
    1b3c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1b3e:	fe 01       	movw	r30, r28
    1b40:	e8 59       	subi	r30, 0x98	; 152
    1b42:	ff 4f       	sbci	r31, 0xFF	; 255
    1b44:	60 81       	ld	r22, Z
    1b46:	71 81       	ldd	r23, Z+1	; 0x01
    1b48:	82 81       	ldd	r24, Z+2	; 0x02
    1b4a:	93 81       	ldd	r25, Z+3	; 0x03
    1b4c:	20 e0       	ldi	r18, 0x00	; 0
    1b4e:	30 e0       	ldi	r19, 0x00	; 0
    1b50:	40 e8       	ldi	r20, 0x80	; 128
    1b52:	5f e3       	ldi	r21, 0x3F	; 63
    1b54:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1b58:	88 23       	and	r24, r24
    1b5a:	44 f4       	brge	.+16     	; 0x1b6c <SEVEN_SEGMENT_Display_Number+0x414>
		__ticks = 1;
    1b5c:	fe 01       	movw	r30, r28
    1b5e:	ea 59       	subi	r30, 0x9A	; 154
    1b60:	ff 4f       	sbci	r31, 0xFF	; 255
    1b62:	81 e0       	ldi	r24, 0x01	; 1
    1b64:	90 e0       	ldi	r25, 0x00	; 0
    1b66:	91 83       	std	Z+1, r25	; 0x01
    1b68:	80 83       	st	Z, r24
    1b6a:	64 c0       	rjmp	.+200    	; 0x1c34 <SEVEN_SEGMENT_Display_Number+0x4dc>
	else if (__tmp > 65535)
    1b6c:	fe 01       	movw	r30, r28
    1b6e:	e8 59       	subi	r30, 0x98	; 152
    1b70:	ff 4f       	sbci	r31, 0xFF	; 255
    1b72:	60 81       	ld	r22, Z
    1b74:	71 81       	ldd	r23, Z+1	; 0x01
    1b76:	82 81       	ldd	r24, Z+2	; 0x02
    1b78:	93 81       	ldd	r25, Z+3	; 0x03
    1b7a:	20 e0       	ldi	r18, 0x00	; 0
    1b7c:	3f ef       	ldi	r19, 0xFF	; 255
    1b7e:	4f e7       	ldi	r20, 0x7F	; 127
    1b80:	57 e4       	ldi	r21, 0x47	; 71
    1b82:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1b86:	18 16       	cp	r1, r24
    1b88:	0c f0       	brlt	.+2      	; 0x1b8c <SEVEN_SEGMENT_Display_Number+0x434>
    1b8a:	43 c0       	rjmp	.+134    	; 0x1c12 <SEVEN_SEGMENT_Display_Number+0x4ba>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b8c:	fe 01       	movw	r30, r28
    1b8e:	e4 59       	subi	r30, 0x94	; 148
    1b90:	ff 4f       	sbci	r31, 0xFF	; 255
    1b92:	60 81       	ld	r22, Z
    1b94:	71 81       	ldd	r23, Z+1	; 0x01
    1b96:	82 81       	ldd	r24, Z+2	; 0x02
    1b98:	93 81       	ldd	r25, Z+3	; 0x03
    1b9a:	20 e0       	ldi	r18, 0x00	; 0
    1b9c:	30 e0       	ldi	r19, 0x00	; 0
    1b9e:	40 e2       	ldi	r20, 0x20	; 32
    1ba0:	51 e4       	ldi	r21, 0x41	; 65
    1ba2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ba6:	dc 01       	movw	r26, r24
    1ba8:	cb 01       	movw	r24, r22
    1baa:	8e 01       	movw	r16, r28
    1bac:	0a 59       	subi	r16, 0x9A	; 154
    1bae:	1f 4f       	sbci	r17, 0xFF	; 255
    1bb0:	bc 01       	movw	r22, r24
    1bb2:	cd 01       	movw	r24, r26
    1bb4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1bb8:	dc 01       	movw	r26, r24
    1bba:	cb 01       	movw	r24, r22
    1bbc:	f8 01       	movw	r30, r16
    1bbe:	91 83       	std	Z+1, r25	; 0x01
    1bc0:	80 83       	st	Z, r24
    1bc2:	1f c0       	rjmp	.+62     	; 0x1c02 <SEVEN_SEGMENT_Display_Number+0x4aa>
    1bc4:	fe 01       	movw	r30, r28
    1bc6:	ec 59       	subi	r30, 0x9C	; 156
    1bc8:	ff 4f       	sbci	r31, 0xFF	; 255
    1bca:	89 e1       	ldi	r24, 0x19	; 25
    1bcc:	90 e0       	ldi	r25, 0x00	; 0
    1bce:	91 83       	std	Z+1, r25	; 0x01
    1bd0:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1bd2:	fe 01       	movw	r30, r28
    1bd4:	ec 59       	subi	r30, 0x9C	; 156
    1bd6:	ff 4f       	sbci	r31, 0xFF	; 255
    1bd8:	80 81       	ld	r24, Z
    1bda:	91 81       	ldd	r25, Z+1	; 0x01
    1bdc:	01 97       	sbiw	r24, 0x01	; 1
    1bde:	f1 f7       	brne	.-4      	; 0x1bdc <SEVEN_SEGMENT_Display_Number+0x484>
    1be0:	fe 01       	movw	r30, r28
    1be2:	ec 59       	subi	r30, 0x9C	; 156
    1be4:	ff 4f       	sbci	r31, 0xFF	; 255
    1be6:	91 83       	std	Z+1, r25	; 0x01
    1be8:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1bea:	de 01       	movw	r26, r28
    1bec:	aa 59       	subi	r26, 0x9A	; 154
    1bee:	bf 4f       	sbci	r27, 0xFF	; 255
    1bf0:	fe 01       	movw	r30, r28
    1bf2:	ea 59       	subi	r30, 0x9A	; 154
    1bf4:	ff 4f       	sbci	r31, 0xFF	; 255
    1bf6:	80 81       	ld	r24, Z
    1bf8:	91 81       	ldd	r25, Z+1	; 0x01
    1bfa:	01 97       	sbiw	r24, 0x01	; 1
    1bfc:	11 96       	adiw	r26, 0x01	; 1
    1bfe:	9c 93       	st	X, r25
    1c00:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c02:	fe 01       	movw	r30, r28
    1c04:	ea 59       	subi	r30, 0x9A	; 154
    1c06:	ff 4f       	sbci	r31, 0xFF	; 255
    1c08:	80 81       	ld	r24, Z
    1c0a:	91 81       	ldd	r25, Z+1	; 0x01
    1c0c:	00 97       	sbiw	r24, 0x00	; 0
    1c0e:	d1 f6       	brne	.-76     	; 0x1bc4 <SEVEN_SEGMENT_Display_Number+0x46c>
    1c10:	4b c0       	rjmp	.+150    	; 0x1ca8 <SEVEN_SEGMENT_Display_Number+0x550>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c12:	8e 01       	movw	r16, r28
    1c14:	0a 59       	subi	r16, 0x9A	; 154
    1c16:	1f 4f       	sbci	r17, 0xFF	; 255
    1c18:	fe 01       	movw	r30, r28
    1c1a:	e8 59       	subi	r30, 0x98	; 152
    1c1c:	ff 4f       	sbci	r31, 0xFF	; 255
    1c1e:	60 81       	ld	r22, Z
    1c20:	71 81       	ldd	r23, Z+1	; 0x01
    1c22:	82 81       	ldd	r24, Z+2	; 0x02
    1c24:	93 81       	ldd	r25, Z+3	; 0x03
    1c26:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c2a:	dc 01       	movw	r26, r24
    1c2c:	cb 01       	movw	r24, r22
    1c2e:	f8 01       	movw	r30, r16
    1c30:	91 83       	std	Z+1, r25	; 0x01
    1c32:	80 83       	st	Z, r24
    1c34:	de 01       	movw	r26, r28
    1c36:	ae 59       	subi	r26, 0x9E	; 158
    1c38:	bf 4f       	sbci	r27, 0xFF	; 255
    1c3a:	fe 01       	movw	r30, r28
    1c3c:	ea 59       	subi	r30, 0x9A	; 154
    1c3e:	ff 4f       	sbci	r31, 0xFF	; 255
    1c40:	80 81       	ld	r24, Z
    1c42:	91 81       	ldd	r25, Z+1	; 0x01
    1c44:	11 96       	adiw	r26, 0x01	; 1
    1c46:	9c 93       	st	X, r25
    1c48:	8e 93       	st	-X, r24
    1c4a:	fe 01       	movw	r30, r28
    1c4c:	ee 59       	subi	r30, 0x9E	; 158
    1c4e:	ff 4f       	sbci	r31, 0xFF	; 255
    1c50:	80 81       	ld	r24, Z
    1c52:	91 81       	ldd	r25, Z+1	; 0x01
    1c54:	01 97       	sbiw	r24, 0x01	; 1
    1c56:	f1 f7       	brne	.-4      	; 0x1c54 <SEVEN_SEGMENT_Display_Number+0x4fc>
    1c58:	fe 01       	movw	r30, r28
    1c5a:	ee 59       	subi	r30, 0x9E	; 158
    1c5c:	ff 4f       	sbci	r31, 0xFF	; 255
    1c5e:	91 83       	std	Z+1, r25	; 0x01
    1c60:	80 83       	st	Z, r24
    1c62:	22 c0       	rjmp	.+68     	; 0x1ca8 <SEVEN_SEGMENT_Display_Number+0x550>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1c64:	8e 01       	movw	r16, r28
    1c66:	00 59       	subi	r16, 0x90	; 144
    1c68:	1f 4f       	sbci	r17, 0xFF	; 255
    1c6a:	fe 01       	movw	r30, r28
    1c6c:	ef 58       	subi	r30, 0x8F	; 143
    1c6e:	ff 4f       	sbci	r31, 0xFF	; 255
    1c70:	60 81       	ld	r22, Z
    1c72:	71 81       	ldd	r23, Z+1	; 0x01
    1c74:	82 81       	ldd	r24, Z+2	; 0x02
    1c76:	93 81       	ldd	r25, Z+3	; 0x03
    1c78:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c7c:	dc 01       	movw	r26, r24
    1c7e:	cb 01       	movw	r24, r22
    1c80:	f8 01       	movw	r30, r16
    1c82:	80 83       	st	Z, r24
    1c84:	de 01       	movw	r26, r28
    1c86:	af 59       	subi	r26, 0x9F	; 159
    1c88:	bf 4f       	sbci	r27, 0xFF	; 255
    1c8a:	fe 01       	movw	r30, r28
    1c8c:	e0 59       	subi	r30, 0x90	; 144
    1c8e:	ff 4f       	sbci	r31, 0xFF	; 255
    1c90:	80 81       	ld	r24, Z
    1c92:	8c 93       	st	X, r24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1c94:	fe 01       	movw	r30, r28
    1c96:	ef 59       	subi	r30, 0x9F	; 159
    1c98:	ff 4f       	sbci	r31, 0xFF	; 255
    1c9a:	80 81       	ld	r24, Z
    1c9c:	8a 95       	dec	r24
    1c9e:	f1 f7       	brne	.-4      	; 0x1c9c <SEVEN_SEGMENT_Display_Number+0x544>
    1ca0:	fe 01       	movw	r30, r28
    1ca2:	ef 59       	subi	r30, 0x9F	; 159
    1ca4:	ff 4f       	sbci	r31, 0xFF	; 255
    1ca6:	80 83       	st	Z, r24
	_delay_us(10);

	displayed_num = (uint8)(Minute % 10);                     /* Turn on the Third 7-segment by setting its common pin and Turn off rest */
    1ca8:	de 01       	movw	r26, r28
    1caa:	af 56       	subi	r26, 0x6F	; 111
    1cac:	bf 4f       	sbci	r27, 0xFF	; 255
    1cae:	fe 01       	movw	r30, r28
    1cb0:	ed 56       	subi	r30, 0x6D	; 109
    1cb2:	ff 4f       	sbci	r31, 0xFF	; 255
    1cb4:	80 81       	ld	r24, Z
    1cb6:	9a e0       	ldi	r25, 0x0A	; 10
    1cb8:	69 2f       	mov	r22, r25
    1cba:	0e 94 87 14 	call	0x290e	; 0x290e <__udivmodqi4>
    1cbe:	89 2f       	mov	r24, r25
    1cc0:	8c 93       	st	X, r24
	PORTA = (1 << 2);                                         /* display the Third digit of the value of the Minutes */
    1cc2:	eb e3       	ldi	r30, 0x3B	; 59
    1cc4:	f0 e0       	ldi	r31, 0x00	; 0
    1cc6:	84 e0       	ldi	r24, 0x04	; 4
    1cc8:	80 83       	st	Z, r24
	PORTC = (PORTC & 0xF0) | (displayed_num & 0x0F);
    1cca:	a5 e3       	ldi	r26, 0x35	; 53
    1ccc:	b0 e0       	ldi	r27, 0x00	; 0
    1cce:	e5 e3       	ldi	r30, 0x35	; 53
    1cd0:	f0 e0       	ldi	r31, 0x00	; 0
    1cd2:	80 81       	ld	r24, Z
    1cd4:	98 2f       	mov	r25, r24
    1cd6:	90 7f       	andi	r25, 0xF0	; 240
    1cd8:	fe 01       	movw	r30, r28
    1cda:	ef 56       	subi	r30, 0x6F	; 111
    1cdc:	ff 4f       	sbci	r31, 0xFF	; 255
    1cde:	80 81       	ld	r24, Z
    1ce0:	8f 70       	andi	r24, 0x0F	; 15
    1ce2:	89 2b       	or	r24, r25
    1ce4:	8c 93       	st	X, r24
    1ce6:	fe 01       	movw	r30, r28
    1ce8:	e3 5a       	subi	r30, 0xA3	; 163
    1cea:	ff 4f       	sbci	r31, 0xFF	; 255
    1cec:	80 e0       	ldi	r24, 0x00	; 0
    1cee:	90 e0       	ldi	r25, 0x00	; 0
    1cf0:	a0 e2       	ldi	r26, 0x20	; 32
    1cf2:	b1 e4       	ldi	r27, 0x41	; 65
    1cf4:	80 83       	st	Z, r24
    1cf6:	91 83       	std	Z+1, r25	; 0x01
    1cf8:	a2 83       	std	Z+2, r26	; 0x02
    1cfa:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1cfc:	8e 01       	movw	r16, r28
    1cfe:	07 5a       	subi	r16, 0xA7	; 167
    1d00:	1f 4f       	sbci	r17, 0xFF	; 255
    1d02:	fe 01       	movw	r30, r28
    1d04:	e3 5a       	subi	r30, 0xA3	; 163
    1d06:	ff 4f       	sbci	r31, 0xFF	; 255
    1d08:	60 81       	ld	r22, Z
    1d0a:	71 81       	ldd	r23, Z+1	; 0x01
    1d0c:	82 81       	ldd	r24, Z+2	; 0x02
    1d0e:	93 81       	ldd	r25, Z+3	; 0x03
    1d10:	2b ea       	ldi	r18, 0xAB	; 171
    1d12:	3a ea       	ldi	r19, 0xAA	; 170
    1d14:	4a ea       	ldi	r20, 0xAA	; 170
    1d16:	5e e3       	ldi	r21, 0x3E	; 62
    1d18:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d1c:	dc 01       	movw	r26, r24
    1d1e:	cb 01       	movw	r24, r22
    1d20:	f8 01       	movw	r30, r16
    1d22:	80 83       	st	Z, r24
    1d24:	91 83       	std	Z+1, r25	; 0x01
    1d26:	a2 83       	std	Z+2, r26	; 0x02
    1d28:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1d2a:	fe 01       	movw	r30, r28
    1d2c:	e7 5a       	subi	r30, 0xA7	; 167
    1d2e:	ff 4f       	sbci	r31, 0xFF	; 255
    1d30:	60 81       	ld	r22, Z
    1d32:	71 81       	ldd	r23, Z+1	; 0x01
    1d34:	82 81       	ldd	r24, Z+2	; 0x02
    1d36:	93 81       	ldd	r25, Z+3	; 0x03
    1d38:	20 e0       	ldi	r18, 0x00	; 0
    1d3a:	30 e0       	ldi	r19, 0x00	; 0
    1d3c:	40 e8       	ldi	r20, 0x80	; 128
    1d3e:	5f e3       	ldi	r21, 0x3F	; 63
    1d40:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1d44:	88 23       	and	r24, r24
    1d46:	34 f4       	brge	.+12     	; 0x1d54 <SEVEN_SEGMENT_Display_Number+0x5fc>
		__ticks = 1;
    1d48:	fe 01       	movw	r30, r28
    1d4a:	e8 5a       	subi	r30, 0xA8	; 168
    1d4c:	ff 4f       	sbci	r31, 0xFF	; 255
    1d4e:	81 e0       	ldi	r24, 0x01	; 1
    1d50:	80 83       	st	Z, r24
    1d52:	e0 c0       	rjmp	.+448    	; 0x1f14 <SEVEN_SEGMENT_Display_Number+0x7bc>
	else if (__tmp > 255)
    1d54:	fe 01       	movw	r30, r28
    1d56:	e7 5a       	subi	r30, 0xA7	; 167
    1d58:	ff 4f       	sbci	r31, 0xFF	; 255
    1d5a:	60 81       	ld	r22, Z
    1d5c:	71 81       	ldd	r23, Z+1	; 0x01
    1d5e:	82 81       	ldd	r24, Z+2	; 0x02
    1d60:	93 81       	ldd	r25, Z+3	; 0x03
    1d62:	20 e0       	ldi	r18, 0x00	; 0
    1d64:	30 e0       	ldi	r19, 0x00	; 0
    1d66:	4f e7       	ldi	r20, 0x7F	; 127
    1d68:	53 e4       	ldi	r21, 0x43	; 67
    1d6a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1d6e:	18 16       	cp	r1, r24
    1d70:	0c f0       	brlt	.+2      	; 0x1d74 <SEVEN_SEGMENT_Display_Number+0x61c>
    1d72:	c0 c0       	rjmp	.+384    	; 0x1ef4 <SEVEN_SEGMENT_Display_Number+0x79c>
	{
		_delay_ms(__us / 1000.0);
    1d74:	fe 01       	movw	r30, r28
    1d76:	e3 5a       	subi	r30, 0xA3	; 163
    1d78:	ff 4f       	sbci	r31, 0xFF	; 255
    1d7a:	60 81       	ld	r22, Z
    1d7c:	71 81       	ldd	r23, Z+1	; 0x01
    1d7e:	82 81       	ldd	r24, Z+2	; 0x02
    1d80:	93 81       	ldd	r25, Z+3	; 0x03
    1d82:	20 e0       	ldi	r18, 0x00	; 0
    1d84:	30 e0       	ldi	r19, 0x00	; 0
    1d86:	4a e7       	ldi	r20, 0x7A	; 122
    1d88:	54 e4       	ldi	r21, 0x44	; 68
    1d8a:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1d8e:	dc 01       	movw	r26, r24
    1d90:	cb 01       	movw	r24, r22
    1d92:	fe 01       	movw	r30, r28
    1d94:	ec 5a       	subi	r30, 0xAC	; 172
    1d96:	ff 4f       	sbci	r31, 0xFF	; 255
    1d98:	80 83       	st	Z, r24
    1d9a:	91 83       	std	Z+1, r25	; 0x01
    1d9c:	a2 83       	std	Z+2, r26	; 0x02
    1d9e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1da0:	8e 01       	movw	r16, r28
    1da2:	00 5b       	subi	r16, 0xB0	; 176
    1da4:	1f 4f       	sbci	r17, 0xFF	; 255
    1da6:	fe 01       	movw	r30, r28
    1da8:	ec 5a       	subi	r30, 0xAC	; 172
    1daa:	ff 4f       	sbci	r31, 0xFF	; 255
    1dac:	60 81       	ld	r22, Z
    1dae:	71 81       	ldd	r23, Z+1	; 0x01
    1db0:	82 81       	ldd	r24, Z+2	; 0x02
    1db2:	93 81       	ldd	r25, Z+3	; 0x03
    1db4:	20 e0       	ldi	r18, 0x00	; 0
    1db6:	30 e0       	ldi	r19, 0x00	; 0
    1db8:	4a e7       	ldi	r20, 0x7A	; 122
    1dba:	53 e4       	ldi	r21, 0x43	; 67
    1dbc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1dc0:	dc 01       	movw	r26, r24
    1dc2:	cb 01       	movw	r24, r22
    1dc4:	f8 01       	movw	r30, r16
    1dc6:	80 83       	st	Z, r24
    1dc8:	91 83       	std	Z+1, r25	; 0x01
    1dca:	a2 83       	std	Z+2, r26	; 0x02
    1dcc:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1dce:	fe 01       	movw	r30, r28
    1dd0:	e0 5b       	subi	r30, 0xB0	; 176
    1dd2:	ff 4f       	sbci	r31, 0xFF	; 255
    1dd4:	60 81       	ld	r22, Z
    1dd6:	71 81       	ldd	r23, Z+1	; 0x01
    1dd8:	82 81       	ldd	r24, Z+2	; 0x02
    1dda:	93 81       	ldd	r25, Z+3	; 0x03
    1ddc:	20 e0       	ldi	r18, 0x00	; 0
    1dde:	30 e0       	ldi	r19, 0x00	; 0
    1de0:	40 e8       	ldi	r20, 0x80	; 128
    1de2:	5f e3       	ldi	r21, 0x3F	; 63
    1de4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1de8:	88 23       	and	r24, r24
    1dea:	44 f4       	brge	.+16     	; 0x1dfc <SEVEN_SEGMENT_Display_Number+0x6a4>
		__ticks = 1;
    1dec:	fe 01       	movw	r30, r28
    1dee:	e2 5b       	subi	r30, 0xB2	; 178
    1df0:	ff 4f       	sbci	r31, 0xFF	; 255
    1df2:	81 e0       	ldi	r24, 0x01	; 1
    1df4:	90 e0       	ldi	r25, 0x00	; 0
    1df6:	91 83       	std	Z+1, r25	; 0x01
    1df8:	80 83       	st	Z, r24
    1dfa:	64 c0       	rjmp	.+200    	; 0x1ec4 <SEVEN_SEGMENT_Display_Number+0x76c>
	else if (__tmp > 65535)
    1dfc:	fe 01       	movw	r30, r28
    1dfe:	e0 5b       	subi	r30, 0xB0	; 176
    1e00:	ff 4f       	sbci	r31, 0xFF	; 255
    1e02:	60 81       	ld	r22, Z
    1e04:	71 81       	ldd	r23, Z+1	; 0x01
    1e06:	82 81       	ldd	r24, Z+2	; 0x02
    1e08:	93 81       	ldd	r25, Z+3	; 0x03
    1e0a:	20 e0       	ldi	r18, 0x00	; 0
    1e0c:	3f ef       	ldi	r19, 0xFF	; 255
    1e0e:	4f e7       	ldi	r20, 0x7F	; 127
    1e10:	57 e4       	ldi	r21, 0x47	; 71
    1e12:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1e16:	18 16       	cp	r1, r24
    1e18:	0c f0       	brlt	.+2      	; 0x1e1c <SEVEN_SEGMENT_Display_Number+0x6c4>
    1e1a:	43 c0       	rjmp	.+134    	; 0x1ea2 <SEVEN_SEGMENT_Display_Number+0x74a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e1c:	fe 01       	movw	r30, r28
    1e1e:	ec 5a       	subi	r30, 0xAC	; 172
    1e20:	ff 4f       	sbci	r31, 0xFF	; 255
    1e22:	60 81       	ld	r22, Z
    1e24:	71 81       	ldd	r23, Z+1	; 0x01
    1e26:	82 81       	ldd	r24, Z+2	; 0x02
    1e28:	93 81       	ldd	r25, Z+3	; 0x03
    1e2a:	20 e0       	ldi	r18, 0x00	; 0
    1e2c:	30 e0       	ldi	r19, 0x00	; 0
    1e2e:	40 e2       	ldi	r20, 0x20	; 32
    1e30:	51 e4       	ldi	r21, 0x41	; 65
    1e32:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e36:	dc 01       	movw	r26, r24
    1e38:	cb 01       	movw	r24, r22
    1e3a:	8e 01       	movw	r16, r28
    1e3c:	02 5b       	subi	r16, 0xB2	; 178
    1e3e:	1f 4f       	sbci	r17, 0xFF	; 255
    1e40:	bc 01       	movw	r22, r24
    1e42:	cd 01       	movw	r24, r26
    1e44:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e48:	dc 01       	movw	r26, r24
    1e4a:	cb 01       	movw	r24, r22
    1e4c:	f8 01       	movw	r30, r16
    1e4e:	91 83       	std	Z+1, r25	; 0x01
    1e50:	80 83       	st	Z, r24
    1e52:	1f c0       	rjmp	.+62     	; 0x1e92 <SEVEN_SEGMENT_Display_Number+0x73a>
    1e54:	fe 01       	movw	r30, r28
    1e56:	e4 5b       	subi	r30, 0xB4	; 180
    1e58:	ff 4f       	sbci	r31, 0xFF	; 255
    1e5a:	89 e1       	ldi	r24, 0x19	; 25
    1e5c:	90 e0       	ldi	r25, 0x00	; 0
    1e5e:	91 83       	std	Z+1, r25	; 0x01
    1e60:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1e62:	fe 01       	movw	r30, r28
    1e64:	e4 5b       	subi	r30, 0xB4	; 180
    1e66:	ff 4f       	sbci	r31, 0xFF	; 255
    1e68:	80 81       	ld	r24, Z
    1e6a:	91 81       	ldd	r25, Z+1	; 0x01
    1e6c:	01 97       	sbiw	r24, 0x01	; 1
    1e6e:	f1 f7       	brne	.-4      	; 0x1e6c <SEVEN_SEGMENT_Display_Number+0x714>
    1e70:	fe 01       	movw	r30, r28
    1e72:	e4 5b       	subi	r30, 0xB4	; 180
    1e74:	ff 4f       	sbci	r31, 0xFF	; 255
    1e76:	91 83       	std	Z+1, r25	; 0x01
    1e78:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e7a:	de 01       	movw	r26, r28
    1e7c:	a2 5b       	subi	r26, 0xB2	; 178
    1e7e:	bf 4f       	sbci	r27, 0xFF	; 255
    1e80:	fe 01       	movw	r30, r28
    1e82:	e2 5b       	subi	r30, 0xB2	; 178
    1e84:	ff 4f       	sbci	r31, 0xFF	; 255
    1e86:	80 81       	ld	r24, Z
    1e88:	91 81       	ldd	r25, Z+1	; 0x01
    1e8a:	01 97       	sbiw	r24, 0x01	; 1
    1e8c:	11 96       	adiw	r26, 0x01	; 1
    1e8e:	9c 93       	st	X, r25
    1e90:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e92:	fe 01       	movw	r30, r28
    1e94:	e2 5b       	subi	r30, 0xB2	; 178
    1e96:	ff 4f       	sbci	r31, 0xFF	; 255
    1e98:	80 81       	ld	r24, Z
    1e9a:	91 81       	ldd	r25, Z+1	; 0x01
    1e9c:	00 97       	sbiw	r24, 0x00	; 0
    1e9e:	d1 f6       	brne	.-76     	; 0x1e54 <SEVEN_SEGMENT_Display_Number+0x6fc>
    1ea0:	4b c0       	rjmp	.+150    	; 0x1f38 <SEVEN_SEGMENT_Display_Number+0x7e0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ea2:	8e 01       	movw	r16, r28
    1ea4:	02 5b       	subi	r16, 0xB2	; 178
    1ea6:	1f 4f       	sbci	r17, 0xFF	; 255
    1ea8:	fe 01       	movw	r30, r28
    1eaa:	e0 5b       	subi	r30, 0xB0	; 176
    1eac:	ff 4f       	sbci	r31, 0xFF	; 255
    1eae:	60 81       	ld	r22, Z
    1eb0:	71 81       	ldd	r23, Z+1	; 0x01
    1eb2:	82 81       	ldd	r24, Z+2	; 0x02
    1eb4:	93 81       	ldd	r25, Z+3	; 0x03
    1eb6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1eba:	dc 01       	movw	r26, r24
    1ebc:	cb 01       	movw	r24, r22
    1ebe:	f8 01       	movw	r30, r16
    1ec0:	91 83       	std	Z+1, r25	; 0x01
    1ec2:	80 83       	st	Z, r24
    1ec4:	de 01       	movw	r26, r28
    1ec6:	a6 5b       	subi	r26, 0xB6	; 182
    1ec8:	bf 4f       	sbci	r27, 0xFF	; 255
    1eca:	fe 01       	movw	r30, r28
    1ecc:	e2 5b       	subi	r30, 0xB2	; 178
    1ece:	ff 4f       	sbci	r31, 0xFF	; 255
    1ed0:	80 81       	ld	r24, Z
    1ed2:	91 81       	ldd	r25, Z+1	; 0x01
    1ed4:	11 96       	adiw	r26, 0x01	; 1
    1ed6:	9c 93       	st	X, r25
    1ed8:	8e 93       	st	-X, r24
    1eda:	fe 01       	movw	r30, r28
    1edc:	e6 5b       	subi	r30, 0xB6	; 182
    1ede:	ff 4f       	sbci	r31, 0xFF	; 255
    1ee0:	80 81       	ld	r24, Z
    1ee2:	91 81       	ldd	r25, Z+1	; 0x01
    1ee4:	01 97       	sbiw	r24, 0x01	; 1
    1ee6:	f1 f7       	brne	.-4      	; 0x1ee4 <SEVEN_SEGMENT_Display_Number+0x78c>
    1ee8:	fe 01       	movw	r30, r28
    1eea:	e6 5b       	subi	r30, 0xB6	; 182
    1eec:	ff 4f       	sbci	r31, 0xFF	; 255
    1eee:	91 83       	std	Z+1, r25	; 0x01
    1ef0:	80 83       	st	Z, r24
    1ef2:	22 c0       	rjmp	.+68     	; 0x1f38 <SEVEN_SEGMENT_Display_Number+0x7e0>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1ef4:	8e 01       	movw	r16, r28
    1ef6:	08 5a       	subi	r16, 0xA8	; 168
    1ef8:	1f 4f       	sbci	r17, 0xFF	; 255
    1efa:	fe 01       	movw	r30, r28
    1efc:	e7 5a       	subi	r30, 0xA7	; 167
    1efe:	ff 4f       	sbci	r31, 0xFF	; 255
    1f00:	60 81       	ld	r22, Z
    1f02:	71 81       	ldd	r23, Z+1	; 0x01
    1f04:	82 81       	ldd	r24, Z+2	; 0x02
    1f06:	93 81       	ldd	r25, Z+3	; 0x03
    1f08:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f0c:	dc 01       	movw	r26, r24
    1f0e:	cb 01       	movw	r24, r22
    1f10:	f8 01       	movw	r30, r16
    1f12:	80 83       	st	Z, r24
    1f14:	de 01       	movw	r26, r28
    1f16:	a7 5b       	subi	r26, 0xB7	; 183
    1f18:	bf 4f       	sbci	r27, 0xFF	; 255
    1f1a:	fe 01       	movw	r30, r28
    1f1c:	e8 5a       	subi	r30, 0xA8	; 168
    1f1e:	ff 4f       	sbci	r31, 0xFF	; 255
    1f20:	80 81       	ld	r24, Z
    1f22:	8c 93       	st	X, r24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1f24:	fe 01       	movw	r30, r28
    1f26:	e7 5b       	subi	r30, 0xB7	; 183
    1f28:	ff 4f       	sbci	r31, 0xFF	; 255
    1f2a:	80 81       	ld	r24, Z
    1f2c:	8a 95       	dec	r24
    1f2e:	f1 f7       	brne	.-4      	; 0x1f2c <SEVEN_SEGMENT_Display_Number+0x7d4>
    1f30:	fe 01       	movw	r30, r28
    1f32:	e7 5b       	subi	r30, 0xB7	; 183
    1f34:	ff 4f       	sbci	r31, 0xFF	; 255
    1f36:	80 83       	st	Z, r24
	_delay_us(10);

	displayed_num = (uint8)( Minute / 10);                    /* Turn on the Fourth 7-segment by setting its common pin and Turn off rest */
    1f38:	de 01       	movw	r26, r28
    1f3a:	af 56       	subi	r26, 0x6F	; 111
    1f3c:	bf 4f       	sbci	r27, 0xFF	; 255
    1f3e:	fe 01       	movw	r30, r28
    1f40:	ed 56       	subi	r30, 0x6D	; 109
    1f42:	ff 4f       	sbci	r31, 0xFF	; 255
    1f44:	80 81       	ld	r24, Z
    1f46:	9a e0       	ldi	r25, 0x0A	; 10
    1f48:	69 2f       	mov	r22, r25
    1f4a:	0e 94 87 14 	call	0x290e	; 0x290e <__udivmodqi4>
    1f4e:	8c 93       	st	X, r24
	PORTA = (1 << 3);                                         /* display the Fourth digit of the value of the Minutes */
    1f50:	eb e3       	ldi	r30, 0x3B	; 59
    1f52:	f0 e0       	ldi	r31, 0x00	; 0
    1f54:	88 e0       	ldi	r24, 0x08	; 8
    1f56:	80 83       	st	Z, r24
	PORTC = (PORTC & 0xF0) | (displayed_num & 0x0F);
    1f58:	a5 e3       	ldi	r26, 0x35	; 53
    1f5a:	b0 e0       	ldi	r27, 0x00	; 0
    1f5c:	e5 e3       	ldi	r30, 0x35	; 53
    1f5e:	f0 e0       	ldi	r31, 0x00	; 0
    1f60:	80 81       	ld	r24, Z
    1f62:	98 2f       	mov	r25, r24
    1f64:	90 7f       	andi	r25, 0xF0	; 240
    1f66:	fe 01       	movw	r30, r28
    1f68:	ef 56       	subi	r30, 0x6F	; 111
    1f6a:	ff 4f       	sbci	r31, 0xFF	; 255
    1f6c:	80 81       	ld	r24, Z
    1f6e:	8f 70       	andi	r24, 0x0F	; 15
    1f70:	89 2b       	or	r24, r25
    1f72:	8c 93       	st	X, r24
    1f74:	fe 01       	movw	r30, r28
    1f76:	eb 5b       	subi	r30, 0xBB	; 187
    1f78:	ff 4f       	sbci	r31, 0xFF	; 255
    1f7a:	80 e0       	ldi	r24, 0x00	; 0
    1f7c:	90 e0       	ldi	r25, 0x00	; 0
    1f7e:	a0 e2       	ldi	r26, 0x20	; 32
    1f80:	b1 e4       	ldi	r27, 0x41	; 65
    1f82:	80 83       	st	Z, r24
    1f84:	91 83       	std	Z+1, r25	; 0x01
    1f86:	a2 83       	std	Z+2, r26	; 0x02
    1f88:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1f8a:	8e 01       	movw	r16, r28
    1f8c:	0f 5b       	subi	r16, 0xBF	; 191
    1f8e:	1f 4f       	sbci	r17, 0xFF	; 255
    1f90:	fe 01       	movw	r30, r28
    1f92:	eb 5b       	subi	r30, 0xBB	; 187
    1f94:	ff 4f       	sbci	r31, 0xFF	; 255
    1f96:	60 81       	ld	r22, Z
    1f98:	71 81       	ldd	r23, Z+1	; 0x01
    1f9a:	82 81       	ldd	r24, Z+2	; 0x02
    1f9c:	93 81       	ldd	r25, Z+3	; 0x03
    1f9e:	2b ea       	ldi	r18, 0xAB	; 171
    1fa0:	3a ea       	ldi	r19, 0xAA	; 170
    1fa2:	4a ea       	ldi	r20, 0xAA	; 170
    1fa4:	5e e3       	ldi	r21, 0x3E	; 62
    1fa6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1faa:	dc 01       	movw	r26, r24
    1fac:	cb 01       	movw	r24, r22
    1fae:	f8 01       	movw	r30, r16
    1fb0:	80 83       	st	Z, r24
    1fb2:	91 83       	std	Z+1, r25	; 0x01
    1fb4:	a2 83       	std	Z+2, r26	; 0x02
    1fb6:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1fb8:	fe 01       	movw	r30, r28
    1fba:	ef 5b       	subi	r30, 0xBF	; 191
    1fbc:	ff 4f       	sbci	r31, 0xFF	; 255
    1fbe:	60 81       	ld	r22, Z
    1fc0:	71 81       	ldd	r23, Z+1	; 0x01
    1fc2:	82 81       	ldd	r24, Z+2	; 0x02
    1fc4:	93 81       	ldd	r25, Z+3	; 0x03
    1fc6:	20 e0       	ldi	r18, 0x00	; 0
    1fc8:	30 e0       	ldi	r19, 0x00	; 0
    1fca:	40 e8       	ldi	r20, 0x80	; 128
    1fcc:	5f e3       	ldi	r21, 0x3F	; 63
    1fce:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1fd2:	88 23       	and	r24, r24
    1fd4:	34 f4       	brge	.+12     	; 0x1fe2 <SEVEN_SEGMENT_Display_Number+0x88a>
		__ticks = 1;
    1fd6:	81 e0       	ldi	r24, 0x01	; 1
    1fd8:	fe 01       	movw	r30, r28
    1fda:	e0 5c       	subi	r30, 0xC0	; 192
    1fdc:	ff 4f       	sbci	r31, 0xFF	; 255
    1fde:	80 83       	st	Z, r24
    1fe0:	9d c0       	rjmp	.+314    	; 0x211c <SEVEN_SEGMENT_Display_Number+0x9c4>
	else if (__tmp > 255)
    1fe2:	fe 01       	movw	r30, r28
    1fe4:	ef 5b       	subi	r30, 0xBF	; 191
    1fe6:	ff 4f       	sbci	r31, 0xFF	; 255
    1fe8:	60 81       	ld	r22, Z
    1fea:	71 81       	ldd	r23, Z+1	; 0x01
    1fec:	82 81       	ldd	r24, Z+2	; 0x02
    1fee:	93 81       	ldd	r25, Z+3	; 0x03
    1ff0:	20 e0       	ldi	r18, 0x00	; 0
    1ff2:	30 e0       	ldi	r19, 0x00	; 0
    1ff4:	4f e7       	ldi	r20, 0x7F	; 127
    1ff6:	53 e4       	ldi	r21, 0x43	; 67
    1ff8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1ffc:	18 16       	cp	r1, r24
    1ffe:	0c f0       	brlt	.+2      	; 0x2002 <SEVEN_SEGMENT_Display_Number+0x8aa>
    2000:	7e c0       	rjmp	.+252    	; 0x20fe <SEVEN_SEGMENT_Display_Number+0x9a6>
	{
		_delay_ms(__us / 1000.0);
    2002:	fe 01       	movw	r30, r28
    2004:	eb 5b       	subi	r30, 0xBB	; 187
    2006:	ff 4f       	sbci	r31, 0xFF	; 255
    2008:	60 81       	ld	r22, Z
    200a:	71 81       	ldd	r23, Z+1	; 0x01
    200c:	82 81       	ldd	r24, Z+2	; 0x02
    200e:	93 81       	ldd	r25, Z+3	; 0x03
    2010:	20 e0       	ldi	r18, 0x00	; 0
    2012:	30 e0       	ldi	r19, 0x00	; 0
    2014:	4a e7       	ldi	r20, 0x7A	; 122
    2016:	54 e4       	ldi	r21, 0x44	; 68
    2018:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    201c:	dc 01       	movw	r26, r24
    201e:	cb 01       	movw	r24, r22
    2020:	8c af       	std	Y+60, r24	; 0x3c
    2022:	9d af       	std	Y+61, r25	; 0x3d
    2024:	ae af       	std	Y+62, r26	; 0x3e
    2026:	bf af       	std	Y+63, r27	; 0x3f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2028:	6c ad       	ldd	r22, Y+60	; 0x3c
    202a:	7d ad       	ldd	r23, Y+61	; 0x3d
    202c:	8e ad       	ldd	r24, Y+62	; 0x3e
    202e:	9f ad       	ldd	r25, Y+63	; 0x3f
    2030:	20 e0       	ldi	r18, 0x00	; 0
    2032:	30 e0       	ldi	r19, 0x00	; 0
    2034:	4a e7       	ldi	r20, 0x7A	; 122
    2036:	53 e4       	ldi	r21, 0x43	; 67
    2038:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    203c:	dc 01       	movw	r26, r24
    203e:	cb 01       	movw	r24, r22
    2040:	88 af       	std	Y+56, r24	; 0x38
    2042:	99 af       	std	Y+57, r25	; 0x39
    2044:	aa af       	std	Y+58, r26	; 0x3a
    2046:	bb af       	std	Y+59, r27	; 0x3b
	if (__tmp < 1.0)
    2048:	68 ad       	ldd	r22, Y+56	; 0x38
    204a:	79 ad       	ldd	r23, Y+57	; 0x39
    204c:	8a ad       	ldd	r24, Y+58	; 0x3a
    204e:	9b ad       	ldd	r25, Y+59	; 0x3b
    2050:	20 e0       	ldi	r18, 0x00	; 0
    2052:	30 e0       	ldi	r19, 0x00	; 0
    2054:	40 e8       	ldi	r20, 0x80	; 128
    2056:	5f e3       	ldi	r21, 0x3F	; 63
    2058:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    205c:	88 23       	and	r24, r24
    205e:	2c f4       	brge	.+10     	; 0x206a <SEVEN_SEGMENT_Display_Number+0x912>
		__ticks = 1;
    2060:	81 e0       	ldi	r24, 0x01	; 1
    2062:	90 e0       	ldi	r25, 0x00	; 0
    2064:	9f ab       	std	Y+55, r25	; 0x37
    2066:	8e ab       	std	Y+54, r24	; 0x36
    2068:	3f c0       	rjmp	.+126    	; 0x20e8 <SEVEN_SEGMENT_Display_Number+0x990>
	else if (__tmp > 65535)
    206a:	68 ad       	ldd	r22, Y+56	; 0x38
    206c:	79 ad       	ldd	r23, Y+57	; 0x39
    206e:	8a ad       	ldd	r24, Y+58	; 0x3a
    2070:	9b ad       	ldd	r25, Y+59	; 0x3b
    2072:	20 e0       	ldi	r18, 0x00	; 0
    2074:	3f ef       	ldi	r19, 0xFF	; 255
    2076:	4f e7       	ldi	r20, 0x7F	; 127
    2078:	57 e4       	ldi	r21, 0x47	; 71
    207a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    207e:	18 16       	cp	r1, r24
    2080:	4c f5       	brge	.+82     	; 0x20d4 <SEVEN_SEGMENT_Display_Number+0x97c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2082:	6c ad       	ldd	r22, Y+60	; 0x3c
    2084:	7d ad       	ldd	r23, Y+61	; 0x3d
    2086:	8e ad       	ldd	r24, Y+62	; 0x3e
    2088:	9f ad       	ldd	r25, Y+63	; 0x3f
    208a:	20 e0       	ldi	r18, 0x00	; 0
    208c:	30 e0       	ldi	r19, 0x00	; 0
    208e:	40 e2       	ldi	r20, 0x20	; 32
    2090:	51 e4       	ldi	r21, 0x41	; 65
    2092:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2096:	dc 01       	movw	r26, r24
    2098:	cb 01       	movw	r24, r22
    209a:	bc 01       	movw	r22, r24
    209c:	cd 01       	movw	r24, r26
    209e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20a2:	dc 01       	movw	r26, r24
    20a4:	cb 01       	movw	r24, r22
    20a6:	9f ab       	std	Y+55, r25	; 0x37
    20a8:	8e ab       	std	Y+54, r24	; 0x36
    20aa:	0f c0       	rjmp	.+30     	; 0x20ca <SEVEN_SEGMENT_Display_Number+0x972>
    20ac:	89 e1       	ldi	r24, 0x19	; 25
    20ae:	90 e0       	ldi	r25, 0x00	; 0
    20b0:	9d ab       	std	Y+53, r25	; 0x35
    20b2:	8c ab       	std	Y+52, r24	; 0x34
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    20b4:	8c a9       	ldd	r24, Y+52	; 0x34
    20b6:	9d a9       	ldd	r25, Y+53	; 0x35
    20b8:	01 97       	sbiw	r24, 0x01	; 1
    20ba:	f1 f7       	brne	.-4      	; 0x20b8 <SEVEN_SEGMENT_Display_Number+0x960>
    20bc:	9d ab       	std	Y+53, r25	; 0x35
    20be:	8c ab       	std	Y+52, r24	; 0x34
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    20c0:	8e a9       	ldd	r24, Y+54	; 0x36
    20c2:	9f a9       	ldd	r25, Y+55	; 0x37
    20c4:	01 97       	sbiw	r24, 0x01	; 1
    20c6:	9f ab       	std	Y+55, r25	; 0x37
    20c8:	8e ab       	std	Y+54, r24	; 0x36
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    20ca:	8e a9       	ldd	r24, Y+54	; 0x36
    20cc:	9f a9       	ldd	r25, Y+55	; 0x37
    20ce:	00 97       	sbiw	r24, 0x00	; 0
    20d0:	69 f7       	brne	.-38     	; 0x20ac <SEVEN_SEGMENT_Display_Number+0x954>
    20d2:	2d c0       	rjmp	.+90     	; 0x212e <SEVEN_SEGMENT_Display_Number+0x9d6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    20d4:	68 ad       	ldd	r22, Y+56	; 0x38
    20d6:	79 ad       	ldd	r23, Y+57	; 0x39
    20d8:	8a ad       	ldd	r24, Y+58	; 0x3a
    20da:	9b ad       	ldd	r25, Y+59	; 0x3b
    20dc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20e0:	dc 01       	movw	r26, r24
    20e2:	cb 01       	movw	r24, r22
    20e4:	9f ab       	std	Y+55, r25	; 0x37
    20e6:	8e ab       	std	Y+54, r24	; 0x36
    20e8:	8e a9       	ldd	r24, Y+54	; 0x36
    20ea:	9f a9       	ldd	r25, Y+55	; 0x37
    20ec:	9b ab       	std	Y+51, r25	; 0x33
    20ee:	8a ab       	std	Y+50, r24	; 0x32
    20f0:	8a a9       	ldd	r24, Y+50	; 0x32
    20f2:	9b a9       	ldd	r25, Y+51	; 0x33
    20f4:	01 97       	sbiw	r24, 0x01	; 1
    20f6:	f1 f7       	brne	.-4      	; 0x20f4 <SEVEN_SEGMENT_Display_Number+0x99c>
    20f8:	9b ab       	std	Y+51, r25	; 0x33
    20fa:	8a ab       	std	Y+50, r24	; 0x32
    20fc:	18 c0       	rjmp	.+48     	; 0x212e <SEVEN_SEGMENT_Display_Number+0x9d6>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    20fe:	fe 01       	movw	r30, r28
    2100:	ef 5b       	subi	r30, 0xBF	; 191
    2102:	ff 4f       	sbci	r31, 0xFF	; 255
    2104:	60 81       	ld	r22, Z
    2106:	71 81       	ldd	r23, Z+1	; 0x01
    2108:	82 81       	ldd	r24, Z+2	; 0x02
    210a:	93 81       	ldd	r25, Z+3	; 0x03
    210c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2110:	dc 01       	movw	r26, r24
    2112:	cb 01       	movw	r24, r22
    2114:	fe 01       	movw	r30, r28
    2116:	e0 5c       	subi	r30, 0xC0	; 192
    2118:	ff 4f       	sbci	r31, 0xFF	; 255
    211a:	80 83       	st	Z, r24
    211c:	fe 01       	movw	r30, r28
    211e:	e0 5c       	subi	r30, 0xC0	; 192
    2120:	ff 4f       	sbci	r31, 0xFF	; 255
    2122:	80 81       	ld	r24, Z
    2124:	89 ab       	std	Y+49, r24	; 0x31
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2126:	89 a9       	ldd	r24, Y+49	; 0x31
    2128:	8a 95       	dec	r24
    212a:	f1 f7       	brne	.-4      	; 0x2128 <SEVEN_SEGMENT_Display_Number+0x9d0>
    212c:	89 ab       	std	Y+49, r24	; 0x31
	_delay_us(10);

	displayed_num = (uint8)( Hour % 10);                      /* Turn on the Fifth 7-segment by setting its common pin and Turn off rest */
    212e:	de 01       	movw	r26, r28
    2130:	af 56       	subi	r26, 0x6F	; 111
    2132:	bf 4f       	sbci	r27, 0xFF	; 255
    2134:	fe 01       	movw	r30, r28
    2136:	ec 56       	subi	r30, 0x6C	; 108
    2138:	ff 4f       	sbci	r31, 0xFF	; 255
    213a:	80 81       	ld	r24, Z
    213c:	9a e0       	ldi	r25, 0x0A	; 10
    213e:	69 2f       	mov	r22, r25
    2140:	0e 94 87 14 	call	0x290e	; 0x290e <__udivmodqi4>
    2144:	89 2f       	mov	r24, r25
    2146:	8c 93       	st	X, r24
	PORTA = (1 << 4);                                         /* display the Fifth digit of the value of the Hours */
    2148:	eb e3       	ldi	r30, 0x3B	; 59
    214a:	f0 e0       	ldi	r31, 0x00	; 0
    214c:	80 e1       	ldi	r24, 0x10	; 16
    214e:	80 83       	st	Z, r24
	PORTC = (PORTC & 0xF0) | (displayed_num & 0x0F);
    2150:	a5 e3       	ldi	r26, 0x35	; 53
    2152:	b0 e0       	ldi	r27, 0x00	; 0
    2154:	e5 e3       	ldi	r30, 0x35	; 53
    2156:	f0 e0       	ldi	r31, 0x00	; 0
    2158:	80 81       	ld	r24, Z
    215a:	98 2f       	mov	r25, r24
    215c:	90 7f       	andi	r25, 0xF0	; 240
    215e:	fe 01       	movw	r30, r28
    2160:	ef 56       	subi	r30, 0x6F	; 111
    2162:	ff 4f       	sbci	r31, 0xFF	; 255
    2164:	80 81       	ld	r24, Z
    2166:	8f 70       	andi	r24, 0x0F	; 15
    2168:	89 2b       	or	r24, r25
    216a:	8c 93       	st	X, r24
    216c:	80 e0       	ldi	r24, 0x00	; 0
    216e:	90 e0       	ldi	r25, 0x00	; 0
    2170:	a0 e2       	ldi	r26, 0x20	; 32
    2172:	b1 e4       	ldi	r27, 0x41	; 65
    2174:	8d a7       	std	Y+45, r24	; 0x2d
    2176:	9e a7       	std	Y+46, r25	; 0x2e
    2178:	af a7       	std	Y+47, r26	; 0x2f
    217a:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    217c:	6d a5       	ldd	r22, Y+45	; 0x2d
    217e:	7e a5       	ldd	r23, Y+46	; 0x2e
    2180:	8f a5       	ldd	r24, Y+47	; 0x2f
    2182:	98 a9       	ldd	r25, Y+48	; 0x30
    2184:	2b ea       	ldi	r18, 0xAB	; 171
    2186:	3a ea       	ldi	r19, 0xAA	; 170
    2188:	4a ea       	ldi	r20, 0xAA	; 170
    218a:	5e e3       	ldi	r21, 0x3E	; 62
    218c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2190:	dc 01       	movw	r26, r24
    2192:	cb 01       	movw	r24, r22
    2194:	89 a7       	std	Y+41, r24	; 0x29
    2196:	9a a7       	std	Y+42, r25	; 0x2a
    2198:	ab a7       	std	Y+43, r26	; 0x2b
    219a:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    219c:	69 a5       	ldd	r22, Y+41	; 0x29
    219e:	7a a5       	ldd	r23, Y+42	; 0x2a
    21a0:	8b a5       	ldd	r24, Y+43	; 0x2b
    21a2:	9c a5       	ldd	r25, Y+44	; 0x2c
    21a4:	20 e0       	ldi	r18, 0x00	; 0
    21a6:	30 e0       	ldi	r19, 0x00	; 0
    21a8:	40 e8       	ldi	r20, 0x80	; 128
    21aa:	5f e3       	ldi	r21, 0x3F	; 63
    21ac:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    21b0:	88 23       	and	r24, r24
    21b2:	1c f4       	brge	.+6      	; 0x21ba <SEVEN_SEGMENT_Display_Number+0xa62>
		__ticks = 1;
    21b4:	81 e0       	ldi	r24, 0x01	; 1
    21b6:	88 a7       	std	Y+40, r24	; 0x28
    21b8:	91 c0       	rjmp	.+290    	; 0x22dc <SEVEN_SEGMENT_Display_Number+0xb84>
	else if (__tmp > 255)
    21ba:	69 a5       	ldd	r22, Y+41	; 0x29
    21bc:	7a a5       	ldd	r23, Y+42	; 0x2a
    21be:	8b a5       	ldd	r24, Y+43	; 0x2b
    21c0:	9c a5       	ldd	r25, Y+44	; 0x2c
    21c2:	20 e0       	ldi	r18, 0x00	; 0
    21c4:	30 e0       	ldi	r19, 0x00	; 0
    21c6:	4f e7       	ldi	r20, 0x7F	; 127
    21c8:	53 e4       	ldi	r21, 0x43	; 67
    21ca:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    21ce:	18 16       	cp	r1, r24
    21d0:	0c f0       	brlt	.+2      	; 0x21d4 <SEVEN_SEGMENT_Display_Number+0xa7c>
    21d2:	7b c0       	rjmp	.+246    	; 0x22ca <SEVEN_SEGMENT_Display_Number+0xb72>
	{
		_delay_ms(__us / 1000.0);
    21d4:	6d a5       	ldd	r22, Y+45	; 0x2d
    21d6:	7e a5       	ldd	r23, Y+46	; 0x2e
    21d8:	8f a5       	ldd	r24, Y+47	; 0x2f
    21da:	98 a9       	ldd	r25, Y+48	; 0x30
    21dc:	20 e0       	ldi	r18, 0x00	; 0
    21de:	30 e0       	ldi	r19, 0x00	; 0
    21e0:	4a e7       	ldi	r20, 0x7A	; 122
    21e2:	54 e4       	ldi	r21, 0x44	; 68
    21e4:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    21e8:	dc 01       	movw	r26, r24
    21ea:	cb 01       	movw	r24, r22
    21ec:	8c a3       	std	Y+36, r24	; 0x24
    21ee:	9d a3       	std	Y+37, r25	; 0x25
    21f0:	ae a3       	std	Y+38, r26	; 0x26
    21f2:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    21f4:	6c a1       	ldd	r22, Y+36	; 0x24
    21f6:	7d a1       	ldd	r23, Y+37	; 0x25
    21f8:	8e a1       	ldd	r24, Y+38	; 0x26
    21fa:	9f a1       	ldd	r25, Y+39	; 0x27
    21fc:	20 e0       	ldi	r18, 0x00	; 0
    21fe:	30 e0       	ldi	r19, 0x00	; 0
    2200:	4a e7       	ldi	r20, 0x7A	; 122
    2202:	53 e4       	ldi	r21, 0x43	; 67
    2204:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2208:	dc 01       	movw	r26, r24
    220a:	cb 01       	movw	r24, r22
    220c:	88 a3       	std	Y+32, r24	; 0x20
    220e:	99 a3       	std	Y+33, r25	; 0x21
    2210:	aa a3       	std	Y+34, r26	; 0x22
    2212:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    2214:	68 a1       	ldd	r22, Y+32	; 0x20
    2216:	79 a1       	ldd	r23, Y+33	; 0x21
    2218:	8a a1       	ldd	r24, Y+34	; 0x22
    221a:	9b a1       	ldd	r25, Y+35	; 0x23
    221c:	20 e0       	ldi	r18, 0x00	; 0
    221e:	30 e0       	ldi	r19, 0x00	; 0
    2220:	40 e8       	ldi	r20, 0x80	; 128
    2222:	5f e3       	ldi	r21, 0x3F	; 63
    2224:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2228:	88 23       	and	r24, r24
    222a:	2c f4       	brge	.+10     	; 0x2236 <SEVEN_SEGMENT_Display_Number+0xade>
		__ticks = 1;
    222c:	81 e0       	ldi	r24, 0x01	; 1
    222e:	90 e0       	ldi	r25, 0x00	; 0
    2230:	9f 8f       	std	Y+31, r25	; 0x1f
    2232:	8e 8f       	std	Y+30, r24	; 0x1e
    2234:	3f c0       	rjmp	.+126    	; 0x22b4 <SEVEN_SEGMENT_Display_Number+0xb5c>
	else if (__tmp > 65535)
    2236:	68 a1       	ldd	r22, Y+32	; 0x20
    2238:	79 a1       	ldd	r23, Y+33	; 0x21
    223a:	8a a1       	ldd	r24, Y+34	; 0x22
    223c:	9b a1       	ldd	r25, Y+35	; 0x23
    223e:	20 e0       	ldi	r18, 0x00	; 0
    2240:	3f ef       	ldi	r19, 0xFF	; 255
    2242:	4f e7       	ldi	r20, 0x7F	; 127
    2244:	57 e4       	ldi	r21, 0x47	; 71
    2246:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    224a:	18 16       	cp	r1, r24
    224c:	4c f5       	brge	.+82     	; 0x22a0 <SEVEN_SEGMENT_Display_Number+0xb48>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    224e:	6c a1       	ldd	r22, Y+36	; 0x24
    2250:	7d a1       	ldd	r23, Y+37	; 0x25
    2252:	8e a1       	ldd	r24, Y+38	; 0x26
    2254:	9f a1       	ldd	r25, Y+39	; 0x27
    2256:	20 e0       	ldi	r18, 0x00	; 0
    2258:	30 e0       	ldi	r19, 0x00	; 0
    225a:	40 e2       	ldi	r20, 0x20	; 32
    225c:	51 e4       	ldi	r21, 0x41	; 65
    225e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2262:	dc 01       	movw	r26, r24
    2264:	cb 01       	movw	r24, r22
    2266:	bc 01       	movw	r22, r24
    2268:	cd 01       	movw	r24, r26
    226a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    226e:	dc 01       	movw	r26, r24
    2270:	cb 01       	movw	r24, r22
    2272:	9f 8f       	std	Y+31, r25	; 0x1f
    2274:	8e 8f       	std	Y+30, r24	; 0x1e
    2276:	0f c0       	rjmp	.+30     	; 0x2296 <SEVEN_SEGMENT_Display_Number+0xb3e>
    2278:	89 e1       	ldi	r24, 0x19	; 25
    227a:	90 e0       	ldi	r25, 0x00	; 0
    227c:	9d 8f       	std	Y+29, r25	; 0x1d
    227e:	8c 8f       	std	Y+28, r24	; 0x1c
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2280:	8c 8d       	ldd	r24, Y+28	; 0x1c
    2282:	9d 8d       	ldd	r25, Y+29	; 0x1d
    2284:	01 97       	sbiw	r24, 0x01	; 1
    2286:	f1 f7       	brne	.-4      	; 0x2284 <SEVEN_SEGMENT_Display_Number+0xb2c>
    2288:	9d 8f       	std	Y+29, r25	; 0x1d
    228a:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    228c:	8e 8d       	ldd	r24, Y+30	; 0x1e
    228e:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2290:	01 97       	sbiw	r24, 0x01	; 1
    2292:	9f 8f       	std	Y+31, r25	; 0x1f
    2294:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2296:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2298:	9f 8d       	ldd	r25, Y+31	; 0x1f
    229a:	00 97       	sbiw	r24, 0x00	; 0
    229c:	69 f7       	brne	.-38     	; 0x2278 <SEVEN_SEGMENT_Display_Number+0xb20>
    229e:	24 c0       	rjmp	.+72     	; 0x22e8 <SEVEN_SEGMENT_Display_Number+0xb90>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    22a0:	68 a1       	ldd	r22, Y+32	; 0x20
    22a2:	79 a1       	ldd	r23, Y+33	; 0x21
    22a4:	8a a1       	ldd	r24, Y+34	; 0x22
    22a6:	9b a1       	ldd	r25, Y+35	; 0x23
    22a8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22ac:	dc 01       	movw	r26, r24
    22ae:	cb 01       	movw	r24, r22
    22b0:	9f 8f       	std	Y+31, r25	; 0x1f
    22b2:	8e 8f       	std	Y+30, r24	; 0x1e
    22b4:	8e 8d       	ldd	r24, Y+30	; 0x1e
    22b6:	9f 8d       	ldd	r25, Y+31	; 0x1f
    22b8:	9b 8f       	std	Y+27, r25	; 0x1b
    22ba:	8a 8f       	std	Y+26, r24	; 0x1a
    22bc:	8a 8d       	ldd	r24, Y+26	; 0x1a
    22be:	9b 8d       	ldd	r25, Y+27	; 0x1b
    22c0:	01 97       	sbiw	r24, 0x01	; 1
    22c2:	f1 f7       	brne	.-4      	; 0x22c0 <SEVEN_SEGMENT_Display_Number+0xb68>
    22c4:	9b 8f       	std	Y+27, r25	; 0x1b
    22c6:	8a 8f       	std	Y+26, r24	; 0x1a
    22c8:	0f c0       	rjmp	.+30     	; 0x22e8 <SEVEN_SEGMENT_Display_Number+0xb90>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    22ca:	69 a5       	ldd	r22, Y+41	; 0x29
    22cc:	7a a5       	ldd	r23, Y+42	; 0x2a
    22ce:	8b a5       	ldd	r24, Y+43	; 0x2b
    22d0:	9c a5       	ldd	r25, Y+44	; 0x2c
    22d2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22d6:	dc 01       	movw	r26, r24
    22d8:	cb 01       	movw	r24, r22
    22da:	88 a7       	std	Y+40, r24	; 0x28
    22dc:	88 a5       	ldd	r24, Y+40	; 0x28
    22de:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    22e0:	89 8d       	ldd	r24, Y+25	; 0x19
    22e2:	8a 95       	dec	r24
    22e4:	f1 f7       	brne	.-4      	; 0x22e2 <SEVEN_SEGMENT_Display_Number+0xb8a>
    22e6:	89 8f       	std	Y+25, r24	; 0x19
	_delay_us(10);

	displayed_num = (uint8)( Hour / 10);                      /* Turn on the sixth 7-segment by setting its common pin and Turn off rest */
    22e8:	de 01       	movw	r26, r28
    22ea:	af 56       	subi	r26, 0x6F	; 111
    22ec:	bf 4f       	sbci	r27, 0xFF	; 255
    22ee:	fe 01       	movw	r30, r28
    22f0:	ec 56       	subi	r30, 0x6C	; 108
    22f2:	ff 4f       	sbci	r31, 0xFF	; 255
    22f4:	80 81       	ld	r24, Z
    22f6:	9a e0       	ldi	r25, 0x0A	; 10
    22f8:	69 2f       	mov	r22, r25
    22fa:	0e 94 87 14 	call	0x290e	; 0x290e <__udivmodqi4>
    22fe:	8c 93       	st	X, r24
	PORTA = (1 << 5);                                         /* display the Sixth digit of the value of the Hours */
    2300:	eb e3       	ldi	r30, 0x3B	; 59
    2302:	f0 e0       	ldi	r31, 0x00	; 0
    2304:	80 e2       	ldi	r24, 0x20	; 32
    2306:	80 83       	st	Z, r24
	PORTC = (PORTC & 0xF0) | (displayed_num & 0x0F);
    2308:	a5 e3       	ldi	r26, 0x35	; 53
    230a:	b0 e0       	ldi	r27, 0x00	; 0
    230c:	e5 e3       	ldi	r30, 0x35	; 53
    230e:	f0 e0       	ldi	r31, 0x00	; 0
    2310:	80 81       	ld	r24, Z
    2312:	98 2f       	mov	r25, r24
    2314:	90 7f       	andi	r25, 0xF0	; 240
    2316:	fe 01       	movw	r30, r28
    2318:	ef 56       	subi	r30, 0x6F	; 111
    231a:	ff 4f       	sbci	r31, 0xFF	; 255
    231c:	80 81       	ld	r24, Z
    231e:	8f 70       	andi	r24, 0x0F	; 15
    2320:	89 2b       	or	r24, r25
    2322:	8c 93       	st	X, r24
    2324:	80 e0       	ldi	r24, 0x00	; 0
    2326:	90 e0       	ldi	r25, 0x00	; 0
    2328:	a0 e2       	ldi	r26, 0x20	; 32
    232a:	b1 e4       	ldi	r27, 0x41	; 65
    232c:	8d 8b       	std	Y+21, r24	; 0x15
    232e:	9e 8b       	std	Y+22, r25	; 0x16
    2330:	af 8b       	std	Y+23, r26	; 0x17
    2332:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2334:	6d 89       	ldd	r22, Y+21	; 0x15
    2336:	7e 89       	ldd	r23, Y+22	; 0x16
    2338:	8f 89       	ldd	r24, Y+23	; 0x17
    233a:	98 8d       	ldd	r25, Y+24	; 0x18
    233c:	2b ea       	ldi	r18, 0xAB	; 171
    233e:	3a ea       	ldi	r19, 0xAA	; 170
    2340:	4a ea       	ldi	r20, 0xAA	; 170
    2342:	5e e3       	ldi	r21, 0x3E	; 62
    2344:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2348:	dc 01       	movw	r26, r24
    234a:	cb 01       	movw	r24, r22
    234c:	89 8b       	std	Y+17, r24	; 0x11
    234e:	9a 8b       	std	Y+18, r25	; 0x12
    2350:	ab 8b       	std	Y+19, r26	; 0x13
    2352:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    2354:	69 89       	ldd	r22, Y+17	; 0x11
    2356:	7a 89       	ldd	r23, Y+18	; 0x12
    2358:	8b 89       	ldd	r24, Y+19	; 0x13
    235a:	9c 89       	ldd	r25, Y+20	; 0x14
    235c:	20 e0       	ldi	r18, 0x00	; 0
    235e:	30 e0       	ldi	r19, 0x00	; 0
    2360:	40 e8       	ldi	r20, 0x80	; 128
    2362:	5f e3       	ldi	r21, 0x3F	; 63
    2364:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2368:	88 23       	and	r24, r24
    236a:	1c f4       	brge	.+6      	; 0x2372 <SEVEN_SEGMENT_Display_Number+0xc1a>
		__ticks = 1;
    236c:	81 e0       	ldi	r24, 0x01	; 1
    236e:	88 8b       	std	Y+16, r24	; 0x10
    2370:	91 c0       	rjmp	.+290    	; 0x2494 <SEVEN_SEGMENT_Display_Number+0xd3c>
	else if (__tmp > 255)
    2372:	69 89       	ldd	r22, Y+17	; 0x11
    2374:	7a 89       	ldd	r23, Y+18	; 0x12
    2376:	8b 89       	ldd	r24, Y+19	; 0x13
    2378:	9c 89       	ldd	r25, Y+20	; 0x14
    237a:	20 e0       	ldi	r18, 0x00	; 0
    237c:	30 e0       	ldi	r19, 0x00	; 0
    237e:	4f e7       	ldi	r20, 0x7F	; 127
    2380:	53 e4       	ldi	r21, 0x43	; 67
    2382:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2386:	18 16       	cp	r1, r24
    2388:	0c f0       	brlt	.+2      	; 0x238c <SEVEN_SEGMENT_Display_Number+0xc34>
    238a:	7b c0       	rjmp	.+246    	; 0x2482 <SEVEN_SEGMENT_Display_Number+0xd2a>
	{
		_delay_ms(__us / 1000.0);
    238c:	6d 89       	ldd	r22, Y+21	; 0x15
    238e:	7e 89       	ldd	r23, Y+22	; 0x16
    2390:	8f 89       	ldd	r24, Y+23	; 0x17
    2392:	98 8d       	ldd	r25, Y+24	; 0x18
    2394:	20 e0       	ldi	r18, 0x00	; 0
    2396:	30 e0       	ldi	r19, 0x00	; 0
    2398:	4a e7       	ldi	r20, 0x7A	; 122
    239a:	54 e4       	ldi	r21, 0x44	; 68
    239c:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    23a0:	dc 01       	movw	r26, r24
    23a2:	cb 01       	movw	r24, r22
    23a4:	8c 87       	std	Y+12, r24	; 0x0c
    23a6:	9d 87       	std	Y+13, r25	; 0x0d
    23a8:	ae 87       	std	Y+14, r26	; 0x0e
    23aa:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    23ac:	6c 85       	ldd	r22, Y+12	; 0x0c
    23ae:	7d 85       	ldd	r23, Y+13	; 0x0d
    23b0:	8e 85       	ldd	r24, Y+14	; 0x0e
    23b2:	9f 85       	ldd	r25, Y+15	; 0x0f
    23b4:	20 e0       	ldi	r18, 0x00	; 0
    23b6:	30 e0       	ldi	r19, 0x00	; 0
    23b8:	4a e7       	ldi	r20, 0x7A	; 122
    23ba:	53 e4       	ldi	r21, 0x43	; 67
    23bc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23c0:	dc 01       	movw	r26, r24
    23c2:	cb 01       	movw	r24, r22
    23c4:	88 87       	std	Y+8, r24	; 0x08
    23c6:	99 87       	std	Y+9, r25	; 0x09
    23c8:	aa 87       	std	Y+10, r26	; 0x0a
    23ca:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    23cc:	68 85       	ldd	r22, Y+8	; 0x08
    23ce:	79 85       	ldd	r23, Y+9	; 0x09
    23d0:	8a 85       	ldd	r24, Y+10	; 0x0a
    23d2:	9b 85       	ldd	r25, Y+11	; 0x0b
    23d4:	20 e0       	ldi	r18, 0x00	; 0
    23d6:	30 e0       	ldi	r19, 0x00	; 0
    23d8:	40 e8       	ldi	r20, 0x80	; 128
    23da:	5f e3       	ldi	r21, 0x3F	; 63
    23dc:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    23e0:	88 23       	and	r24, r24
    23e2:	2c f4       	brge	.+10     	; 0x23ee <SEVEN_SEGMENT_Display_Number+0xc96>
		__ticks = 1;
    23e4:	81 e0       	ldi	r24, 0x01	; 1
    23e6:	90 e0       	ldi	r25, 0x00	; 0
    23e8:	9f 83       	std	Y+7, r25	; 0x07
    23ea:	8e 83       	std	Y+6, r24	; 0x06
    23ec:	3f c0       	rjmp	.+126    	; 0x246c <SEVEN_SEGMENT_Display_Number+0xd14>
	else if (__tmp > 65535)
    23ee:	68 85       	ldd	r22, Y+8	; 0x08
    23f0:	79 85       	ldd	r23, Y+9	; 0x09
    23f2:	8a 85       	ldd	r24, Y+10	; 0x0a
    23f4:	9b 85       	ldd	r25, Y+11	; 0x0b
    23f6:	20 e0       	ldi	r18, 0x00	; 0
    23f8:	3f ef       	ldi	r19, 0xFF	; 255
    23fa:	4f e7       	ldi	r20, 0x7F	; 127
    23fc:	57 e4       	ldi	r21, 0x47	; 71
    23fe:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2402:	18 16       	cp	r1, r24
    2404:	4c f5       	brge	.+82     	; 0x2458 <SEVEN_SEGMENT_Display_Number+0xd00>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2406:	6c 85       	ldd	r22, Y+12	; 0x0c
    2408:	7d 85       	ldd	r23, Y+13	; 0x0d
    240a:	8e 85       	ldd	r24, Y+14	; 0x0e
    240c:	9f 85       	ldd	r25, Y+15	; 0x0f
    240e:	20 e0       	ldi	r18, 0x00	; 0
    2410:	30 e0       	ldi	r19, 0x00	; 0
    2412:	40 e2       	ldi	r20, 0x20	; 32
    2414:	51 e4       	ldi	r21, 0x41	; 65
    2416:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    241a:	dc 01       	movw	r26, r24
    241c:	cb 01       	movw	r24, r22
    241e:	bc 01       	movw	r22, r24
    2420:	cd 01       	movw	r24, r26
    2422:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2426:	dc 01       	movw	r26, r24
    2428:	cb 01       	movw	r24, r22
    242a:	9f 83       	std	Y+7, r25	; 0x07
    242c:	8e 83       	std	Y+6, r24	; 0x06
    242e:	0f c0       	rjmp	.+30     	; 0x244e <SEVEN_SEGMENT_Display_Number+0xcf6>
    2430:	89 e1       	ldi	r24, 0x19	; 25
    2432:	90 e0       	ldi	r25, 0x00	; 0
    2434:	9d 83       	std	Y+5, r25	; 0x05
    2436:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2438:	8c 81       	ldd	r24, Y+4	; 0x04
    243a:	9d 81       	ldd	r25, Y+5	; 0x05
    243c:	01 97       	sbiw	r24, 0x01	; 1
    243e:	f1 f7       	brne	.-4      	; 0x243c <SEVEN_SEGMENT_Display_Number+0xce4>
    2440:	9d 83       	std	Y+5, r25	; 0x05
    2442:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2444:	8e 81       	ldd	r24, Y+6	; 0x06
    2446:	9f 81       	ldd	r25, Y+7	; 0x07
    2448:	01 97       	sbiw	r24, 0x01	; 1
    244a:	9f 83       	std	Y+7, r25	; 0x07
    244c:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    244e:	8e 81       	ldd	r24, Y+6	; 0x06
    2450:	9f 81       	ldd	r25, Y+7	; 0x07
    2452:	00 97       	sbiw	r24, 0x00	; 0
    2454:	69 f7       	brne	.-38     	; 0x2430 <SEVEN_SEGMENT_Display_Number+0xcd8>
    2456:	24 c0       	rjmp	.+72     	; 0x24a0 <SEVEN_SEGMENT_Display_Number+0xd48>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2458:	68 85       	ldd	r22, Y+8	; 0x08
    245a:	79 85       	ldd	r23, Y+9	; 0x09
    245c:	8a 85       	ldd	r24, Y+10	; 0x0a
    245e:	9b 85       	ldd	r25, Y+11	; 0x0b
    2460:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2464:	dc 01       	movw	r26, r24
    2466:	cb 01       	movw	r24, r22
    2468:	9f 83       	std	Y+7, r25	; 0x07
    246a:	8e 83       	std	Y+6, r24	; 0x06
    246c:	8e 81       	ldd	r24, Y+6	; 0x06
    246e:	9f 81       	ldd	r25, Y+7	; 0x07
    2470:	9b 83       	std	Y+3, r25	; 0x03
    2472:	8a 83       	std	Y+2, r24	; 0x02
    2474:	8a 81       	ldd	r24, Y+2	; 0x02
    2476:	9b 81       	ldd	r25, Y+3	; 0x03
    2478:	01 97       	sbiw	r24, 0x01	; 1
    247a:	f1 f7       	brne	.-4      	; 0x2478 <SEVEN_SEGMENT_Display_Number+0xd20>
    247c:	9b 83       	std	Y+3, r25	; 0x03
    247e:	8a 83       	std	Y+2, r24	; 0x02
    2480:	0f c0       	rjmp	.+30     	; 0x24a0 <SEVEN_SEGMENT_Display_Number+0xd48>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2482:	69 89       	ldd	r22, Y+17	; 0x11
    2484:	7a 89       	ldd	r23, Y+18	; 0x12
    2486:	8b 89       	ldd	r24, Y+19	; 0x13
    2488:	9c 89       	ldd	r25, Y+20	; 0x14
    248a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    248e:	dc 01       	movw	r26, r24
    2490:	cb 01       	movw	r24, r22
    2492:	88 8b       	std	Y+16, r24	; 0x10
    2494:	88 89       	ldd	r24, Y+16	; 0x10
    2496:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2498:	89 81       	ldd	r24, Y+1	; 0x01
    249a:	8a 95       	dec	r24
    249c:	f1 f7       	brne	.-4      	; 0x249a <SEVEN_SEGMENT_Display_Number+0xd42>
    249e:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(10);
}
    24a0:	cc 56       	subi	r28, 0x6C	; 108
    24a2:	df 4f       	sbci	r29, 0xFF	; 255
    24a4:	0f b6       	in	r0, 0x3f	; 63
    24a6:	f8 94       	cli
    24a8:	de bf       	out	0x3e, r29	; 62
    24aa:	0f be       	out	0x3f, r0	; 63
    24ac:	cd bf       	out	0x3d, r28	; 61
    24ae:	cf 91       	pop	r28
    24b0:	df 91       	pop	r29
    24b2:	1f 91       	pop	r17
    24b4:	0f 91       	pop	r16
    24b6:	08 95       	ret

000024b8 <__vector_9>:
/**************************************************************************
 * Function Name: ISR (INTERRUPT HANDLER FOR TIMER1_OVF_vect)
 * Description  : Call the Function that is required to be Executed when TIMER1_OVF happens
 **************************************************************************/
ISR(TIMER1_OVF_vect)
{
    24b8:	1f 92       	push	r1
    24ba:	0f 92       	push	r0
    24bc:	0f b6       	in	r0, 0x3f	; 63
    24be:	0f 92       	push	r0
    24c0:	11 24       	eor	r1, r1
    24c2:	2f 93       	push	r18
    24c4:	3f 93       	push	r19
    24c6:	4f 93       	push	r20
    24c8:	5f 93       	push	r21
    24ca:	6f 93       	push	r22
    24cc:	7f 93       	push	r23
    24ce:	8f 93       	push	r24
    24d0:	9f 93       	push	r25
    24d2:	af 93       	push	r26
    24d4:	bf 93       	push	r27
    24d6:	ef 93       	push	r30
    24d8:	ff 93       	push	r31
    24da:	df 93       	push	r29
    24dc:	cf 93       	push	r28
    24de:	cd b7       	in	r28, 0x3d	; 61
    24e0:	de b7       	in	r29, 0x3e	; 62

	(*TIMER1_CallBack_Array[0])();
    24e2:	e0 91 7c 00 	lds	r30, 0x007C
    24e6:	f0 91 7d 00 	lds	r31, 0x007D
    24ea:	09 95       	icall
}
    24ec:	cf 91       	pop	r28
    24ee:	df 91       	pop	r29
    24f0:	ff 91       	pop	r31
    24f2:	ef 91       	pop	r30
    24f4:	bf 91       	pop	r27
    24f6:	af 91       	pop	r26
    24f8:	9f 91       	pop	r25
    24fa:	8f 91       	pop	r24
    24fc:	7f 91       	pop	r23
    24fe:	6f 91       	pop	r22
    2500:	5f 91       	pop	r21
    2502:	4f 91       	pop	r20
    2504:	3f 91       	pop	r19
    2506:	2f 91       	pop	r18
    2508:	0f 90       	pop	r0
    250a:	0f be       	out	0x3f, r0	; 63
    250c:	0f 90       	pop	r0
    250e:	1f 90       	pop	r1
    2510:	18 95       	reti

00002512 <__vector_7>:
/**************************************************************************
 * Function Name: ISR (INTERRUPT HANDLER FOR TIMER1_COMPA_vect)
 * Description  : Call the Function that is required to be Executed when TIMER1_COMPA happens
 **************************************************************************/
ISR(TIMER1_COMPA_vect)
{
    2512:	1f 92       	push	r1
    2514:	0f 92       	push	r0
    2516:	0f b6       	in	r0, 0x3f	; 63
    2518:	0f 92       	push	r0
    251a:	11 24       	eor	r1, r1
    251c:	2f 93       	push	r18
    251e:	3f 93       	push	r19
    2520:	4f 93       	push	r20
    2522:	5f 93       	push	r21
    2524:	6f 93       	push	r22
    2526:	7f 93       	push	r23
    2528:	8f 93       	push	r24
    252a:	9f 93       	push	r25
    252c:	af 93       	push	r26
    252e:	bf 93       	push	r27
    2530:	ef 93       	push	r30
    2532:	ff 93       	push	r31
    2534:	df 93       	push	r29
    2536:	cf 93       	push	r28
    2538:	cd b7       	in	r28, 0x3d	; 61
    253a:	de b7       	in	r29, 0x3e	; 62
	(*TIMER1_CallBack_Array[1])();
    253c:	e0 91 7e 00 	lds	r30, 0x007E
    2540:	f0 91 7f 00 	lds	r31, 0x007F
    2544:	09 95       	icall
}
    2546:	cf 91       	pop	r28
    2548:	df 91       	pop	r29
    254a:	ff 91       	pop	r31
    254c:	ef 91       	pop	r30
    254e:	bf 91       	pop	r27
    2550:	af 91       	pop	r26
    2552:	9f 91       	pop	r25
    2554:	8f 91       	pop	r24
    2556:	7f 91       	pop	r23
    2558:	6f 91       	pop	r22
    255a:	5f 91       	pop	r21
    255c:	4f 91       	pop	r20
    255e:	3f 91       	pop	r19
    2560:	2f 91       	pop	r18
    2562:	0f 90       	pop	r0
    2564:	0f be       	out	0x3f, r0	; 63
    2566:	0f 90       	pop	r0
    2568:	1f 90       	pop	r1
    256a:	18 95       	reti

0000256c <__vector_8>:
/**************************************************************************
 * Function Name: ISR (INTERRUPT HANDLER FOR TIMER1_COMPB_vect)
 * Description  : Call the Function that is required to be Executed when TIMER1_COMPB happens
 **************************************************************************/
ISR(TIMER1_COMPB_vect)
{
    256c:	1f 92       	push	r1
    256e:	0f 92       	push	r0
    2570:	0f b6       	in	r0, 0x3f	; 63
    2572:	0f 92       	push	r0
    2574:	11 24       	eor	r1, r1
    2576:	2f 93       	push	r18
    2578:	3f 93       	push	r19
    257a:	4f 93       	push	r20
    257c:	5f 93       	push	r21
    257e:	6f 93       	push	r22
    2580:	7f 93       	push	r23
    2582:	8f 93       	push	r24
    2584:	9f 93       	push	r25
    2586:	af 93       	push	r26
    2588:	bf 93       	push	r27
    258a:	ef 93       	push	r30
    258c:	ff 93       	push	r31
    258e:	df 93       	push	r29
    2590:	cf 93       	push	r28
    2592:	cd b7       	in	r28, 0x3d	; 61
    2594:	de b7       	in	r29, 0x3e	; 62

	(*TIMER1_CallBack_Array[2])();
    2596:	e0 91 80 00 	lds	r30, 0x0080
    259a:	f0 91 81 00 	lds	r31, 0x0081
    259e:	09 95       	icall
}
    25a0:	cf 91       	pop	r28
    25a2:	df 91       	pop	r29
    25a4:	ff 91       	pop	r31
    25a6:	ef 91       	pop	r30
    25a8:	bf 91       	pop	r27
    25aa:	af 91       	pop	r26
    25ac:	9f 91       	pop	r25
    25ae:	8f 91       	pop	r24
    25b0:	7f 91       	pop	r23
    25b2:	6f 91       	pop	r22
    25b4:	5f 91       	pop	r21
    25b6:	4f 91       	pop	r20
    25b8:	3f 91       	pop	r19
    25ba:	2f 91       	pop	r18
    25bc:	0f 90       	pop	r0
    25be:	0f be       	out	0x3f, r0	; 63
    25c0:	0f 90       	pop	r0
    25c2:	1f 90       	pop	r1
    25c4:	18 95       	reti

000025c6 <__vector_6>:
/**************************************************************************
 * Function Name: ISR (INTERRUPT HANDLER FOR TIMER1_CAPT_vect)
 * Description  : Call the Function that is required to be Executed when TIMER1_CAPT happens
 **************************************************************************/
ISR(TIMER1_CAPT_vect)
{
    25c6:	1f 92       	push	r1
    25c8:	0f 92       	push	r0
    25ca:	0f b6       	in	r0, 0x3f	; 63
    25cc:	0f 92       	push	r0
    25ce:	11 24       	eor	r1, r1
    25d0:	2f 93       	push	r18
    25d2:	3f 93       	push	r19
    25d4:	4f 93       	push	r20
    25d6:	5f 93       	push	r21
    25d8:	6f 93       	push	r22
    25da:	7f 93       	push	r23
    25dc:	8f 93       	push	r24
    25de:	9f 93       	push	r25
    25e0:	af 93       	push	r26
    25e2:	bf 93       	push	r27
    25e4:	ef 93       	push	r30
    25e6:	ff 93       	push	r31
    25e8:	df 93       	push	r29
    25ea:	cf 93       	push	r28
    25ec:	cd b7       	in	r28, 0x3d	; 61
    25ee:	de b7       	in	r29, 0x3e	; 62
	(*TIMER1_CallBack_Array[3])();
    25f0:	e0 91 82 00 	lds	r30, 0x0082
    25f4:	f0 91 83 00 	lds	r31, 0x0083
    25f8:	09 95       	icall

}
    25fa:	cf 91       	pop	r28
    25fc:	df 91       	pop	r29
    25fe:	ff 91       	pop	r31
    2600:	ef 91       	pop	r30
    2602:	bf 91       	pop	r27
    2604:	af 91       	pop	r26
    2606:	9f 91       	pop	r25
    2608:	8f 91       	pop	r24
    260a:	7f 91       	pop	r23
    260c:	6f 91       	pop	r22
    260e:	5f 91       	pop	r21
    2610:	4f 91       	pop	r20
    2612:	3f 91       	pop	r19
    2614:	2f 91       	pop	r18
    2616:	0f 90       	pop	r0
    2618:	0f be       	out	0x3f, r0	; 63
    261a:	0f 90       	pop	r0
    261c:	1f 90       	pop	r1
    261e:	18 95       	reti

00002620 <TIMER1_Init_Normal_Mode>:
 * Description  : Initialize Timer1 in Normal Mode or Overflow mode
 * INPUTS       : Prescaler,Interrupt_Choice
 * RETURNS      : void
 **************************************************************************/
void TIMER1_Init_Normal_Mode(Clock_Pescaler Prescaler,INTERRUPT_SELECT Interrupt_Choice)
{
    2620:	df 93       	push	r29
    2622:	cf 93       	push	r28
    2624:	00 d0       	rcall	.+0      	; 0x2626 <TIMER1_Init_Normal_Mode+0x6>
    2626:	cd b7       	in	r28, 0x3d	; 61
    2628:	de b7       	in	r29, 0x3e	; 62
    262a:	89 83       	std	Y+1, r24	; 0x01
    262c:	6a 83       	std	Y+2, r22	; 0x02
	TCNT1 = 0;
    262e:	ec e4       	ldi	r30, 0x4C	; 76
    2630:	f0 e0       	ldi	r31, 0x00	; 0
    2632:	11 82       	std	Z+1, r1	; 0x01
    2634:	10 82       	st	Z, r1
	TCCR1A |= (1 << FOC1A);
    2636:	af e4       	ldi	r26, 0x4F	; 79
    2638:	b0 e0       	ldi	r27, 0x00	; 0
    263a:	ef e4       	ldi	r30, 0x4F	; 79
    263c:	f0 e0       	ldi	r31, 0x00	; 0
    263e:	80 81       	ld	r24, Z
    2640:	88 60       	ori	r24, 0x08	; 8
    2642:	8c 93       	st	X, r24
	TCCR1B = (TCCR1B & 0xF8) | (Prescaler);
    2644:	ae e4       	ldi	r26, 0x4E	; 78
    2646:	b0 e0       	ldi	r27, 0x00	; 0
    2648:	ee e4       	ldi	r30, 0x4E	; 78
    264a:	f0 e0       	ldi	r31, 0x00	; 0
    264c:	80 81       	ld	r24, Z
    264e:	98 2f       	mov	r25, r24
    2650:	98 7f       	andi	r25, 0xF8	; 248
    2652:	89 81       	ldd	r24, Y+1	; 0x01
    2654:	89 2b       	or	r24, r25
    2656:	8c 93       	st	X, r24
	if(Interrupt_Choice == DISABLE_INTERRUPT)
    2658:	8a 81       	ldd	r24, Y+2	; 0x02
    265a:	88 23       	and	r24, r24
    265c:	41 f4       	brne	.+16     	; 0x266e <TIMER1_Init_Normal_Mode+0x4e>
	{
		CLEAR_BIT(TIMSK,TOIE1);
    265e:	a9 e5       	ldi	r26, 0x59	; 89
    2660:	b0 e0       	ldi	r27, 0x00	; 0
    2662:	e9 e5       	ldi	r30, 0x59	; 89
    2664:	f0 e0       	ldi	r31, 0x00	; 0
    2666:	80 81       	ld	r24, Z
    2668:	8b 7f       	andi	r24, 0xFB	; 251
    266a:	8c 93       	st	X, r24
    266c:	11 c0       	rjmp	.+34     	; 0x2690 <TIMER1_Init_Normal_Mode+0x70>
	}
	else if(Interrupt_Choice == ENABLE_INTERRUPT)
    266e:	8a 81       	ldd	r24, Y+2	; 0x02
    2670:	81 30       	cpi	r24, 0x01	; 1
    2672:	71 f4       	brne	.+28     	; 0x2690 <TIMER1_Init_Normal_Mode+0x70>
	{
		SET_BIT(TIMSK,TOIE1);
    2674:	a9 e5       	ldi	r26, 0x59	; 89
    2676:	b0 e0       	ldi	r27, 0x00	; 0
    2678:	e9 e5       	ldi	r30, 0x59	; 89
    267a:	f0 e0       	ldi	r31, 0x00	; 0
    267c:	80 81       	ld	r24, Z
    267e:	84 60       	ori	r24, 0x04	; 4
    2680:	8c 93       	st	X, r24
		SREG |= (1 << 7);
    2682:	af e5       	ldi	r26, 0x5F	; 95
    2684:	b0 e0       	ldi	r27, 0x00	; 0
    2686:	ef e5       	ldi	r30, 0x5F	; 95
    2688:	f0 e0       	ldi	r31, 0x00	; 0
    268a:	80 81       	ld	r24, Z
    268c:	80 68       	ori	r24, 0x80	; 128
    268e:	8c 93       	st	X, r24
	}
	else
	{

	}
}
    2690:	0f 90       	pop	r0
    2692:	0f 90       	pop	r0
    2694:	cf 91       	pop	r28
    2696:	df 91       	pop	r29
    2698:	08 95       	ret

0000269a <TIMER1_Init_CTC_Mode>:
 * Description  : Initialize TIMER1 in Clear timer on compare match(CTC) mode
 * INPUTS       : Compare_Value,OutPutPin_Mode,Prescaler,Interrupt_Choice
 * RETURNS      : void
 **************************************************************************/
void TIMER1_Init_CTC_Mode(uint16 Compare_Value, CTC_Output_Mode OutPutPin_Mode ,Clock_Pescaler Prescaler,INTERRUPT_SELECT Interrupt_Choice)
{
    269a:	df 93       	push	r29
    269c:	cf 93       	push	r28
    269e:	00 d0       	rcall	.+0      	; 0x26a0 <TIMER1_Init_CTC_Mode+0x6>
    26a0:	00 d0       	rcall	.+0      	; 0x26a2 <TIMER1_Init_CTC_Mode+0x8>
    26a2:	0f 92       	push	r0
    26a4:	cd b7       	in	r28, 0x3d	; 61
    26a6:	de b7       	in	r29, 0x3e	; 62
    26a8:	9a 83       	std	Y+2, r25	; 0x02
    26aa:	89 83       	std	Y+1, r24	; 0x01
    26ac:	6b 83       	std	Y+3, r22	; 0x03
    26ae:	4c 83       	std	Y+4, r20	; 0x04
    26b0:	2d 83       	std	Y+5, r18	; 0x05
	TCNT1 = 0;
    26b2:	ec e4       	ldi	r30, 0x4C	; 76
    26b4:	f0 e0       	ldi	r31, 0x00	; 0
    26b6:	11 82       	std	Z+1, r1	; 0x01
    26b8:	10 82       	st	Z, r1
	OCR1A  = Compare_Value;
    26ba:	ea e4       	ldi	r30, 0x4A	; 74
    26bc:	f0 e0       	ldi	r31, 0x00	; 0
    26be:	89 81       	ldd	r24, Y+1	; 0x01
    26c0:	9a 81       	ldd	r25, Y+2	; 0x02
    26c2:	91 83       	std	Z+1, r25	; 0x01
    26c4:	80 83       	st	Z, r24
	TCCR1A |=(1 << FOC1A) ;
    26c6:	af e4       	ldi	r26, 0x4F	; 79
    26c8:	b0 e0       	ldi	r27, 0x00	; 0
    26ca:	ef e4       	ldi	r30, 0x4F	; 79
    26cc:	f0 e0       	ldi	r31, 0x00	; 0
    26ce:	80 81       	ld	r24, Z
    26d0:	88 60       	ori	r24, 0x08	; 8
    26d2:	8c 93       	st	X, r24
	TCCR1B |= (1 << WGM12);
    26d4:	ae e4       	ldi	r26, 0x4E	; 78
    26d6:	b0 e0       	ldi	r27, 0x00	; 0
    26d8:	ee e4       	ldi	r30, 0x4E	; 78
    26da:	f0 e0       	ldi	r31, 0x00	; 0
    26dc:	80 81       	ld	r24, Z
    26de:	88 60       	ori	r24, 0x08	; 8
    26e0:	8c 93       	st	X, r24
	TCCR1B = (TCCR1B & 0xF8) | (Prescaler);
    26e2:	ae e4       	ldi	r26, 0x4E	; 78
    26e4:	b0 e0       	ldi	r27, 0x00	; 0
    26e6:	ee e4       	ldi	r30, 0x4E	; 78
    26e8:	f0 e0       	ldi	r31, 0x00	; 0
    26ea:	80 81       	ld	r24, Z
    26ec:	98 2f       	mov	r25, r24
    26ee:	98 7f       	andi	r25, 0xF8	; 248
    26f0:	8c 81       	ldd	r24, Y+4	; 0x04
    26f2:	89 2b       	or	r24, r25
    26f4:	8c 93       	st	X, r24
	TCCR1A = (TCCR0 & 0x3F) | (OutPutPin_Mode << 6);
    26f6:	af e4       	ldi	r26, 0x4F	; 79
    26f8:	b0 e0       	ldi	r27, 0x00	; 0
    26fa:	e3 e5       	ldi	r30, 0x53	; 83
    26fc:	f0 e0       	ldi	r31, 0x00	; 0
    26fe:	80 81       	ld	r24, Z
    2700:	28 2f       	mov	r18, r24
    2702:	2f 73       	andi	r18, 0x3F	; 63
    2704:	8b 81       	ldd	r24, Y+3	; 0x03
    2706:	88 2f       	mov	r24, r24
    2708:	90 e0       	ldi	r25, 0x00	; 0
    270a:	00 24       	eor	r0, r0
    270c:	96 95       	lsr	r25
    270e:	87 95       	ror	r24
    2710:	07 94       	ror	r0
    2712:	96 95       	lsr	r25
    2714:	87 95       	ror	r24
    2716:	07 94       	ror	r0
    2718:	98 2f       	mov	r25, r24
    271a:	80 2d       	mov	r24, r0
    271c:	82 2b       	or	r24, r18
    271e:	8c 93       	st	X, r24
	if(Interrupt_Choice == DISABLE_INTERRUPT)
    2720:	8d 81       	ldd	r24, Y+5	; 0x05
    2722:	88 23       	and	r24, r24
    2724:	41 f4       	brne	.+16     	; 0x2736 <TIMER1_Init_CTC_Mode+0x9c>
	{
		CLEAR_BIT(TIMSK,OCIE1A);
    2726:	a9 e5       	ldi	r26, 0x59	; 89
    2728:	b0 e0       	ldi	r27, 0x00	; 0
    272a:	e9 e5       	ldi	r30, 0x59	; 89
    272c:	f0 e0       	ldi	r31, 0x00	; 0
    272e:	80 81       	ld	r24, Z
    2730:	8f 7e       	andi	r24, 0xEF	; 239
    2732:	8c 93       	st	X, r24
    2734:	11 c0       	rjmp	.+34     	; 0x2758 <TIMER1_Init_CTC_Mode+0xbe>
	}
	else if(Interrupt_Choice == ENABLE_INTERRUPT)
    2736:	8d 81       	ldd	r24, Y+5	; 0x05
    2738:	81 30       	cpi	r24, 0x01	; 1
    273a:	71 f4       	brne	.+28     	; 0x2758 <TIMER1_Init_CTC_Mode+0xbe>
	{
		SET_BIT(TIMSK,OCIE1A);
    273c:	a9 e5       	ldi	r26, 0x59	; 89
    273e:	b0 e0       	ldi	r27, 0x00	; 0
    2740:	e9 e5       	ldi	r30, 0x59	; 89
    2742:	f0 e0       	ldi	r31, 0x00	; 0
    2744:	80 81       	ld	r24, Z
    2746:	80 61       	ori	r24, 0x10	; 16
    2748:	8c 93       	st	X, r24
		SREG |= (1 << 7);
    274a:	af e5       	ldi	r26, 0x5F	; 95
    274c:	b0 e0       	ldi	r27, 0x00	; 0
    274e:	ef e5       	ldi	r30, 0x5F	; 95
    2750:	f0 e0       	ldi	r31, 0x00	; 0
    2752:	80 81       	ld	r24, Z
    2754:	80 68       	ori	r24, 0x80	; 128
    2756:	8c 93       	st	X, r24
	else
	{

	}

}
    2758:	0f 90       	pop	r0
    275a:	0f 90       	pop	r0
    275c:	0f 90       	pop	r0
    275e:	0f 90       	pop	r0
    2760:	0f 90       	pop	r0
    2762:	cf 91       	pop	r28
    2764:	df 91       	pop	r29
    2766:	08 95       	ret

00002768 <TIMER1_Init_PWM_Mode>:
 * INPUTS       : Compare_Value,OutPutPin_Mode,Prescaler,Interrupt_Choice
 * RETURNS      : void
 **************************************************************************/
void TIMER1_Init_PWM_Mode(uint8 Compare_Value,PWM_Output_Mode OutPutPin_Mode
		                  ,Clock_Pescaler Prescaler,INTERRUPT_SELECT Interrupt_Choice)
{
    2768:	df 93       	push	r29
    276a:	cf 93       	push	r28
    276c:	00 d0       	rcall	.+0      	; 0x276e <TIMER1_Init_PWM_Mode+0x6>
    276e:	00 d0       	rcall	.+0      	; 0x2770 <TIMER1_Init_PWM_Mode+0x8>
    2770:	cd b7       	in	r28, 0x3d	; 61
    2772:	de b7       	in	r29, 0x3e	; 62
    2774:	89 83       	std	Y+1, r24	; 0x01
    2776:	6a 83       	std	Y+2, r22	; 0x02
    2778:	4b 83       	std	Y+3, r20	; 0x03
    277a:	2c 83       	std	Y+4, r18	; 0x04
	TCNT1 = 0;
    277c:	ec e4       	ldi	r30, 0x4C	; 76
    277e:	f0 e0       	ldi	r31, 0x00	; 0
    2780:	11 82       	std	Z+1, r1	; 0x01
    2782:	10 82       	st	Z, r1
	OCR1A  = Compare_Value;
    2784:	ea e4       	ldi	r30, 0x4A	; 74
    2786:	f0 e0       	ldi	r31, 0x00	; 0
    2788:	89 81       	ldd	r24, Y+1	; 0x01
    278a:	88 2f       	mov	r24, r24
    278c:	90 e0       	ldi	r25, 0x00	; 0
    278e:	91 83       	std	Z+1, r25	; 0x01
    2790:	80 83       	st	Z, r24
	TCCR1A |= (1<<WGM00)|(1 <<WGM01);
    2792:	af e4       	ldi	r26, 0x4F	; 79
    2794:	b0 e0       	ldi	r27, 0x00	; 0
    2796:	ef e4       	ldi	r30, 0x4F	; 79
    2798:	f0 e0       	ldi	r31, 0x00	; 0
    279a:	80 81       	ld	r24, Z
    279c:	88 64       	ori	r24, 0x48	; 72
    279e:	8c 93       	st	X, r24
	TCCR1B |= (1<<WGM12)|(1 <<WGM13);
    27a0:	ae e4       	ldi	r26, 0x4E	; 78
    27a2:	b0 e0       	ldi	r27, 0x00	; 0
    27a4:	ee e4       	ldi	r30, 0x4E	; 78
    27a6:	f0 e0       	ldi	r31, 0x00	; 0
    27a8:	80 81       	ld	r24, Z
    27aa:	88 61       	ori	r24, 0x18	; 24
    27ac:	8c 93       	st	X, r24
	TCCR1B = (TCCR1B & 0xF8) | (Prescaler);
    27ae:	ae e4       	ldi	r26, 0x4E	; 78
    27b0:	b0 e0       	ldi	r27, 0x00	; 0
    27b2:	ee e4       	ldi	r30, 0x4E	; 78
    27b4:	f0 e0       	ldi	r31, 0x00	; 0
    27b6:	80 81       	ld	r24, Z
    27b8:	98 2f       	mov	r25, r24
    27ba:	98 7f       	andi	r25, 0xF8	; 248
    27bc:	8b 81       	ldd	r24, Y+3	; 0x03
    27be:	89 2b       	or	r24, r25
    27c0:	8c 93       	st	X, r24
	TCCR1A = (TCCR1B & 0x3F) | (OutPutPin_Mode << 6);
    27c2:	af e4       	ldi	r26, 0x4F	; 79
    27c4:	b0 e0       	ldi	r27, 0x00	; 0
    27c6:	ee e4       	ldi	r30, 0x4E	; 78
    27c8:	f0 e0       	ldi	r31, 0x00	; 0
    27ca:	80 81       	ld	r24, Z
    27cc:	28 2f       	mov	r18, r24
    27ce:	2f 73       	andi	r18, 0x3F	; 63
    27d0:	8a 81       	ldd	r24, Y+2	; 0x02
    27d2:	88 2f       	mov	r24, r24
    27d4:	90 e0       	ldi	r25, 0x00	; 0
    27d6:	00 24       	eor	r0, r0
    27d8:	96 95       	lsr	r25
    27da:	87 95       	ror	r24
    27dc:	07 94       	ror	r0
    27de:	96 95       	lsr	r25
    27e0:	87 95       	ror	r24
    27e2:	07 94       	ror	r0
    27e4:	98 2f       	mov	r25, r24
    27e6:	80 2d       	mov	r24, r0
    27e8:	82 2b       	or	r24, r18
    27ea:	8c 93       	st	X, r24
	if(Interrupt_Choice == DISABLE_INTERRUPT)
    27ec:	8c 81       	ldd	r24, Y+4	; 0x04
    27ee:	88 23       	and	r24, r24
    27f0:	41 f4       	brne	.+16     	; 0x2802 <TIMER1_Init_PWM_Mode+0x9a>
	{
		CLEAR_BIT(TIMSK,OCIE1A);
    27f2:	a9 e5       	ldi	r26, 0x59	; 89
    27f4:	b0 e0       	ldi	r27, 0x00	; 0
    27f6:	e9 e5       	ldi	r30, 0x59	; 89
    27f8:	f0 e0       	ldi	r31, 0x00	; 0
    27fa:	80 81       	ld	r24, Z
    27fc:	8f 7e       	andi	r24, 0xEF	; 239
    27fe:	8c 93       	st	X, r24
    2800:	11 c0       	rjmp	.+34     	; 0x2824 <TIMER1_Init_PWM_Mode+0xbc>
	}
	else if(Interrupt_Choice == ENABLE_INTERRUPT)
    2802:	8c 81       	ldd	r24, Y+4	; 0x04
    2804:	81 30       	cpi	r24, 0x01	; 1
    2806:	71 f4       	brne	.+28     	; 0x2824 <TIMER1_Init_PWM_Mode+0xbc>
	{
		SET_BIT(TIMSK,OCIE1A);
    2808:	a9 e5       	ldi	r26, 0x59	; 89
    280a:	b0 e0       	ldi	r27, 0x00	; 0
    280c:	e9 e5       	ldi	r30, 0x59	; 89
    280e:	f0 e0       	ldi	r31, 0x00	; 0
    2810:	80 81       	ld	r24, Z
    2812:	80 61       	ori	r24, 0x10	; 16
    2814:	8c 93       	st	X, r24
		SREG |= (1 << 7);
    2816:	af e5       	ldi	r26, 0x5F	; 95
    2818:	b0 e0       	ldi	r27, 0x00	; 0
    281a:	ef e5       	ldi	r30, 0x5F	; 95
    281c:	f0 e0       	ldi	r31, 0x00	; 0
    281e:	80 81       	ld	r24, Z
    2820:	80 68       	ori	r24, 0x80	; 128
    2822:	8c 93       	st	X, r24
	}
	else
	{

	}
}
    2824:	0f 90       	pop	r0
    2826:	0f 90       	pop	r0
    2828:	0f 90       	pop	r0
    282a:	0f 90       	pop	r0
    282c:	cf 91       	pop	r28
    282e:	df 91       	pop	r29
    2830:	08 95       	ret

00002832 <TIMER1_Init_ICU_Mode>:
 * Description  : Initialize TIMER1 in ICU_Mode
 * INPUTS       : Prescaler,Interrupt_Choice,EDGE  (1024,Enable_interrupt,Falling)
 * RETURNS      : void
 **************************************************************************/
void TIMER1_Init_ICU_Mode(Clock_Pescaler Prescaler,INTERRUPT_SELECT Interrupt_Choice,ICU_EDGE_TYPE EDGE)
{
    2832:	df 93       	push	r29
    2834:	cf 93       	push	r28
    2836:	00 d0       	rcall	.+0      	; 0x2838 <TIMER1_Init_ICU_Mode+0x6>
    2838:	0f 92       	push	r0
    283a:	cd b7       	in	r28, 0x3d	; 61
    283c:	de b7       	in	r29, 0x3e	; 62
    283e:	89 83       	std	Y+1, r24	; 0x01
    2840:	6a 83       	std	Y+2, r22	; 0x02
    2842:	4b 83       	std	Y+3, r20	; 0x03
	TCNT1 = 0;
    2844:	ec e4       	ldi	r30, 0x4C	; 76
    2846:	f0 e0       	ldi	r31, 0x00	; 0
    2848:	11 82       	std	Z+1, r1	; 0x01
    284a:	10 82       	st	Z, r1
	TCCR1A = (1 << FOC1A) | (1 << FOC1B);
    284c:	ef e4       	ldi	r30, 0x4F	; 79
    284e:	f0 e0       	ldi	r31, 0x00	; 0
    2850:	8c e0       	ldi	r24, 0x0C	; 12
    2852:	80 83       	st	Z, r24
	TCCR1B &= ~(1 << WGM13) & ~(1 << WGM12);
    2854:	ae e4       	ldi	r26, 0x4E	; 78
    2856:	b0 e0       	ldi	r27, 0x00	; 0
    2858:	ee e4       	ldi	r30, 0x4E	; 78
    285a:	f0 e0       	ldi	r31, 0x00	; 0
    285c:	80 81       	ld	r24, Z
    285e:	87 7e       	andi	r24, 0xE7	; 231
    2860:	8c 93       	st	X, r24
	if(EDGE == FALLING_ICU)
    2862:	8b 81       	ldd	r24, Y+3	; 0x03
    2864:	88 23       	and	r24, r24
    2866:	41 f4       	brne	.+16     	; 0x2878 <TIMER1_Init_ICU_Mode+0x46>
	{
		CLEAR_BIT(TCCR1B,ICES1);
    2868:	ae e4       	ldi	r26, 0x4E	; 78
    286a:	b0 e0       	ldi	r27, 0x00	; 0
    286c:	ee e4       	ldi	r30, 0x4E	; 78
    286e:	f0 e0       	ldi	r31, 0x00	; 0
    2870:	80 81       	ld	r24, Z
    2872:	8f 7b       	andi	r24, 0xBF	; 191
    2874:	8c 93       	st	X, r24
    2876:	07 c0       	rjmp	.+14     	; 0x2886 <TIMER1_Init_ICU_Mode+0x54>
	}
	else
	{
		SET_BIT(TCCR1B,ICES1);
    2878:	ae e4       	ldi	r26, 0x4E	; 78
    287a:	b0 e0       	ldi	r27, 0x00	; 0
    287c:	ee e4       	ldi	r30, 0x4E	; 78
    287e:	f0 e0       	ldi	r31, 0x00	; 0
    2880:	80 81       	ld	r24, Z
    2882:	80 64       	ori	r24, 0x40	; 64
    2884:	8c 93       	st	X, r24
	}

	TCCR1B = (TCCR1B & 0xF8) | (Prescaler) ;
    2886:	ae e4       	ldi	r26, 0x4E	; 78
    2888:	b0 e0       	ldi	r27, 0x00	; 0
    288a:	ee e4       	ldi	r30, 0x4E	; 78
    288c:	f0 e0       	ldi	r31, 0x00	; 0
    288e:	80 81       	ld	r24, Z
    2890:	98 2f       	mov	r25, r24
    2892:	98 7f       	andi	r25, 0xF8	; 248
    2894:	89 81       	ldd	r24, Y+1	; 0x01
    2896:	89 2b       	or	r24, r25
    2898:	8c 93       	st	X, r24

	if(Interrupt_Choice == ENABLE_INTERRUPT)
    289a:	8a 81       	ldd	r24, Y+2	; 0x02
    289c:	81 30       	cpi	r24, 0x01	; 1
    289e:	79 f4       	brne	.+30     	; 0x28be <TIMER1_Init_ICU_Mode+0x8c>
	{
		SET_BIT(TIMSK,TICIE1);
    28a0:	a9 e5       	ldi	r26, 0x59	; 89
    28a2:	b0 e0       	ldi	r27, 0x00	; 0
    28a4:	e9 e5       	ldi	r30, 0x59	; 89
    28a6:	f0 e0       	ldi	r31, 0x00	; 0
    28a8:	80 81       	ld	r24, Z
    28aa:	80 62       	ori	r24, 0x20	; 32
    28ac:	8c 93       	st	X, r24
		SET_BIT(SREG,7);
    28ae:	af e5       	ldi	r26, 0x5F	; 95
    28b0:	b0 e0       	ldi	r27, 0x00	; 0
    28b2:	ef e5       	ldi	r30, 0x5F	; 95
    28b4:	f0 e0       	ldi	r31, 0x00	; 0
    28b6:	80 81       	ld	r24, Z
    28b8:	80 68       	ori	r24, 0x80	; 128
    28ba:	8c 93       	st	X, r24
    28bc:	07 c0       	rjmp	.+14     	; 0x28cc <TIMER1_Init_ICU_Mode+0x9a>
	}
	else
	{
		CLEAR_BIT(TIMSK,TICIE1);
    28be:	a9 e5       	ldi	r26, 0x59	; 89
    28c0:	b0 e0       	ldi	r27, 0x00	; 0
    28c2:	e9 e5       	ldi	r30, 0x59	; 89
    28c4:	f0 e0       	ldi	r31, 0x00	; 0
    28c6:	80 81       	ld	r24, Z
    28c8:	8f 7d       	andi	r24, 0xDF	; 223
    28ca:	8c 93       	st	X, r24
	}

}
    28cc:	0f 90       	pop	r0
    28ce:	0f 90       	pop	r0
    28d0:	0f 90       	pop	r0
    28d2:	cf 91       	pop	r28
    28d4:	df 91       	pop	r29
    28d6:	08 95       	ret

000028d8 <TIMER1_Set_CallBack>:
 * Description  : A Function to set the callBack functions for Timer1 Events
 * INPUTS       : ptr_2_fun,index(which indicates which ISR would be Executed)
 * RETURNS      : void
 **********************************************************************************/
void TIMER1_Set_CallBack(void(* ptr_2_fun)(void),uint8 index)
{
    28d8:	df 93       	push	r29
    28da:	cf 93       	push	r28
    28dc:	00 d0       	rcall	.+0      	; 0x28de <TIMER1_Set_CallBack+0x6>
    28de:	0f 92       	push	r0
    28e0:	cd b7       	in	r28, 0x3d	; 61
    28e2:	de b7       	in	r29, 0x3e	; 62
    28e4:	9a 83       	std	Y+2, r25	; 0x02
    28e6:	89 83       	std	Y+1, r24	; 0x01
    28e8:	6b 83       	std	Y+3, r22	; 0x03
	TIMER1_CallBack_Array[index] = ptr_2_fun;
    28ea:	8b 81       	ldd	r24, Y+3	; 0x03
    28ec:	88 2f       	mov	r24, r24
    28ee:	90 e0       	ldi	r25, 0x00	; 0
    28f0:	29 81       	ldd	r18, Y+1	; 0x01
    28f2:	3a 81       	ldd	r19, Y+2	; 0x02
    28f4:	88 0f       	add	r24, r24
    28f6:	99 1f       	adc	r25, r25
    28f8:	fc 01       	movw	r30, r24
    28fa:	e4 58       	subi	r30, 0x84	; 132
    28fc:	ff 4f       	sbci	r31, 0xFF	; 255
    28fe:	31 83       	std	Z+1, r19	; 0x01
    2900:	20 83       	st	Z, r18
}
    2902:	0f 90       	pop	r0
    2904:	0f 90       	pop	r0
    2906:	0f 90       	pop	r0
    2908:	cf 91       	pop	r28
    290a:	df 91       	pop	r29
    290c:	08 95       	ret

0000290e <__udivmodqi4>:
    290e:	99 1b       	sub	r25, r25
    2910:	79 e0       	ldi	r23, 0x09	; 9
    2912:	04 c0       	rjmp	.+8      	; 0x291c <__udivmodqi4_ep>

00002914 <__udivmodqi4_loop>:
    2914:	99 1f       	adc	r25, r25
    2916:	96 17       	cp	r25, r22
    2918:	08 f0       	brcs	.+2      	; 0x291c <__udivmodqi4_ep>
    291a:	96 1b       	sub	r25, r22

0000291c <__udivmodqi4_ep>:
    291c:	88 1f       	adc	r24, r24
    291e:	7a 95       	dec	r23
    2920:	c9 f7       	brne	.-14     	; 0x2914 <__udivmodqi4_loop>
    2922:	80 95       	com	r24
    2924:	08 95       	ret

00002926 <__prologue_saves__>:
    2926:	2f 92       	push	r2
    2928:	3f 92       	push	r3
    292a:	4f 92       	push	r4
    292c:	5f 92       	push	r5
    292e:	6f 92       	push	r6
    2930:	7f 92       	push	r7
    2932:	8f 92       	push	r8
    2934:	9f 92       	push	r9
    2936:	af 92       	push	r10
    2938:	bf 92       	push	r11
    293a:	cf 92       	push	r12
    293c:	df 92       	push	r13
    293e:	ef 92       	push	r14
    2940:	ff 92       	push	r15
    2942:	0f 93       	push	r16
    2944:	1f 93       	push	r17
    2946:	cf 93       	push	r28
    2948:	df 93       	push	r29
    294a:	cd b7       	in	r28, 0x3d	; 61
    294c:	de b7       	in	r29, 0x3e	; 62
    294e:	ca 1b       	sub	r28, r26
    2950:	db 0b       	sbc	r29, r27
    2952:	0f b6       	in	r0, 0x3f	; 63
    2954:	f8 94       	cli
    2956:	de bf       	out	0x3e, r29	; 62
    2958:	0f be       	out	0x3f, r0	; 63
    295a:	cd bf       	out	0x3d, r28	; 61
    295c:	09 94       	ijmp

0000295e <__epilogue_restores__>:
    295e:	2a 88       	ldd	r2, Y+18	; 0x12
    2960:	39 88       	ldd	r3, Y+17	; 0x11
    2962:	48 88       	ldd	r4, Y+16	; 0x10
    2964:	5f 84       	ldd	r5, Y+15	; 0x0f
    2966:	6e 84       	ldd	r6, Y+14	; 0x0e
    2968:	7d 84       	ldd	r7, Y+13	; 0x0d
    296a:	8c 84       	ldd	r8, Y+12	; 0x0c
    296c:	9b 84       	ldd	r9, Y+11	; 0x0b
    296e:	aa 84       	ldd	r10, Y+10	; 0x0a
    2970:	b9 84       	ldd	r11, Y+9	; 0x09
    2972:	c8 84       	ldd	r12, Y+8	; 0x08
    2974:	df 80       	ldd	r13, Y+7	; 0x07
    2976:	ee 80       	ldd	r14, Y+6	; 0x06
    2978:	fd 80       	ldd	r15, Y+5	; 0x05
    297a:	0c 81       	ldd	r16, Y+4	; 0x04
    297c:	1b 81       	ldd	r17, Y+3	; 0x03
    297e:	aa 81       	ldd	r26, Y+2	; 0x02
    2980:	b9 81       	ldd	r27, Y+1	; 0x01
    2982:	ce 0f       	add	r28, r30
    2984:	d1 1d       	adc	r29, r1
    2986:	0f b6       	in	r0, 0x3f	; 63
    2988:	f8 94       	cli
    298a:	de bf       	out	0x3e, r29	; 62
    298c:	0f be       	out	0x3f, r0	; 63
    298e:	cd bf       	out	0x3d, r28	; 61
    2990:	ed 01       	movw	r28, r26
    2992:	08 95       	ret

00002994 <_exit>:
    2994:	f8 94       	cli

00002996 <__stop_program>:
    2996:	ff cf       	rjmp	.-2      	; 0x2996 <__stop_program>
